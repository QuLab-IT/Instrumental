<?xml version="1.0" encoding="utf-8"?><HierarchySearchSerializer xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"><a name="SCPI"><d><e>apply</e><e>apply</e><e>query the function generator's current configuration and return a quoted string.</e><e> apply? apply? query the function generator's current configuration and return a quoted string. the purpose of this command is to allow you to append this query response to an appl: command in your programming application and use the result to place the function generator in the specified state. the function, frequency, amplitude, and offset are returned as shown in the sample string below (the quotation marks are returned as part of the string). "sin +5.0000000000000e+03,+3.0000000000000e+00,-2.5000000000000e+00" </e></d><d><e>apply:dc</e><e>dc</e><e>output a dc voltage with the level specified by the offset parameter. the dc voltage is output as soon as the command is executed. </e><e> apply:dc [&lt;frequency|default&gt; [,&lt;amplitude&gt;|default&gt; [,&lt;offset&gt;] ]] apply:dc [&lt;frequency|default&gt; [,&lt;amplitude&gt;|default&gt; [,&lt;offset&gt;] ]] output a dc voltage with the level specified by the offset parameter. you can set the dc voltage to any value between �5 vdc into 50 ohms or �10 vdc into an open circuit. the dc voltage is output as soon as the command is executed. � the frequency and amplitude parameters have no effect for this command but you must specify a value or "default". if you specify a frequency and amplitude, they have no effect on the dc output, but the values are remembered when you change to a different function. the following statement shows the use of the apply command for a dc output. appl:dc def, def, -2.5 </e></d><d><e>apply:noise</e><e>noise</e><e>output gaussian noise with the specified amplitude and dc offset. the waveform is output as soon as the command is executed. </e><e> apply:noise [&lt;frequency|default&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] apply:noise [&lt;frequency|default&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] output gaussian noise with the specified amplitude and dc offset. the waveform is output as soon as the command is executed. � the frequency parameter has no effect for this command but you must specify a value or "default" (the noise function has a 50 mhz bandwidth). if you specify a frequency, it has no effect on the noise output, but the value is remembered when you change to a different function. the following statement shows the use of the apply command for noise. appl:nois def, 5.0, 2.0 </e></d><d><e>apply:pulse</e><e>pulse</e><e>output a pulse wave with the specified frequency, amplitude, and dc offset. the waveform is output as soon as the command is executed. </e><e> apply:pulse [&lt;frequency&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] apply:pulse [&lt;frequency&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] output a pulse wave with the specified frequency, amplitude, and dc offset. the waveform is output as soon as the command is executed. � this command preserves the current pulse width setting (puls:widt command) and edge time setting (puls:tran command). however, based on the specified frequency, the function generator will adjust the pulse width or edge time to comply with the frequency restrictions for pulse waveforms. see page 166 for more information on setting the pulse width and edge time. � in most applications, the repetition rate for pulse waveforms is specified using a waveform period rather than frequency. the apply command will make approximations in some cases to generate a pulse with the specified frequency. therefore, the recommended method for setting the repetition rate for pulse waveforms is using the puls:per command (see page 166). </e></d><d><e>apply:ramp</e><e>ramp</e><e>output a ramp wave with the specified frequency, amplitude, and dc offset. this command overrides the current symmetry setting and automatically selects 100%. the waveform is output as soon as the command is executed. </e><e> apply:ramp [&lt;frequency&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] apply:ramp [&lt;frequency&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] output a ramp wave with the specified frequency, amplitude, and dc offset. this command overrides the current symmetry setting and automatically selects 100%. the waveform is output as soon as the command is executed. </e></d><d><e>apply:sinusoid</e><e>sinusoid</e><e>output a sine wave with the specified frequency, amplitude, and dc offset. the waveform is output as soon as the command is executed. </e><e> apply:sinusoid [&lt;frequency&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] apply:sinusoid [&lt;frequency&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] output a sine wave with the specified frequency, amplitude, and dc offset. the waveform is output as soon as the command is executed. </e></d><d><e>apply:square</e><e>square</e><e>output a square wave with the specified frequency, amplitude, and dc offset. this command overrides the current duty cycle setting and automatically selects 50%. the waveform is output as soon as the command is executed. </e><e> apply:square [&lt;frequency&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] apply:square [&lt;frequency&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] output a square wave with the specified frequency, amplitude, and dc offset. this command overrides the current duty cycle setting and automatically selects 50%. the waveform is output as soon as the command is executed. </e></d><d><e>apply:user</e><e>user</e><e>output the arbitrary waveform currently selected by the func:user command. the waveform is output using the specified frequency, amplitude, and dc offset. the waveform is output as soon as the command is executed. </e><e> apply:user [&lt;frequency&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] apply:user [&lt;frequency&gt; [,&lt;amplitude&gt; [,&lt;offset&gt;] ]] output the arbitrary waveform currently selected by the func:user command. the waveform is output using the specified frequency, amplitude, and dc offset. the waveform is output as soon as the command is executed. see page 198 for more information on downloading arbitrary waveforms to memory. </e></d><d><e>calibrate:all</e><e>all</e><e>perform a calibration of the instrument using the specified calibration value (cal:val command). before you can calibrate the function generator, you must unsecure it by entering the correct security code. </e><e> calibration? calibration? perform a calibration of the instrument using the specified calibration value (cal:val command). before you can calibrate the function generator, you must unsecure it by entering the correct security code. returns "0" (pass) or "1" (fail). </e></d><d><e>calibrate:count</e><e>count</e><e>query the instrument to determine the number of times it has been calibrated. </e><e> calibration:count? calibration:count? query the instrument to determine the number of times it has been calibrated. note that your instrument was calibrated before it left the factory. when you receive your instrument from the factory, be sure to read the count to determine its initial value. � the calibration count is stored in non-volatile memory. the count increments up to a maximum of "65,535" after which it rolls over to "0". since the value increments by one for each calibration point, a complete calibration may increase the value by many counts. </e></d><d><e>calibrate:secure:code</e><e>code</e><e>enter a new security code. to change the security code, you must first unsecure the function generator using the old security code, and then enter a new code. the security code is stored in non-volatile memory. </e><e> calibration:secure:code &lt;new code&gt; calibration:secure:code &lt;new code&gt; enter a new security code. to change the security code, you must first unsecure the function generator using the old security code, and then enter a new code. the security code is stored in non-volatile memory. � the calibration code may contain up to 12 characters. the first character must be a letter (a-z), but the remaining characters can be letters, numbers (0-9), or the underscore character (" _ "). you do not have to use all 12 characters, but the first character must always be a letter. </e></d><d><e>calibrate:secure:state</e><e>state</e><e>unsecure or secure the instrument for calibration. </e><e> calibration:secure:state {off|on},&lt;code&gt; calibration:secure:state? calibration:secure:state {off|on},&lt;code&gt;calibration:secure:state? unsecure or secure the instrument for calibration. the calibration code may contain up to 12 characters. the :stat? query returns "0" (off) or "1" (on). </e></d><d><e>calibrate:setup</e><e>setup</e><e>configure the function generator's internal state for each of the calibration steps to be performed. </e><e> calibration:setup &lt;0|1|2|3| . . . |115&gt; calibration:setup? calibration:setup &lt;0|1|2|3| . . . |115&gt;calibration:setup? configure the function generator's internal state for each of the calibration steps to be performed. the :set? query reads the calibration setup number and returns a value from "0" to "115". </e></d><d><e>calibrate:string</e><e>string</e><e>store a message in non-volatile calibration memory. storing a message will overwrite any message previously stored in memory. </e><e> calibration:string &lt;quoted string&gt; calibration:string? calibration:string &lt;quoted string&gt;calibration:string? store a message in non-volatile calibration memory. storing a message will overwrite any message previously stored in memory. the :str? query reads the calibration message and returns a quoted string. � the calibration message may contain up to 40 characters (additional characters are truncated). an example is shown below. cal:str 'cal due: 01 june 2001' � you can record a calibration message only from the remote interface and only when the instrument is unsecured. you can read the message either from the front panel or over the remote interface. you can read the calibration message whether the instrument is secured or unsecured. </e></d><d><e>calibrate:value</e><e>value</e><e>specify the value of the known calibration signal as outlined in the calibration procedures in the agilent 33250a service guide. </e><e> calibration:value &lt;value&gt; calibration:value? calibration:value &lt;value&gt; calibration:value? specify the value of the known calibration signal as outlined in the calibration procedures in the agilent 33250a service guide. use the cal:set command to configure the function generator's internal state for each of the calibration steps to be performed. the :val? query returns a number in the form "+1.0000000000000e+01". </e></d><d><e>display:window:state</e><e>state</e><e>disable or enable the function generator front-panel display. when it is disabled, the front-panel display is blanked (however, the bulb used to backlight the display remains enabled). </e><e> display {off|on} display? display {off|on}display? disable or enable the function generator front-panel display. when it is disabled, the front-panel display is blanked (however, the bulb used to backlight the display remains enabled). the disp? query returns "0" (off) or "1" (on). � with the front-panel display disabled, there will be some improvement in command execution speed from the remote interface. � sending a message to the front-panel display from the remote interface (disp:text command) overrides the display state. this means that you can display a message even if the display is disabled (remote interface errors are always displayed even if the display is disabled). � the display is automatically enabled when power is cycled, after an instrument reset (*rst command), or when you return to local (front panel) operation. press thekey or execute the ieee-488 gtl (go to local) command from the remote interface to return to the local state. � the display state is saved when you store the instrument state using *sav command. when you recall the instrument state using *rcl command, the front-panel display will return to the previous state. </e></d><d><e>display:window:text:clear</e><e>clear</e><e>clear the text message currently shown on the function generator's front-panel display. </e><e> display:text:clear display:text:clear clear the text message currently shown on the function generator's front-panel display. � if the display is currently enabled (disp on command), the disp:text:clear command will return the normal front-panel display mode. � if the display is currently disabled (disp off command), the disp:text:clear command will clear the message but the display will remain disabled. to enable the display, send the disp on command, press thekey, send the gtl (go to local) command for gpib, or send the syst:local command for rs-232. </e></d><d><e>display:window:text:data</e><e>data</e><e>display a text message on the function generator's front-panel display. sending a text message to the display overrides the display state as set by the disp command. </e><e> display:text &lt;quoted string&gt; display:text? display:text &lt;quoted string&gt; display:text? display a text message on the function generator's front-panel display. sending a text message to the display overrides the display state as set by the disp command. the :text? query reads the message sent to the front-panel display and returns a quoted string. � you can use upper- or lower-case letters (a-z), numbers (0-9), and any other character on a standard computer keyboard. depending on the number of characters you specify in the string, the function generator will choose one of two font sizes to display the message. you can display approximately 12 characters in a large font and approximately 40 characters in a small font. an example is shown below. disp:text 'test in progress...' � while a message is displayed, information relating to the output waveform, such as frequency and amplitude, is not sent to the front-panel display. </e></d><d><e>format:border</e><e>border</e><e>used for binary block transfers only. select the byte order for binary transfers in the block mode using the data:dac command. </e><e> format:border {normal|swapped} format:border? format:border {normal|swapped} format:border? used for binary block transfers only. select the byte order for binary transfers in the block mode using the data:dac command. the default is norm. the :bord? query returns "norm" or "swap". � in norm byte order (default), the most-significant byte (msb) of each data point is assumed first. � in swap byte order, the least-significant byte (lsb) of each data point is assumed first. most computers use the "swapped" byte order. � the function generator represents binary data as signed 16-bit integers, which are sent as two bytes. therefore, each waveform data point requires 16 bits, which must be transferred as two bytes on the function generator's 8-bit interface. </e></d><d><e>memory:nstates</e><e>nstates</e><e>query the total number of memory locations available for state storage. </e><e> memory:nstates? memory:nstates? query the total number of memory locations available for state storage. always returns "5" (memory location "0" is included). </e></d><d><e>memory:state:delete</e><e>delete</e><e>delete the contents of the specified storage location. if you have assigned a user-defined name to a location (mem:stat:name command), this command also removes the name that you assigned and restores the default name ("auto_recall", "state_1", "state_2", etc.). </e><e> memory:state:delete {0|1|2|3|4} memory:state:delete {0|1|2|3|4} delete the contents of the specified storage location. if you have assigned a user-defined name to a location (mem:stat:name command), this command also removes the name that you assigned and restores the default name ("auto_recall", "state_1", "state_2", etc.). note that you cannot recall the instrument state from a storage location that is empty. an error is generated if you attempt to recall a deleted state. </e></d><d><e>memory:state:name</e><e>name</e><e>assign a custom name to the specified storage location.</e><e> memory:state:name {0|1|2|3|4} [,&lt;name&gt;] memory:state:name? {0|1|2|3|4} memory:state:name {0|1|2|3|4} [,&lt;name&gt;] memory:state:name? {0|1|2|3|4} assign a custom name to the specified storage location. you can name a location from the front panel or over the remote interface, but you can only recall a state by name from the front panel (the *rcl command requires a numeric parameter). the :name? query returns a quoted string containing the name currently assigned to the specified storage location. if you have not assigned a user-defined name to the specified location, the default name is returned ("auto_recall", "state_1", "state_2", "state_3", or "state_4"). � the name can contain up to 12 characters. the first character must be a letter (a-z), but the remaining characters can be letters, numbers (0-9), or the underscore character (" _ "). blank spaces are not allowed. an error is generated if you specify a name with more than 12 characters. an example is shown below. mem:state:name 1,test_wform_1 � from the front panel, you cannot assign a custom name to storage location "0". � if you do not specify a name (note that the name parameter is optional), the default name is assigned to that state. this provides a way to clear a name (however, the stored state is not deleted). � the function generator will not prevent you from assigning the same name to different storage locations. for example, you can assign the same name to locations "1" and "2". </e></d><d><e>memory:state:recall:auto</e><e>auto</e><e>disable or enable the automatic recall of the power-down state from storage location "0" when power is turned on. </e><e> memory:state:recall:auto {off|on} memory:state:recall:auto? memory:state:recall:auto {off|on}memory:state:recall:auto? disable or enable the automatic recall of the power-down state from storage location "0" when power is turned on. select "on" to automatically recall the power-down state when power is turned on. select "off" (default) to issue a reset (*rst command) when power is turned on (state "0" is not automatically recalled). the :auto? query returns "0" (off) or "1" (on). </e></d><d><e>memory:state:valid</e><e>valid</e><e>query the specified storage location to determine if a valid state is currently stored in that location. </e><e> memory:state:valid? {0|1|2|3|4} memory:state:valid? {0|1|2|3|4} query the specified storage location to determine if a valid state is currently stored in that location. you can use this command before sending the *rcl command to determine if a state has been previously stored in this location. returns "0" if no state has been stored or if it has been deleted. returns "1" if a valid state is stored in the specified location. </e></d><d><e>output:load</e><e>load</e><e>select the desired output termination (i.e., the impedance of the load attached to the output of the agilent 33250a). the specified value is used for amplitude, offset, and high/low level settings. </e><e> output:load {&lt;ohms&gt;|infinity|minimum|maximum} output:load? [minimum|maximum] output:load {&lt;ohms&gt;|infinity|minimum|maximum} output:load? [minimum|maximum] select the desired output termination (i.e., the impedance of the load attached to the output of the agilent 33250a). the specified value is used for amplitude, offset, and high/low level settings. you can set the load to any value from 1w to 10 kw. min selects 1w. max selects 10 kw. inf sets the output termination to "high impedance" (&gt;10 kw). the default is 50w. the :load? query returns the current load setting in ohms or "9.9e+37" (for "high impedance"). � the agilent 33250a has a fixed series output impedance of 50 ohms to the front-panel output connector. if the actual load impedance is different than the value specified, the displayed amplitude, offset, and high/low levels will be incorrect. � if you change the output termination setting, the displayed output amplitude, offset, and high/low levels are automatically adjusted (and no error will be generated). for example, if you set the amplitude to 10 vpp and then change the output termination from 50 ohms to "high impedance", the amplitude displayed on the function generator's front-panel will double to 20 vpp. if you change from "high impedance" to 50 ohms, the displayed amplitude will drop in half. � you cannot specify the output amplitude in dbm if the output termination is currently set to "high impedance". the units are automatically converted to vpp. see the volt:unit command on page 165 for more information. </e></d><d><e>output:polarity</e><e>polarity</e><e>invert the waveform relative to the offset voltage. in the normal mode (default), the waveform goes positive during the first part of the cycle. in the inverted mode, the waveform goes negative during the first part of the cycle. </e><e> output:polarity {normal|inverted} output:polarity? output:polarity {normal|inverted} output:polarity? invert the waveform relative to the offset voltage. in the normal mode (default), the waveform goes positive during the first part of the cycle. in the inverted mode, the waveform goes negative during the first part of the cycle. the :pol? query returns "norm" or "inv". � as shown in the examples below, the waveform is inverted relative to the offset voltage. any offset voltage present will remain unchanged when the waveform is inverted. no offset voltage with offset voltage � when a waveform is inverted, the sync signal associated with the waveform is not inverted. </e></d><d><e>output:state</e><e>state</e><e>disable or enable the front-panel output connector. the default is "off". </e><e> output {off|on} output? output {off|on} output? disable or enable the front-panel output connector. the default is "off". when the output is enabled, thekey is illuminated on the function generator's front panel. the outp? query returns "0" (off) or "1" (on). � the apply command overrides the current outp command setting and automatically enables the output connector ("on"). � if an excessive external voltage is applied to the front-panel output connector, an error message will be displayed and the output will be disabled. to re-enable the output, remove the overload from the output connector and send the outp on command. </e></d><d><e>output:sync:state</e><e>state</e><e>disable or enable the front-panel sync connector. at lower amplitudes, you can reduce output distortion by disabling the sync signal. </e><e> output:sync {off|on} output:sync? output:sync {off|on} output:sync? disable or enable the front-panel sync connector. at lower amplitudes, you can reduce output distortion by disabling the sync signal. the default setting is "on". the :sync? query returns "0" (off) or "1" (on). � for more details on the sync signal for each waveform function, see "sync output signal" on page 62. � when the sync signal is disabled, the output level on the sync connector is a logic "low" level. � when a waveform is inverted (outp:pol command), the sync signal associated with the waveform is not inverted. � the outp:sync command is overridden by the setting of the mark command used with the sweep mode (see page 186). therefore, when the marker frequency is enabled (and the sweep mode is also enabled), the outp:sync command is ignored. </e></d><d><e>output:trigger:slope</e><e>slope</e><e>select a rising or falling edge for the "trigger out" signal. when enabled using the outp:trig command (see below), a ttl-compatible square waveform with the specified edge is output from the rear-panel trig out connector at the beginning of the sweep or burst. </e><e> output:trigger:slope {positive|negative} output:trigger:slope? output:trigger:slope {positive|negative}output:trigger:slope? select a rising or falling edge for the "trigger out" signal. when enabled using the outp:trig command (see below), a ttl-compatible square waveform with the specified edge is output from the rear-panel trig out connector at the beginning of the sweep. select "pos" to output a pulse with a rising edge or select "neg" to output a pulse with a falling edge. the default is pos. the :slop? query returns "pos" or "neg". � when the immediate (internal) trigger source is selected (trig:sour imm command), the function generator outputs a square waveform with a 50% duty cycle from the trig out connector at the beginning of the sweep. the period of the waveform is equal to the specified sweep time (swe:time command). � when the external trigger source is selected (trig:sour ext command), the function generator automatically disables the "trigger out" signal. the rear-panel trig out connector cannot be used for both operations at the same time (an externally-triggered sweep uses the same connector to trigger the sweep). � when the bus (software) trigger source is selected (trig:sour bus command), the function generator outputs a pulse (&gt;1 �s pulse width) from the trig out connector at the beginning of each sweep. </e></d><d><e>output:trigger:state</e><e>state</e><e>disable or enable the "trigger out" signal (used for sweep and burst only). when enabled, a ttl-compatible square waveform with the specified edge (outp:trig:slop command) is output from the rear-panel trig out connector at the beginning of the sweep or burst. </e><e> output:trigger {off|on} output:trigger? output:trigger {off|on} output:trigger? disable or enable the "trigger out" signal. when enabled, a ttl-compatible square waveform with the specified edge (outp:trig:slop command) is output from the rear-panel trig out connector at the beginning of the sweep. the default is off. the :trig? query returns "0" (off) or "1" (on). </e></d><d><e>source:am:depth</e><e>depth</e><e>set the internal modulation depth (or "percent modulation") in percent. </e><e> am:depth {&lt;depth in percent&gt;|minimum|maximum} am:depth? [minimum|maximum] am:depth {&lt;depth in percent&gt;|minimum|maximum} am:depth? [minimum|maximum] set the internal modulation depth (or "percent modulation") in percent. select from 0% to 120%. the default is 100%. min = 0%. max = 120%. the :dept? query returns the modulation depth in percent. � note that even at greater than 100% depth, the function generator will not exceed �5v peak on the output (into a 50w load). � if you select the external modulating source (am:sour ext command), the carrier waveform is modulated with an external waveform. the modulation depth is controlled by the �5v signal level present on the rear-panel modulation in connector. for example, if you have set the modulation depth to 100% using the am:dept command, then when the modulating signal is at +5 volts, the output will be at the maximum amplitude. when the modulating signal is at -5 volts, then the output will be at the minimum amplitude. </e></d><d><e>source:am:internal:frequency</e><e>frequency</e><e>set the frequency of the modulating waveform. used only when the internal modulation source is selected (am:sour int command). </e><e> am:internal:frequency {&lt;frequency&gt;|minimum|maximum} am:internal:frequency? [minimum|maximum] am:internal:frequency {&lt;frequency&gt;|minimum|maximum} am:internal:frequency? [minimum|maximum] set the frequency of the modulating waveform. used only when the internal modulation source is selected (am:sour int command). select from 2 mhz to 20 khz. the default is 100 hz. min = 2 mhz. max = 20 khz. the :freq? query returns the internal modulating frequency in hertz. </e></d><d><e>source:am:internal:function:shape</e><e>shape</e><e>select the shape of the modulating waveform. used only when the internal modulation source is selected (am:sour int command). </e><e> am:internal :function {sinusoid|square|ramp|nramp|triangle|noise|user} :function? am:internal :function {sinusoid|square|ramp|nramp|triangle|noise|user} :function? select the shape of the modulating waveform. used only when the internal modulation source is selected (am:sour int command). you can use noise as the modulating waveshape, but you cannot use noise, pulse, or dc as the carrier waveform. the default is sin. the :func? query returns "sin", "squ", "ramp", "nram", "tri", "nois", or "user". � select "squ" for a square waveform with a 50% duty cycle. � select "ramp" for a ramp waveform with 100% symmetry. � select "tri" for a ramp waveform with 50% symmetry. � select "nram" (negative ramp) for a ramp waveform with 0% symmetry. � if you select an arbitrary waveform as the modulating waveshape ("user"), the waveform is automatically limited to 8k points. extra waveform points are removed using decimation. </e></d><d><e>source:am:source</e><e>source</e><e>select the source of the modulating signal. the function generator will accept an internal or external modulation source. </e><e> am:source {internal|external} am:source? am:source {internal|external} am:source? select the source of the modulating signal. the function generator will accept an internal or external modulation source. the default is int. the :sour? query returns "int" or "ext". � if you select the external source, the carrier waveform is modulated with an external waveform. the modulation depth is controlled by the �5v signal level present on the rear-panel modulation in connector.for example, if you have set the modulation depth to 100% using the am:dept command, then when the modulating signal is at +5 volts, the output will be at the maximum amplitude. when the modulating signal is at -5 volts, then the output will be at the minimum amplitude. </e></d><d><e>source:am:state</e><e>state</e><e>disable or enable am. to avoid multiple waveform changes, you can enable am after you have set up the other modulation parameters. </e><e> am:state {off|on} am:state? am:state {off|on} am:state? disable or enable am. to avoid multiple waveform changes, you can enable am after you have set up the other modulation parameters. the default is off. the :stat? query returns "0" (off) or "1" (on). � the function generator will allow only one modulation mode to be enabled at a time. for example, you cannot enable am and fm at the same time. when you enable am, the previous modulation mode is turned off. � the function generator will not allow am to be enabled at the same time that sweep or burst is enabled. when you enable am, the sweep or burst mode is turned off. </e></d><d><e>source:burst:gate:polarity</e><e>polarity</e><e>select whether the function generator uses true-high or true-low logic levels on the rear-panel trig in connector for an externally-gated burst. </e><e> burst:gate:polarity {normal|inverted} burst:gate:polarity? burst:gate:polarity {normal|inverted}burst:gate:polarity? select whether the function generator uses true-high or true-low logic levels on the rear-panel trig in connector for an externally-gated burst. the default is norm (true-high logic). the :pol? query returns "norm" or "inv". quadralay corporation http://www.webworks.com voice: (512) 719-3399 fax: (512) 719-3606 sales@webworks.com </e></d><d><e>source:burst:internal:period</e><e>period</e><e>set the burst period for internally-triggered bursts. </e><e> burst:internal:period {&lt;seconds&gt;|minimum|maximum} burst:internal:period? [minimum|maximum] burst:internal:period {&lt;seconds&gt;|minimum|maximum} burst:internal:period? [minimum|maximum] set the burst period for internally-triggered bursts. the burst period defines time from the start of one burst to the start of the next burst. select from 1 �s to 500 seconds. the default is 10 ms. min = 1 �s. max = based on the burst count and waveform frequency as shown below. the :per? query returns the burst period in seconds. � the burst period setting is used only when immediate triggering is enabled (trig:sour imm command). the burst period is ignored when manual or external triggering is enabled (or when the gated burst mode is selected). � it is not possible to specify a burst period which is too short for the function generator to output with the specified burst count and frequency (see below). if the burst period is too short, the function generator will automatically adjust it as needed to continuously re-trigger the burst. from the remote interface, a "data out of range" error will be generated and the burst period will be adjusted as described. burst period &gt; + 200 ns </e></d><d><e>source:burst:mode</e><e>mode</e><e>select the burst mode.</e><e> burst:mode {triggered|gated} burst:mode? burst:mode {triggered|gated} burst:mode? select the burst mode. in the triggered mode, the function generator outputs a waveform with a specified number of cycles (burst count) each time a trigger is received from the specified trigger source (trig:sour command). in the gated mode, the output waveform is either "on" or "off " based on the level of the external signal applied to the rear-panel trig in connector. the default is trig. the :mode? query returns "trig" or "gat". � when the gated mode is selected, the waveform generator either runs or stops based on the logic level of the gate signal applied to the rear-panel trig in connector. you can select the polarity of the trig in connector using the burs:gate:pol command (see page 194). when the gate signal is true, the function generator outputs a continuous waveform. when the gate signal goes false, the current waveform cycle is completed and then the function generator stops while remaining at the voltage level corresponding to the starting burst phase of the selected waveform. for a noise waveform, the output stops immediately when the gate signal goes false. � when the gated mode is selected, the burst count, burst period, and trigger source are ignored (these parameters are used for the triggered burst mode only). if a manual trigger is received (trig command), it is ignored and no error will be generated. </e></d><d><e>source:burst:ncycles</e><e>ncycles</e><e>set the number of cycles to be output per burst (triggered burst mode only).</e><e> burst:ncycles {&lt;# cycles&gt;|infinity|minimum|maximum} burst:ncycles? [minimum|maximum] burst:ncycles {&lt;# cycles&gt;|infinity|minimum|maximum} burst:ncycles? [minimum|maximum] set the number of cycles to be output per burst (triggered burst mode only). select from 1 cycle to 1,000,000 cycles, in 1 cycle increments (see the restrictions below). the default is 1 cycle. min = 1 cycle. max = based on the burst period and frequency as shown below. select inf to generate a continuous burst waveform. the :ncyc? query returns the burst count from 1 to 1,000,000 or "9.9e+37" (for an infinite count). � if the immediate trigger source is selected (trig:sour imm command), the burst count must be less than the product of the burst period and the waveform frequency as shown below. burst count &lt; burst period x waveform frequency � the function generator will automatically increase the burst period up to its maximum value to accommodate the specified burst count (but the waveform frequency will not be changed). from the remote interface, a "settings conflict" error will be generated and the burst period will be adjusted as described. � for sine and square waveforms, frequencies above 25 mhz are allowed only with an "infinite" burst count. � when the gated burst mode is selected, the burst count is ignored. however, if you change the burst count while in the gated mode, the function generator remembers the new count and will use it when the triggered mode is selected. </e></d><d><e>source:burst:phase</e><e>phase</e><e>set the starting phase for the burst in degrees or radians as specified by the previous unit:angl command. </e><e> burst:phase {&lt;angle&gt;|minimum|maximum} burst:phase? [minimum|maximum] burst:phase {&lt;angle&gt;|minimum|maximum}burst:phase? [minimum|maximum] set the starting phase for the burst in degrees or radians as specified by the previous unit:angl command. select from -360 degrees to +360 degrees or -2p to +2p radians. the default is 0 degrees (0 radians). min = -360 degrees (-2p radians). max = +360 degrees (+2p). the :phas? query returns the starting phase in degrees or radians. � for sine, square, and ramp waveforms, 0 degrees is the point at which the waveform crosses zero volts (or the dc offset value) in a positive-going direction. for arbitrary waveforms, 0 degrees is the first waveform point downloaded to memory. this command has no effect on pulse or noise waveforms. � the burst phase is also used in the gated burst mode. when the gate signal goes false, the current waveform cycle is completed and then the function generator stops. the output will remain at the voltage level corresponding to the starting burst phase. </e></d><d><e>source:burst:state</e><e>state</e><e>disable or enable the burst mode. </e><e> burst:state {off|on} burst:state? burst:state {off|on} burst:state? disable or enable the burst mode. to avoid multiple waveform changes, you can enable the burst mode after you have set up the other burst parameters. the default is off. the :stat? query returns "0" (off) or "1" (on). � the function generator will not allow the burst mode to be enabled at the same time that sweep or any modulation mode is enabled. when you enable burst, the sweep or modulation mode is turned off. </e></d><d><e>source:fm:deviation</e><e>deviation</e><e>set the peak frequency deviation in hertz. this value represents the peak variation in frequency of the modulated waveform from the carrier frequency. </e><e> fm:deviation {&lt;peak deviation in hz&gt;|minimum|maximum} fm:deviation? [minimum|maximum] fm:deviation {&lt;peak deviation in hz&gt;|minimum|maximum} fm:deviation? [minimum|maximum] set the peak frequency deviation in hertz. this value represents the variation in frequency of the modulating waveform from the carrier frequency. select any value from 5 hz to 40.05 mhz (limited to 550 khz for ramps and 12.55 mhz for arbitrary waveforms). the default is 100 hz. min = 5 hz. max = based on the frequency of the carrier waveform as shown below. the :dev? query returns the deviation in hertz. max. deviation = for carrier &lt; 40 mhz max. deviation = for carrier &gt; 40 mhz � the carrier frequency must always be greater than or equal to the deviation. if you attempt to set the deviation to a value greater than the carrier frequency (with fm enabled), the function generator will automatically adjust the deviation to the maximum value allowed with the present carrier frequency. from the remote interface, a "data out of range" error will be generated and the deviation will be adjusted as described. � the sum of the carrier frequency and deviation must be less than or equal to the maximum frequency for the selected function plus 100 khz (80.1 mhz for sine and square, 1.1 mhz for ramp, and 25.1 mhz for arbitrary waveforms). if you attempt to set the deviation to a value that is not valid, the function generator will automatically adjust it to the maximum value allowed with the present carrier frequency. from the remote interface, a "data out of range" error will be generated and the deviation will be adjusted as described. � if the deviation causes the carrier waveform to exceed a frequency boundary for the current duty cycle (square waveform only), the function generator will automatically adjust the duty cycle to the maximum value allowed with the present carrier frequency. from the remote interface, a "settings conflict" error will be generated and the duty cycle will be adjusted as described. � if you select the external modulating source (fm:sour ext command), the deviation is controlled by the �5v signal level present on the rear-panel modulation in connector. for example, if you have set the frequency deviation to 100 khz, then a +5v signal level corresponds to a 100 khz increase in frequency. lower external signal levels produce less deviation and negative signal levels reduce the frequency below the carrier frequency. </e></d><d><e>source:fm:internal:frequency</e><e>frequency</e><e>set the frequency of the modulating waveform. used only when the internal modulation source is selected (fm:sour int command). </e><e> fm:internal:frequency {&lt;frequency&gt;|minimum|maximum} fm:internal:frequency? [minimum|maximum] fm:internal:frequency {&lt;frequency&gt;|minimum|maximum} fm:internal:frequency? [minimum|maximum] set the frequency of the modulating waveform. used only when the internal modulation source is selected (fm:sour int command). select from 2 mhz to 20 khz. the default is 10 hz. min = 2 mhz. max = 20 khz. the :freq? query returns the internal modulating frequency in hertz. </e></d><d><e>source:fm:internal:function:shape</e><e>shape</e><e>select the shape of the modulating waveform. used only when the internal modulation source is selected (fm:sour int command). </e><e> fm:internal :function {sinusoid|square|ramp|nramp|triangle|noise|user} :function? fm:internal :function {sinusoid|square|ramp|nramp|triangle|noise|user} :function? select the shape of the modulating waveform. used only when the internal modulation source is selected (fm:sour int command). you can use noise as the modulating waveshape, but you cannot use noise, pulse, or dc as the carrier waveform. the default is sin. the :func? query returns "sin", "squ", "ramp", "nram", "tri", "nois", or "user". � select "squ" for a square waveform with a 50% duty cycle. � select "ramp" for a ramp waveform with 100% symmetry. � select "tri" for a ramp waveform with 50% symmetry. � select "nram" (negative ramp) for a ramp waveform with 0% symmetry. � if you select an arbitrary waveform as the modulating waveshape ("user"), the waveform is automatically limited to 8k points. extra waveform points are removed using decimation. </e></d><d><e>source:fm:source</e><e>source</e><e>select the source of the modulating signal. the function generator will accept an internal or external modulation source. </e><e> fm:source {internal|external} fm:source? fm:source {internal|external} fm:source? select the source of the modulating signal. the function generator will accept an internal or external modulation source. the default is int. the :sour? query returns "int" or "ext". � if you select the external source, the carrier waveform is modulated with an external waveform. the frequency deviation is controlled by the �5v signal level present on the rear-panel modulation in connector. for example, if you have set the deviation to 100 khz using the fm:dev command, then a +5v signal level corresponds to a 100 khz increase in frequency. lower external signal levels produce less deviation and negative signal levels reduce the frequency below the carrier frequency. </e></d><d><e>source:fm:state</e><e>state</e><e>disable or enable fm. to avoid multiple waveform changes, you can enable fm after you have set up the other modulation parameters. </e><e> fm:state {off|on} fm:state? fm:state {off|on} fm:state? disable or enable fm. to avoid multiple waveform changes, you can enable fm after you have set up the other modulation parameters. the default is off. the :stat? query returns "0" (off) or "1" (on). � the function generator will allow only one modulation mode to be enabled at a time. for example, you cannot enable fm and am at the same time. when you enable fm, the previous modulation mode is turned off. � the function generator will not allow fm to be enabled at the same time that sweep or burst is enabled. when you enable fm, the sweep or burst mode is turned off. </e></d><d><e>source:frequency:center</e><e>center</e><e>set the center frequency (used in conjunction with the frequency span). </e><e> frequency:center {&lt;frequency&gt;|minimum|maximum} frequency:center? [minimum|maximum] frequency:center {&lt;frequency&gt;|minimum|maximum} frequency:center? [minimum|maximum] set the center frequency (used in conjunction with the frequency span). select from 1 mhz to 80 mhz (limited to 1 mhz for ramps and 25 mhz for arbitrary waveforms). the default is 550 hz. min = 1 mhz. max = based on the frequency span and maximum frequency for the selected function as shown below. the :cent? query returns the center frequency in hertz. center frequency (max) = max. frequency - � the following equation shows the relationship between the center frequency and the start / stop frequency. center frequency = </e></d><d><e>source:frequency:cw</e><e>cw</e><e>set the output frequency. </e><e> frequency {&lt;frequency&gt;|minimum|maximum} frequency? [minimum|maximum] frequency {&lt;frequency&gt;|minimum|maximum}frequency? [minimum|maximum] set the output frequency. min selects the lowest frequency allowed for the selected function and max selects the highest frequency allowed. the default is 1 khz for all functions. the freq? query returns the frequency setting in hertz for the function currently selected. function minimum frequency maximum frequency sine square ramp pulse noise, dc arbs 1 mhz 1 mhz 1 mhz 500 mhz not applicable1 mhz 80 mhz 80 mhz 1 mhz 50 mhz not applicable 25 mhz � function limitations: if you change to a function whose maximum frequency is less than that of the current function, the frequency is adjusted to the maximum value for the new function. for example, if you are currently outputting an 80 mhz sine wave and then change to the ramp function, the function generator will automatically adjust the output frequency to 1 mhz (the upper limit for ramps). from the remote interface, a "settings conflict" error will be generated and the frequency will be adjusted as described. � duty cycle limitations: for square waveforms, the function generator may not be able to use the full range of duty cycle values at higher frequencies as shown below. 20% to 80% (frequency &lt; 25 mhz) 40% to 60% (25 mhz &lt; frequency &lt; 50 mhz) 50% (frequency &gt; 50 mhz)if you change to a frequency that cannot produce the current duty cycle, the duty cycle is automatically adjusted to the maximum value for the new frequency. for example, if you currently have the duty cycle set to 70% and then change the frequency to 60 mhz, the function generator will automatically adjust the duty cycle to 50% (the upper limit for this frequency). from the remote interface, a "settings conflict" error will be generated and the duty cycle will be adjusted as described. </e></d><d><e>source:frequency:span</e><e>span</e><e>set the frequency span (used in conjunction with the center frequency). </e><e> frequency:span {&lt;frequency&gt;|minimum|maximum} frequency:span? [minimum|maximum] frequency:span {&lt;frequency&gt;|minimum|maximum}frequency:span? [minimum|maximum] set the frequency span (used in conjunction with the center frequency). select from 0 hz to 80 mhz (limited to 1 mhz for ramps and 25 mhz for arbitrary waveforms). the default is 900 hz. min = 0 hz. max = based on the center frequency and maximum frequency for the selected function. the :span? query returns the span in hertz (can be a positive or negative value). frequency span (max) = 2 x (max. frequency - center frequency) � to sweep up in frequency, set a positive frequency span.to sweep down in frequency, set a negative frequency span. � the following equation shows the relationship between the span and the start / stop frequency. frequency span = stop frequency - start frequency </e></d><d><e>source:frequency:start</e><e>start</e><e>set the start frequency (used in conjunction with the stop frequency). </e><e> frequency:start {&lt;frequency&gt;|minimum|maximum} frequency:start? [minimum|maximum] frequency:start {&lt;frequency&gt;|minimum|maximum} frequency:start? [minimum|maximum] set the start frequency (used in conjunction with the stop frequency). select from 1 mhz to 80 mhz (limited to 1 mhz for ramps and 25 mhz for arbitrary waveforms). the default is 100 hz. min = 1 mhz. max = 80 mhz. the :star? query returns the start frequency in hertz. � to sweep up in frequency, set the start frequency &lt; stop frequency.to sweep down in frequency, set the start frequency &gt; stop frequency. </e></d><d><e>source:frequency:stop</e><e>stop</e><e>set the stop frequency (used in conjunction with the start frequency).</e><e> frequency:stop {&lt;frequency&gt;|minimum|maximum} frequency:stop? [minimum|maximum] frequency:stop {&lt;frequency&gt;|minimum|maximum}frequency:stop? [minimum|maximum] set the stop frequency (used in conjunction with the start frequency). select from 1 mhz to 80 mhz (limited to 1 mhz for ramps and 25 mhz for arbitrary waveforms). the default is 1 khz. min = 1 mhz. max = 80 mhz. the :stop? query returns the stop frequency in hertz. </e></d><d><e>source:fskey:frequency</e><e>frequency</e><e>set the fsk alternate (or "hop") frequency. </e><e> fskey:frequency {&lt;frequency&gt;|minimum|maximum} fskey:frequency? [minimum|maximum] fskey:frequency {&lt;frequency&gt;|minimum|maximum} fskey:frequency? [minimum|maximum] set the fsk alternate (or "hop") frequency. select from 1 mhz to 80 mhz (limited to 1 mhz for ramps and 25 mhz for arbitrary waveforms). the default is 100 hz. min = 1 mhz. max = 80 mhz. the :freq? query returns the "hop" frequency in hertz. � the modulating waveform is a square wave with a 50% duty cycle. </e></d><d><e>source:fskey:internal:rate</e><e>rate</e><e>set the rate at which the output frequency "shifts" between the carrier and hop frequency. </e><e> fskey:internal:rate {&lt;rate in hz&gt;|minimum|maximum} fskey:internal:rate? [minimum|maximum] fskey:internal:rate {&lt;rate in hz&gt;|minimum|maximum} fskey:internal:rate? [minimum|maximum] set the rate at which the output frequency "shifts" between the carrier and hop frequency. select from 2 mhz to 100 khz. the default is 10 hz. min = 2 mhz. max = 100 khz. the :rate? query returns the fsk rate in hertz. � the fsk rate is only used when the internal source is selected (fsk:sour int command) and is ignored when the external source is selected (fsk:sour ext command). </e></d><d><e>source:fskey:source</e><e>source</e><e>select an internal or external fsk source. </e><e> fskey:source {internal|external} fskey:source? fskey:source {internal|external} fskey:source? select an internal or external fsk source. the default is int. the :sour? query returns "int" or "ext". � when the internal source is selected, the rate at which the output frequency "shifts" between the carrier frequency and hop frequency is determined by the fsk rate specified (fsk:int:rate command). � when the external source is selected, the output frequency is determined by the signal level on the rear-panel trig in connector. when a logic low level is present, the carrier frequency is output. when a logic high level is present, the hop frequency is output. � the maximum external fsk rate is 1 mhz. � note that the connector used for externally-controlled fsk waveforms (trig in) is not the same connector that is used for externally-modulated am and fm waveforms (modulation in). when used for fsk, the trig in connector does not have adjustable edge polarity and is not affected by the trig:slop command. </e></d><d><e>source:fskey:state</e><e>state</e><e>disable or enable fsk modulation. to avoid multiple waveform changes, you can enable fsk after you have set up the other modulation parameters. </e><e> fskey:state {off|on} fskey:state? fskey:state {off|on}fskey:state? disable or enable fsk modulation. to avoid multiple waveform changes, you can enable fsk after you have set up the other modulation parameters. the default is off. the :stat? query returns "0" (off) or "1" (on). � the function generator will allow only one modulation mode to be enabled at a time. for example, you cannot enable fsk and am at the same time. when you enable fsk, the previous modulation mode is turned off. � the function generator will not allow fsk to be enabled at the same time that sweep or burst is enabled. when you enable fsk, the sweep or burst mode is turned off. </e></d><d><e>source:function:shape</e><e>shape</e><e>select the output function. the selected waveform is output using the previously selected frequency, amplitude, and offset voltage settings. </e><e> function {sinusoid|square|ramp|pulse|noise|dc|user} function? function {sinusoid|square|ramp|pulse|noise|dc|user}function? select the output function. the selected waveform is output using the previously selected frequency, amplitude, and offset voltage settings. the default is sin. the func? query returns "sin", "squ", "ramp", "puls", "nois", "dc", or "user". � if you select "user", the function generator outputs the arbitrary waveform currently selected by the func:user command. � the table below shows which output functions are allowed with modulation, sweep, and burst. each " � " indicates a valid combination. if you change to a function that is not allowed with modulation, sweep, or burst, the modulation or mode is turned off sine square ramp pulse noise dc user am, fm carrier � � � � fsk carrier � � � � sweep mode � � � � burst mode � � � � � 1 � .1 allowed in the external gated burst mode only. � function limitations: if you change to a function whose maximum frequency is less than that of the current function, the frequency is adjusted to the maximum value for the new function. for example, if you are currently outputting an 80 mhz sine wave and then change to the ramp function, the function generator will automatically adjust the output frequency to 1 mhz (the upper limit for ramps). from the remote interface, a "settings conflict" error will be generated and the frequency will be adjusted as described. � amplitude limitations: if you change to a function whose maximum amplitude is less than that of the current function, the amplitude is automatically adjusted to the maximum value for the new function. this may occur when the output units are vrms or dbm due to the differences in crest factor for the various output functions.for example, if you output a 5 vrms square wave (into 50 ohms) and then change to the sine wave function, the function generator will automatically adjust the output amplitude to 3.536 vrms (the upper limit for sine in vrms). from the remote interface, a "settings conflict" error will be generated and the amplitude will be adjusted as described. </e></d><d><e>source:function:shape:ramp:symmetry</e><e>symmetry</e><e>set the symmetry percentage for ramp waves. symmetry represents the amount of time per cycle that the ramp wave is rising (assuming that the waveform polarity is not inverted). </e><e> function:ramp:symmetry {&lt;percent&gt;|minimum|maximum} function:ramp:symmetry? [minimum|maximum] function:ramp:symmetry {&lt;percent&gt;|minimum|maximum} function:ramp:symmetry? [minimum|maximum] set the symmetry percentage for ramp waves. symmetry represents the amount of time per cycle that the ramp wave is rising (assuming that the waveform polarity is not inverted). you can set the symmetry to any value from 0% to 100%. the default is 100%. min = 0%. max = 100%. the :symm? query returns the current symmetry setting in percent. 0% symmetry 100% symmetry � for ramp waveforms, the apply command overrides the current symmetry setting and automatically selects 100%. � the symmetry setting is remembered when you change from ramp wave to another function. when you return to the ramp wave function, the previous symmetry is used. � if you select a ramp waveform as the modulating waveform for am or fm, the symmetry setting does not apply. </e></d><d><e>source:function:shape:square:dcycle</e><e>dcycle</e><e>set the duty cycle percentage for square waves. duty cycle represents the amount of time per cycle that the square wave is at a high level (assuming that the waveform polarity is not inverted). </e><e> function:square:dcycle {&lt;percent&gt;|minimum|maximum} function:square:dcycle? [minimum|maximum] function:square:dcycle {&lt;percent&gt;|minimum|maximum}function:square:dcycle? [minimum|maximum] set the duty cycle percentage for square waves. duty cycle represents the amount of time per cycle that the square wave is at a high level (assuming that the waveform polarity is not inverted). the default is 50%. min selects the minimum duty cycle for the selected frequency and max selects the maximum duty cycle (see restrictions below). the :dcyc? query returns the current duty cycle setting in percent. 20% duty cycle 80% duty cycle � duty cycle: 20% to 80% (frequency &lt; 25 mhz) 40% to 60% (25 mhz &lt; frequency &lt; 50 mhz) 50% (frequency &gt; 50 mhz) � for square waveforms, the apply command overrides the current duty cycle setting and automatically selects 50%. � the duty cycle setting is remembered when you change from square wave to another function. when you return to the square wave function, the previous duty cycle is used. � limits due to frequency: if the square wave function is selected and you change to a frequency that cannot produce the current duty cycle, the duty cycle is automatically adjusted to the maximum value for the new frequency. for example, if you currently have the duty cycle set to 70% and then change the frequency to 60 mhz, the function generator will automatically adjust the duty cycle to 50% (the upper limit for this frequency). from the remote interface, a "settings conflict" error will be generated and the duty cycle will be adjusted as described. � if you select a square waveform as the modulating waveform for am or fm, the duty cycle setting does not apply. the function generator always uses a square waveform with a 50% duty cycle. </e></d><d><e>source:function:shape:user</e><e>user</e><e>select one of the five built-in arbitrary waveforms, one of four user-defined waveforms, or the waveform currently downloaded to volatile memory. </e><e> function:user {&lt;arb name&gt;|volatile} function:user? function:user {&lt;arb name&gt;|volatile} function:user? select one of the five built-in arbitrary waveforms, one of four user-defined waveforms, or the waveform currently downloaded to volatile memory. the :user? query returns "exp_rise", "exp_fall", "neg_ramp", "sinc", "cardiac", "volatile", or the name of any user-defined waveforms in non-volatile memory. � note that this command does not output the selected arbitrary waveform. use the func user command (see the following page) to output the selected waveform. � the names of the five built-in arbitrary waveforms are: "exp_rise", "exp_fall", "neg_ramp", "sinc", and "cardiac". � to select the waveform currently stored in volatile memory, specify the volatile parameter. the keyword "volatile" does not have a short form. � if you select a waveform name that is not currently downloaded, a "specified arb waveform does not exist" error is generated. � the function generator does not distinguish between upper- and lower-case letters. therefore, arb_1 and arb_1 are the same name. all characters are converted to upper case. � use the data:cat? command to list the names of the five built-in waveforms (non-volatile), "volatile" if a waveform is currently downloaded to volatile memory, and the names of any user-defined waveforms (non-volatile). </e></d><d><e>source:marker:frequency</e><e>frequency</e><e>set the marker frequency. this is the frequency at which the signal on the front-panel sync connector goes to a logic low during the sweep. the sync signal always goes from low to high at the beginning of the sweep. </e><e> marker:frequency {&lt;frequency&gt;|minimum|maximum} marker:frequency? [minimum|maximum] marker:frequency {&lt;frequency&gt;|minimum|maximum} marker:frequency? [minimum|maximum] set the marker frequency. this is the frequency at which the signal on the front-panel sync connector goes to a logic low during the sweep. the sync signal always goes from low to high at the beginning of the sweep. select from 1 mhz to 80 mhz (limited to 1 mhz for ramps and 25 mhz for arbitrary waveforms). the default is 500 hz. min = 1 mhz. max = the start frequency or stop frequency (whichever is higher). the :freq? query returns the marker frequency in hertz. � when sweep is enabled, the marker frequency must be between the specified start frequency and stop frequency. if you attempt to set the marker frequency to a frequency not in this range, the function generator will automatically set the marker frequency equal to the start frequency or stop frequency (whichever is closer). from the remote interface, a "settings conflict" error will be generated and the marker frequency will be adjusted as described. </e></d><d><e>source:marker:state</e><e>state</e><e>disable or enable the frequency marker. when the frequency marker is disabled, the signal output from the sync connector is the normal sync signal for the carrier waveform.</e><e> marker {off|on} marker? marker {off|on}marker? disable or enable the frequency marker. when the frequency marker is disabled, the signal output from the sync connector is the normal sync signal for the carrier waveform (see "sync output signal" on page 62). the default is off. the mark? query returns "0" (off) or "1" (on). � the outp:sync command is overridden by the setting of the mark command. therefore, when the marker frequency is enabled (and the sweep mode is also enabled), the outp:sync command is ignored </e></d><d><e>source:phase:adjust</e><e>adjust</e><e>adjust the phase offset of the output waveform in degrees or radians as specified by the previous unit:angl command </e><e> phase {&lt;angle&gt;|minimum|maximum} phase? [minimum|maximum] phase {&lt;angle&gt;|minimum|maximum}phase? [minimum|maximum] adjust the phase offset of the output waveform in degrees or radians as specified by the previous unit:angl command (not available for pulse and noise). select from -360 degrees to +360 degrees or -2p to +2p radians. the default is 0 degrees (0 radians). min = -360 degrees (-2p radians). max = +360 degrees (+2p radians). the phas? query returns the phase offset in degrees or radians. � the specified phase adjustment causes a "bump" or "hop" in the output waveform in order to change the phase relationship to the external signal to which it is currently locked. � this phase adjustment for phase-lock applications is independent of the burst phase as set by the burs:phas command (see page 191). </e></d><d><e>source:phase:reference</e><e>reference</e><e>immediately sets a new zero-phase reference point without changing the output of the function generator. that is, this command resets the phase value returned by the phas? command but does not affect the output waveform.</e><e> phase:reference phase:reference immediately set the zero-phase reference point without changing the output of the function generator. this command does not change the phase offset as set with the phas command - it only changes the phase reference. this command does not have a query form. </e></d><d><e>source:phase:unlock:error:state</e><e>state</e><e>disable or enable the function generator from generating an error if the phase-lock is ever lost. </e><e> phase:unlock:error:state {off|on} phase:unlock:error:state? phase:unlock:error:state {off|on}phase:unlock:error:state? disable or enable the function generator from generating an error if the phase-lock is ever lost. the default is off. if the phase-lock is lost and the error is enabled, a "reference phase-locked loop is unlocked" error is generated. the unlock error setting is stored in non-volatile memory. the :stat? query returns "0" (off) or "1" (on). </e></d><d><e>source:pulse:period</e><e>period</e><e>set the period for pulses. </e><e> pulse:period {&lt;seconds&gt;|minimum|maximum} pulse:period? [minimum|maximum] pulse:period {&lt;seconds&gt;|minimum|maximum} pulse:period? [minimum|maximum] set the period for pulses. select a period from 20 ns to 2000 seconds. the default is 1 ms. min = 20 ns. max = 2000 seconds. the :per? query returns the period of the pulse waveform in seconds. � the specified period must be greater than the sum of the pulse width and the edge time as shown below. the function generator will adjust the pulse width and edge time as needed to accommodate the specified period. from the remote interface, a "data out of range" error will be generated and the period will be adjusted as described. period &gt; pulse width + (1.6 x edge time) � this command affects the period (and frequency) for all waveform functions (not just pulse). for example, if you select a period using the puls:per command and then change the function to sine wave, the specified period will be used for the new function. � function limitations: if you change to a function whose minimum period is greater than that for a pulse waveform, the period is adjusted to the minimum value allowed for the new function. for example, if you output a pulse waveform with a period of 50 ns and then change to the ramp function, the function generator will automatically adjust the period to 1 ms (the lower limit for ramps). from the remote interface, a "settings conflict" error will be generated and the period will be adjusted as described. </e></d><d><e>source:pulse:width</e><e>width</e><e>set the pulse width in seconds. </e><e> pulse:width {&lt;seconds&gt;|minimum|maximum} pulse:width? [minimum|maximum] pulse:width {&lt;seconds&gt;|minimum|maximum}pulse:width? [minimum|maximum] set the pulse width in seconds. the pulse width represents the time from the 50% threshold of the rising edge of the pulse to the 50% threshold of the next falling edge. you can vary the pulse width from 8 ns to 2000 seconds (see restrictions below). the default pulse width is 100 ms. min = 8 ns. max = 2000 seconds. the :widt? query returns the pulse width in seconds. � the minimum pulse width is affected by the period. for period &gt; 20 seconds, minimum pulse width = 1 �s for period &gt; 200 seconds, minimum pulse width = 10 �s � the specified pulse width must be less than the difference between the period and the edge time as shown below. the function generator will adjust the pulse width as needed to accommodate the specified period. from the remote interface, a "settings conflict" error will be generated and the pulse width will be adjusted as described. pulse width &lt; period - (1.6 x edge time) � the pulse width must also be greater than the total time of one edge as shown below. pulse width &gt; 1.6 x edge time </e></d><d><e>source:sweep:spacing</e><e>spacing</e><e>select linear or logarithmic spacing for the sweep. </e><e> sweep:spacing {linear|logarithmic} sweep:spacing? sweep:spacing {linear|logarithmic} sweep:spacing? select linear or logarithmic spacing for the sweep. the default is linear. the :spac? query returns "lin" or "log". � for a linear sweep, the function generator varies the output frequency in a linear fashion during the sweep. � for a logarithmic sweep, the function generator varies the output frequency in a logarithmic fashion during the sweep. </e></d><d><e>source:sweep:state</e><e>state</e><e>disable or enable the sweep mode. to avoid multiple waveform changes, you can enable the sweep mode after you have set up the other sweep parameters. </e><e> sweep:state {off|on} sweep:state? sweep:state {off|on}sweep:state? disable or enable the sweep mode. to avoid multiple waveform changes, you can enable the sweep mode after you have set up the other sweep parameters. the default is off. the :stat? query returns "0" (off) or "1" (on). � the function generator will not allow the sweep mode to be enabled at the same time that burst or any modulation mode is enabled. when you enable sweep, the burst or modulation mode is turned off. </e></d><d><e>source:sweep:time</e><e>time</e><e>set the number of seconds required to sweep from the start frequency to the stop frequency. </e><e> sweep:time {&lt;seconds&gt;|minimum|maximum} sweep:time? [minimum|maximum] sweep:time {&lt;seconds&gt;|minimum|maximum} sweep:time? [minimum|maximum] set the number of seconds required to sweep from the start frequency to the stop frequency. select from 1 ms to 500 seconds. the default is 1 second. min = 1 ms. max = 500 seconds. the :time? query returns the sweep time in seconds. � the number of discrete frequency points in the sweep is automatically calculated by the function generator and is based on the sweep time that you select. </e></d><d><e>source:voltage:level:immediate:amplitude</e><e>amplitude</e><e>set the output amplitude. the default amplitude is 100 mvpp (into 50w) for all functions.</e><e> voltage {&lt;amplitude&gt;|minimum|maximum} voltage? [minimum|maximum] voltage {&lt;amplitude&gt;|minimum|maximum} voltage? [minimum|maximum] set the output amplitude. the default amplitude is 100 mvpp (into 50w) for all functions. min selects the smallest amplitude (1 mvpp into 50w). max selects the largest amplitude for the selected function (at most 10 vpp into 50w depending on the selected function and offset voltage). the volt? query returns the output amplitude for the function currently selected. values are always returned in the units set by the most recent volt:unit command. � offset voltage limitations: the relationship between output amplitude and offset voltage is shown below. vmax is the maximum peak voltage for the selected output termination (5 volts for a 50w load or 10 volts for a high-impedance load). vpp &lt; 2 x (vmax - |voffset|) � limits due to output termination: if you change the output termination setting, the displayed output amplitude will be automatically adjusted (and no error will be generated). for example, if you set the amplitude to 10 vpp and then change the output termination from 50 ohms to "high impedance", the amplitude displayed on the function generator's front-panel will double to 20 vpp. if you change from "high impedance" to 50 ohms, the displayed amplitude will drop in half. for more information, see the outp:load command on page 163. � you can set the output amplitude in vpp, vrms, or dbm by specifying the units as part of the volt command as shown below. volt 3.0 vrmsor, you can use the volt:unit command (see page 165) to specify the output units for all commands that follow. � you cannot specify the output amplitude in dbm if the output termination is currently set to "high impedance". the units are automatically converted to vpp. see the volt:unit command on page 165 for more information. � limits due to units selection: in some cases, the amplitude limits are determined by the output units selected. this may occur when the units are vrms or dbm due to the differences in crest factor for the various output functions. for example, if you output a 5 vrms square wave (into 50 ohms) and then change to the sine wave function, the function generator will automatically adjust the output amplitude to 3.536 vrms (the upper limit for sine waves in vrms). from the remote interface, a "settings conflict" error will be generated and the amplitude will be adjusted as described. � arbitrary waveform limitations: for arbitrary waveforms, the maximum amplitude will be limited if the waveform data points do not span the full range of the output dac (digital- to-analog converter). for example, the built-in "sinc" waveform does not use the full range of values between �1 and therefore its maximum amplitude is limited to 6.087 vpp (into 50 ohms). � while changing amplitude, you may notice a momentary disruption in the output waveform at certain voltages due to switching of the output attenuators. the amplitude is controlled, however, so the output voltage will never exceed the current setting while switching ranges. to prevent this disruption in the output, you can disable the voltage autoranging feature using the volt:rang:auto command (see page 160 for more information). � you can also set the amplitude (with an associated offset voltage) by specifying a high level and low level. for example, if you set the high level to +2 volts and the low level to -3 volts, the resulting amplitude is 5 vpp (with an associated offset voltage of -500 mv). see the volt:high and volt:low commands on page 159 for more information. � to output a dc voltage level, select the dc voltage function using the func dc command and then set the offset voltage level using the volt:offs command. you can set the dc level to any value between �5 vdc into 50 ohms or �10 vdc into an open circuit. </e></d><d><e>source:voltage:level:immediate:high</e><e>high</e><e>set the high voltage level. </e><e> voltage :high {&lt;voltage&gt;|minimum|maximum} :high? [minimum|maximum] :low {&lt;voltage&gt;|minimum|maximum} :low? [minimum|maximum] voltage :high {&lt;voltage&gt;|minimum|maximum} :high? [minimum|maximum] :low {&lt;voltage&gt;|minimum|maximum} :low? [minimum|maximum] set the high or low voltage levels. for all functions, the default high level is +50 mv and the default low level is -50 mv. min selects the most negative voltage level for the selected function and max selects the largest voltage level. the :high? and :low? queries return the high and low levels, respectively. � limits due to amplitude: you can set the voltage levels to a positive or negative value with the restrictions shown below. vpp is the maximum peak-to-peak amplitude for the selected output termination (10 vpp for a 50-ohm load or 20 vpp for a high-impedance load). vhigh - vlow &lt; vpp (max) and vhigh, vlow &lt; if the specified level is not valid, the function generator will automatically adjust it to the maximum voltage allowed. from the remote interface, a "data out of range" error will be generated and the level will be adjusted as described. � you can set the levels to a positive or negative value, but note that the high level must always be greater than the low level. if you specify a low level that is greater than the high level, the function generator will automatically set the low level to be 1 mv less than the high level. from the remote interface, a "data out of range" error will be generated and the level will be adjusted as described. � note that when you set the high and low levels, you are also setting the amplitude of the waveform. for example, if you set the high level to +2 volts and the low level to -3 volts, the resulting amplitude is 5 vpp (with an offset voltage of -500 mv). � limits due to output termination: if you change the output termination setting, the displayed voltage levels will be automatically adjusted (and no error will be generated). for example, if you set the high level to +100 mvdc and then change the output termination from 50 ohms to "high impedance", the voltage displayed on the function generator's front-panel will double to +200 mvdc. if you change from "high impedance" to 50 ohms, the displayed voltage will drop in half. see the outp:load command on page 163 for more information. � to invert the waveform relative to the offset voltage, you can use the outp:pol command. see page 164 for more information. </e></d><d><e>source:voltage:level:immediate:low</e><e>low</e><e>set the low voltage level.</e><e> voltage :high {&lt;voltage&gt;|minimum|maximum} :high? [minimum|maximum] :low {&lt;voltage&gt;|minimum|maximum} :low? [minimum|maximum] voltage :high {&lt;voltage&gt;|minimum|maximum} :high? [minimum|maximum] :low {&lt;voltage&gt;|minimum|maximum} :low? [minimum|maximum] set the high or low voltage levels. for all functions, the default high level is +50 mv and the default low level is -50 mv. min selects the most negative voltage level for the selected function and max selects the largest voltage level. the :high? and :low? queries return the high and low levels, respectively. � limits due to amplitude: you can set the voltage levels to a positive or negative value with the restrictions shown below. vpp is the maximum peak-to-peak amplitude for the selected output termination (10 vpp for a 50-ohm load or 20 vpp for a high-impedance load). vhigh - vlow &lt; vpp (max) and vhigh, vlow &lt; if the specified level is not valid, the function generator will automatically adjust it to the maximum voltage allowed. from the remote interface, a "data out of range" error will be generated and the level will be adjusted as described. � you can set the levels to a positive or negative value, but note that the high level must always be greater than the low level. if you specify a low level that is greater than the high level, the function generator will automatically set the low level to be 1 mv less than the high level. from the remote interface, a "data out of range" error will be generated and the level will be adjusted as described. � note that when you set the high and low levels, you are also setting the amplitude of the waveform. for example, if you set the high level to +2 volts and the low level to -3 volts, the resulting amplitude is 5 vpp (with an offset voltage of -500 mv). � limits due to output termination: if you change the output termination setting, the displayed voltage levels will be automatically adjusted (and no error will be generated). for example, if you set the high level to +100 mvdc and then change the output termination from 50 ohms to "high impedance", the voltage displayed on the function generator's front-panel will double to +200 mvdc. if you change from "high impedance" to 50 ohms, the displayed voltage will drop in half. see the outp:load command on page 163 for more information. � to invert the waveform relative to the offset voltage, you can use the outp:pol command. see page 164 for more information. </e></d><d><e>source:voltage:level:immediate:offset</e><e>offset</e><e>set the dc offset voltage. </e><e> voltage:offset {&lt;offset&gt;|minimum|maximum} voltage:offset? [minimum|maximum] voltage:offset {&lt;offset&gt;|minimum|maximum} voltage:offset? [minimum|maximum] set the dc offset voltage. the default offset is 0 volts for all functions. min selects the most negative dc offset voltage for the selected function and amplitude. max selects the largest dc offset for the selected function and amplitude. the :offs? query returns the offset voltage for the function currently selected. � limits due to amplitude: the relationship between offset voltage and output amplitude is shown below. vmax is the maximum peak voltage for the selected output termination (5 volts for a 50w load or 10 volts for a high-impedance load). |voffset| &lt; vmax - if the specified offset voltage is not valid, the function generator will automatically adjust it to the maximum dc voltage allowed with the amplitude specified. from the remote interface, a "data out of range" error will be generated and the offset will be adjusted as described. � limits due to output termination: the offset limits are determined by the current output termination setting. for example, if you set the offset to 100 mvdc and then change the output termination from 50 ohms to "high impedance", the offset voltage displayed on the function generator's front-panel will double to 200 mvdc (and no error will be generated). if you change from "high impedance" to 50 ohms, the displayed offset will drop in half. see the outp:load command on page 163 for more information. � arbitrary waveform limitations: for arbitrary waveforms, the maximum offset and amplitude will be limited if the waveform data points do not span the full range of the output dac (digital-to-analog converter). for example, the built-in "sinc" waveform does not use the full range of values between �1 and therefore its maximum offset is limited to 4.95 volts (into 50 ohms). � you can also set the offset by specifying a high level and low level. for example, if you set the high level to +2 volts and the low level to -3 volts, the resulting amplitude is 5 vpp (with an associated offset voltage of -500 mv). see the volt:high and volt:low commands below for more information. � to output a dc voltage level, select the dc voltage function using the func dc command and then set the offset voltage level using the volt:offs command. you can set the dc level to any value between �5 vdc into 50 ohms or �10 vdc into an open circuit. </e></d><d><e>source:voltage:level:immediate:unit:voltage</e><e>voltage</e><e>select the units for output amplitude (does not affect offset voltage or high/low levels).</e><e> voltage:unit {vpp|vrms|dbm} voltage:unit? voltage:unit {vpp|vrms|dbm} voltage:unit? select the units for output amplitude (does not affect offset voltage or high/low levels). the default is vpp. the :unit? query returns "vpp", "vrms", or "dbm". � the function generator uses the current units selection for both front panel and remote interface operations. for example, if you select "vrms" from the remote interface using the volt:unit command, the units are displayed as "vrms" on the front panel. � the volt? query command (see page 156) returns the output amplitude in the units set by the most recent volt:unit command. � the output units for amplitude cannot be set to dbm if the output termination is currently set to "high impedance". the units are automatically converted to vpp. see the outp:load command on page 163 for more information. � unless you specify the units as part of the apply or volt command, the volt:unit command takes precedence. for example, if you select "vrms" using the volt:unit command and do not include units with the apply or volt command, the value specified for the amplitude parameter in the apply command will be in "vrms". </e></d><d><e>source:voltage:range:auto</e><e>auto</e><e>disable or enable voltage autoranging for all functions. in the default mode, autoranging is enabled ("on") and the function generator automatically selects the optimal settings for the output amplifier and attenuators. </e><e> voltage:range:auto {off|on|once} voltage:range:auto? voltage:range:auto {off|on|once}voltage:range:auto? disable or enable voltage autoranging for all functions. in the default mode, autoranging is enabled ("on") and the function generator automatically selects the optimal settings for the output amplifier and attenuators. with autoranging disabled ("off"), the function generator uses the current amplifier and attenuator settings. the :auto? query returns "0" (off) or "1" (on). � the apply command overrides the voltage autorange setting and automatically enables autoranging ("on"). � the advantage of disabling autoranging is to eliminate momentary disruptions caused by switching of the attenuators while changing amplitude. however, the amplitude and offset accuracy and resolution (as well as waveform fidelity) may be adversely affected when reducing the amplitude below the expected range change. � the "once" parameter has the same effect as turning autoranging "on", and then "off". this parameter allows you to make a one-time change to the amplifier / attenuator setting before returning to the volt:rang:auto off setting. </e></d><d><e>status:questionable:condition</e><e>condition</e><e>query the condition register in this group. this is a read-only register and bits are not cleared when you read the register. </e><e> status:questionable:condition? status:questionable:condition? query the condition register in this group. this is a read-only register and bits are not cleared when you read the register. a query of this register returns a decimal value which corresponds to the binary-weighted sum of all bits set in the register. </e></d><d><e>status:questionable:enable</e><e>enable</e><e>enable bits in the enable register in this register group. </e><e> status:questionable:enable &lt;enable value&gt; status:questionable:enable? status:questionable:enable &lt;enable value&gt;status:questionable:enable? enable bits in the enable register in this register group. the selected bits are then reported to the status byte. a *cls (clear status) will not clear the enable register but it does clear all bits in the event register. the status:preset command clears all bits in the enable register. to enable bits in the enable register, you must write a decimal value which corresponds to the binary-weighted sum of the bits you wish to enable in the register. the :enab? query returns a decimal value which corresponds to the binary-weighted sum of all bits enabled by the stat:ques:enab command. standard event register commands see the table on page 233 for the register bit definitions. </e></d><d><e>status:questionable:event</e><e>event</e><e>query the event register in this register group. </e><e> status:questionable[:event]? status:questionable[:event]? query the event register in this register group. this is a read-only register. once a bit is set, it remains set until cleared by this command or *cls (clear status) command. a query of this register returns a decimal value which corresponds to the binary-weighted sum of all bits set in the register. </e></d><d><e>status:preset</e><e>preset</e><e>clear all bits in the questionable data enable register and the standard operation enable register. </e><e> status:preset status:preset clear all bits in the questionable data enable register and the standard operation enable register. </e></d><d><e>system:beeper:immediate</e><e>immediate</e><e>issue a single beep immediately. </e><e> system:beeper system:beeper issue a single beep immediately. </e></d><d><e>system:beeper:state</e><e>state</e><e>disable or enable the tone heard when an error is generated from the front-panel or over the remote interface. the current selection is stored in non-volatile memory. </e><e> system:beeper:state {off|on} system:beeper:state? system:beeper:state {off|on}system:beeper:state? disable or enable the tone heard when an error is generated from the front-panel or over the remote interface. the current selection is stored in non-volatile memory. the :stat? query returns "0" (off) or "1" (on). </e></d><d><e>system:error:next</e><e>next</e><e>read and clear one error from the function generator's error queue. a record of up to 20 command syntax or hardware errors can be stored in the error queue.</e><e> system:error? system:error? read and clear one error from the function generator's error queue. a record of up to 20 command syntax or hardware errors can be stored in the error queue. see chapter 5 for a complete listing of the error messages. � errors are retrieved in first-in-first-out (fifo) order. the first error returned is the first error that was stored. errors are cleared as you read them. the function generator beeps once each time an error is generated (unless disabled using the syst:beep:stat command). � if more than 20 errors have occurred, the last error stored in the queue (the most recent error) is replaced with "queue overflow". no additional errors are stored until you remove errors from the queue. if no errors have occurred when you read the error queue, the function generator responds with "no error". � the error queue is cleared by the *cls (clear status) command or when the power is cycled. the errors are also cleared when you read the queue. the error queue is not cleared by a reset (*rst command). � errors have the following format (the error string may contain up to 255 characters). -113,"undefined header" </e></d><d><e>system:local</e><e>local</e><e>sets the instrument state to local (the normal power-on default state). removes any annunciator and unlocks the front panel keyboard. </e><e> system:local system:local place the function generator in the local mode for rs-232 operation. all keys on the front panel are fully functional while in the local mode. </e></d><d><e>system:rwlock</e><e>rwlock</e><e>sets the instrument state to remote with lock. displays the rwl annunciator and locks the keyboard.</e><e> system:rwlock system:rwlock place the function generator in the remote mode for rs-232 operation and disable all front-panel keys. </e></d><d><e>system:version</e><e>version</e><e>query the function generator to determine the present scpi version. </e><e> system:version? system:version? query the function generator to determine the present scpi version. returns a string in the form "yyyy.v", where "yyyy" represents the year of the version, and "v" represents a version number for that year (e.g., 1997.0). </e></d><d><e>data:attribute:average</e><e>average</e><e>query the arithmetic average of all data points for the specified arbitrary waveform. </e><e> data:attribute:average? [&lt;arb name&gt;] data:attribute:average? [&lt;arb name&gt;] query the arithmetic average of all data points for the specified arbitrary waveform (-1 � average � +1). the default arb name is the arbitrary waveform currently active (selected with func:user command). � if you query a waveform that is not currently stored in memory, a "specified arb waveform does not exist" error is generated. </e></d><d><e>data:attribute:cfactor</e><e>cfactor</e><e>query the crest factor of all data points for the specified arbitrary waveform. crest factor is the ratio of the peak value to the rms value of the waveform. </e><e> data:attribute:cfactor? [&lt;arb name&gt;] data:attribute:cfactor? [&lt;arb name&gt;] query the crest factor of all data points for the specified arbitrary waveform. crest factor is the ratio of the peak value to the rms value of the waveform. the default arb name is the arbitrary waveform currently active (selected with func:user command). � if you query a waveform that is not currently stored in memory, a "specified arb waveform does not exist" error is generated. </e></d><d><e>data:attribute:points</e><e>points</e><e>query the number of points in the specified arbitrary waveform. </e><e> data:attribute:points? [&lt;arb name&gt;] data:attribute:points? [&lt;arb name&gt;] query the number of points in the specified arbitrary waveform. returns a value from 1 to 65,536 points. the default arb name is the arbitrary waveform currently active (selected with func:user command). � if you query a waveform that is not currently stored in memory, a "specified arb waveform does not exist" error is generated. </e></d><d><e>data:attribute:ptpeak</e><e>ptpeak</e><e>query the peak-to-peak value of all data points for the specified arbitrary waveform. </e><e> data:attribute:ptpeak? [&lt;arb name&gt;] data:attribute:ptpeak? [&lt;arb name&gt;] query the peak-to-peak value of all data points for the specified arbitrary waveform. the default arb name is the arbitrary waveform currently active (selected with func:user command). � this command returns a value from "0" to "+1.0", with "+1.0" indicating full amplitude available. � the maximum amplitude will be limited if the data points do not span the full range of the output dac (digital-to-analog converter). for example, the built-in "sinc" waveform does not use the full range of binary values between �1 and therefore its maximum amplitude is 6.087 vpp (into 50 ohms). � if you query a waveform that is not currently stored in memory, a "specified arb waveform does not exist" error is generated. </e></d><d><e>data:catalog</e><e>catalog</e><e>list the names of all waveforms currently available for selection. </e><e> data:catalog? data:catalog? list the names of all waveforms currently available for selection. returns the names of the five built-in waveforms (non-volatile memory), "volatile" if a waveform is currently downloaded to volatile memory, and all user-defined waveforms downloaded to non-volatile memory. � a series of quoted strings separated with commas is returned as shown in the example below. "volatile","exp_rise","exp_fall","neg_ramp", "sinc","cardiac","test1_arb","test2_arb" � use the data:del command to delete the waveform in volatile memory or any of the user-defined waveforms in non-volatile memory. </e></d><d><e>data:copy</e><e>copy</e><e>copy the waveform from volatile memory to the specified name in 
non-volatile memory. </e><e> data:copy &lt;destination arb name&gt; [,volatile] data:copy &lt;destination arb name&gt; [,volatile] copy the waveform from volatile memory to the specified name in non-volatile memory. the source for the copy is always "volatile". you cannot copy from any other source and you cannot copy to "volatile". � the arb name may contain up to 12 characters. the first character must be a letter (a-z), but the remaining characters can be numbers (0-9) or the underscore character (" _ "). blank spaces are not allowed. if you specify a name with more than 12 characters, a "program mnemonic too long" error is generated. � the volatile parameter is optional and can be omitted. note that the keyword "volatile" does not have a short form. � the following built-in waveform names are reserved and cannot be used with the data:copy command: "exp_rise", "exp_fall", "neg_ramp", "sinc", and "cardiac". if you specify one of the built-in waveforms, a "cannot overwrite a built-in waveform" error is generated. � the function generator does not distinguish between upper- and lower-case letters. therefore, arb_1 and arb_1 are the same name. all characters are converted to upper case. � if you copy to a waveform name that already exists, the previous waveform is overwritten (and no error will be generated). however, you cannot overwrite any of the five built-in waveforms. � up to four user-defined waveforms can be stored in non-volatile memory. if memory is full and you try to copy a new waveform to non-volatile memory, a "not enough memory" error is generated. use the data:del command to delete the waveform in volatile memory or any of the four user-defined waveforms in non-volatile memory. use the data:cat? command to list all waveforms currently stored in volatile and non-volatile memory. � the following statement shows how to use the data:copy command to copy the volatile waveform into named storage "arb_1". data:copy arb_1, volatile </e></d><d><e>data:data</e><e>data</e><e>download floating-point values from -1 to +1 into volatile memory. you can download from 1 to 65,536 (64k) points per waveform. the function generator takes the specified number of points and expands them to fill waveform memory. </e><e> data volatile, &lt;value&gt;, &lt;value&gt;, . . . data volatile, &lt;value&gt;, &lt;value&gt;, . . . download floating-point values from -1 to +1 into volatile memory. you can download from 1 to 65,536 (64k) points per waveform. the function generator takes the specified number of points and expands them to fill waveform memory. if you download less than 16,384 (16k) points, a waveform with 16,384 points is automatically generated. if you download more than 16,384 points, a 65,536-point waveform is generated. � the values -1 and +1 correspond to the peak values of the waveform (if the offset is 0 volts). for example, if you set the amplitude to 10 vpp (0v offset), "+1" corresponds to +5v and "-1" corresponds to -5v. � the maximum amplitude will be limited if the data points do not span the full range of the output dac (digital-to-analog converter). for example, the built-in "sinc" waveform does not use the full range of values between �1 and therefore its maximum amplitude is 6.087 vpp (into 50 ohms). � downloading floating-point values (using data volatile) is slower than downloading binary values (using data:dac volatile) but is more convenient when using trigonometric functions which return values from -1 to +1. � the data command overwrites the previous waveform in volatile memory (and no error will be generated). use the data:copy command to copy the waveform to non-volatile memory. � up to four user-defined waveforms can be stored in non-volatile memory. use the data:del command to delete the waveform in volatile memory or any of the four user-defined waveforms in non-volatile memory. use the data:cat? command to list all waveforms currently stored in volatile and non-volatile memory (as well as the five built-in waveforms). � after downloading the waveform data to memory, use the func:user command to choose the active waveform and the func user command to output it. � the following statement shows how to use the data command to download seven points to volatile memory. data volatile, 1, .67, .33, 0, -.33, -.67, -1 </e></d><d><e>data:data:dac</e><e>dac</e><e>download binary or decimal integer values from -8191 to +8191 into volatile memory. </e><e> data:dac volatile, {&lt;binary block&gt;|&lt;value&gt;, &lt;value&gt;, . . . } data:dac volatile, {&lt;binary block&gt;|&lt;value&gt;, &lt;value&gt;, . . . } download binary or decimal integer values from -2047 to +2047 into volatile memory. you can download from 1 to 65,536 (64k) points per waveform in ieee-488.2 binary block format or as a list of values. the range of values corresponds to the values available using internal 12-bit dac (digital-to-analog converter) codes. the function generator takes the specified number of points and expands them to fill waveform memory. if you download less than 16,384 (16k) points, a waveform with 16,384 points is automatically generated. if you download more than 16,384 points, a 65,536-point waveform is generated. � the values -2047 and +2047 correspond to the peak values of the waveform (if the offset is 0 volts). for example, if you set the output amplitude to 10 vpp, "+2047" corresponds to +5v and "-2047" corresponds to -5v. � the maximum amplitude will be limited if the data points do not span the full range of the output dac. for example, the built-in "sinc" waveform does not use the full range of values between �2047 and therefore its maximum amplitude is 6.087 vpp (into 50 ohms). � the data:dac command overwrites the previous waveform in volatile memory (and no error will be generated). use the data:copy command to copy the waveform to non-volatile memory. � up to four user-defined waveforms can be stored in non-volatile memory. use the data:del command to delete the waveform in volatile memory or any of the four user-defined waveforms in non-volatile memory. use the data:cat? command to list all waveforms currently stored in volatile and non-volatile memory (as well as the five built-in waveforms). � after downloading the waveform data to memory, use the func:user command to choose the active waveform and the func user command to output it. � to download binary data over the rs-232 interface, you can use any handshake mode except xon/xoff and be sure to select "parity none" (8 data bits). you must also insert a pause of approximately 1 ms between sending the header and sending the binary block. see page 219 for more information on configuring the rs-232 interface. � the following statement shows how to use the data:dac command to download seven integer points using the binary block format (see also "using the ieee-488.2 binary block format" below). data:dac volatile, #214 binary data � the following statement shows how to use the data:dac command to download five integer points in decimal format. data:dac volatile, 2047, 1024, 0, -1024, -2047 using the ieee-488.2 binary block format in the binary block format, a block header precedes the waveform data. the block header has the following format: # 5 32768 the function generator represents binary data as 16-bit integers, which are sent as two bytes. therefore, the total number of bytes is always twice the number of data points in the waveform (and must always be an even number). for example, 32,768 bytes are required to download a waveform with 16,384 points. use the form:bord command to select the byte order for binary transfers in block mode. if you specify form:bord norm (default), the most-significant byte (msb) of each data point is assumed first. if you specify form:bord swap, the least-significant byte (lsb) of each data point is assumed first. most computers use the "swapped" byte order. </e></d><d><e>data:delete:all</e><e>all</e><e>delete all user-defined arbitrary waveforms from memory. this command deletes the waveform in volatile memory and all user-defined waveforms in non-volatile memory. the five built-in waveforms in non-volatile memory are not deleted. </e><e> data:delete:all data:delete:all delete all user-defined arbitrary waveforms from memory. this command deletes the waveform in volatile memory and all user-defined waveforms in non-volatile memory. the five built-in waveforms in non-volatile memory are not deleted. � the colon before the all parameter is required (data:delete:all).if you insert a space instead of a colon, the function generator will attempt to delete an arbitrary waveform with the name "all". if no such waveform is stored in memory, a "specified arb waveform does not exist" error is generated. � use the data:del &lt;arb name&gt; command to delete stored waveforms one at a time. � you cannot delete the arbitrary waveform that is currently being output. if you attempt to delete this waveform, a "not able to delete the currently selected active arb waveform" error is generated. � you cannot delete any of the five built-in arbitrary waveforms. if you attempt to delete one of these waveforms, a "not able to delete a built-in arb waveform" error is generated. </e></d><d><e>data:delete:name</e><e>name</e><e>delete the specified arbitrary waveform from memory. you can delete the waveform in volatile memory or any of the four user-defined waveforms in non-volatile memory. </e><e> data:delete &lt;arb name&gt; data:delete &lt;arb name&gt; delete the specified arbitrary waveform from memory. you can delete the waveform in volatile memory or any of the four user-defined waveforms in non-volatile memory. � you cannot delete the arbitrary waveform that is currently being output. if you attempt to delete this waveform, a "not able to delete the currently selected active arb waveform" error is generated. � you cannot delete any of the five built-in arbitrary waveforms. if you attempt to delete one of these waveforms, a "not able to delete a built-in arb waveform" error is generated. � use the data:del:all command to delete the waveform in volatile memory and all user-defined non-volatile waveforms all at once. if one of the waveforms is currently being output, a "not able to delete the currently selected active arb waveform" error is generated. </e></d><d><e>data:nvolatile:catalog</e><e>catalog</e><e>list the names of all user-defined arbitrary waveforms downloaded to non-volatile memory. returns the names of up to four waveforms. </e><e> data:nvolatile:catalog? data:nvolatile:catalog? list the names of all user-defined arbitrary waveforms downloaded to non-volatile memory. returns the names of up to four waveforms. � a series of quoted strings separated with commas is returned as shown in the example below. if no user-defined waveforms are currently downloaded, the command returns a null string ( " " ). "test1_arb","test2_arb","test3_arb","test4_arb" � use the data:del command to delete any of the user-defined waveforms in non-volatile memory. </e></d><d><e>data:nvolatile:free</e><e>free</e><e>query the number of non-volatile memory slots available to store user-defined waveforms. returns the number of memory slots available to store user-defined waveforms.</e><e> data:nvolatile:free? data:nvolatile:free? query the number of non-volatile memory slots available to store user-defined waveforms. returns the number of memory slots available to store user-defined waveforms. returns "0" (memory is full), "1", "2", "3", or "4". </e></d><d><e>trigger:sequence:delay</e><e>delay</e><e>insert a time delay between the receipt of the trigger and the start of the burst waveform </e><e> trigger:delay {&lt;seconds&gt;|minimum|maximum} trigger:delay? [minimum|maximum] trigger:delay {&lt;seconds&gt;|minimum|maximum} trigger:delay? [minimum|maximum] insert a time delay between the receipt of the trigger and the start of the burst waveform (used in triggered burst mode only). select from 0 seconds to 85 seconds. the default delay is 0. min = 0 seconds. max = 85 seconds. the :del? query returns the trigger delay in seconds. quadralay corporation http://www.webworks.com voice: (512) 719-3399 fax: (512) 719-3606 sales@webworks.com </e></d><d><e>trigger:sequence:immediate</e><e>immediate</e><e>trigger a sweep or burst from the remote interface. this command can be used with any of the available trigger sources (trig:sour command). </e><e> trigger trigger trigger a sweep or burst from the remote interface. this command can be used with any of the available trigger sources (trig:sour command). for example, you can use the trig command to issue an immediate trigger while waiting for an external trigger. </e></d><d><e>trigger:sequence:slope</e><e>slope</e><e>select whether the function generator uses the rising edge or falling edge of the trigger signal on the rear-panel trig in connector. </e><e> trigger:slope {positive|negative} trigger:slope? trigger:slope {positive|negative}trigger:slope? select whether the function generator uses the rising edge or falling edge of the trigger signal on the rear-panel trig in connector for an externally-triggered sweep. the default is pos (rising edge). the :slop? query returns "pos" or "neg". </e></d><d><e>trigger:sequence:source</e><e>source</e><e>select the source from which the function generator will accept a trigger. </e><e> trigger:source {immediate|external|bus} trigger:source? trigger:source {immediate|external|bus} trigger:source? select the source from which the function generator will accept a trigger. the function generator will accept an immediate internal trigger, a hardware trigger from the rear-panel trig in connector, or a software (bus) trigger. the default is imm. the :sour? query returns "imm", "ext", or "bus" � when the immediate (internal) source is selected, the function generator outputs a continuous sweep at a rate determined by the sweep time specified (swe:time command). � when the external source is selected, the function generator will accept a hardware trigger applied to the rear-panel trig in connector. the function generator initiates one sweep each time trig in receives a ttl pulse with the edge polarity specified by the trig:slop command (see page 185). note that the trigger period must be greater than or equal to the specified sweep time plus 1 ms. � when the bus (software) source is selected, the function generator initiates one sweep each time a bus trigger command is received. to trigger the function generator from the remote interface (either gpib or rs-232), send the trig or *trg (trigger) command. the front-panelkey is illuminated when the function generator is waiting for a bus trigger. � the apply command automatically sets the trigger source to immediate (equivalent to trig:sour imm command). � to ensure synchronization when the bus source is selected, send the *wai (wait) command. when the *wai command is executed, the function generator waits for all pending operations to complete before executing any additional commands. for example, the following command string guarantees that the first trigger is accepted and the operation is executed before the second trigger is recognized. trig:sour bus;*trg;*wai;*trg;*wai � you can use the *opc? (operation complete query) command or the *opc (operation complete) command to signal when the sweep is complete. the *opc? command returns "1" to the output buffer when the sweep is complete. the *opc command sets the "operation complete" bit (bit 0) in the standard event register when the sweep is complete. </e></d><d><e>unit:angle</e><e>angle</e><e>select degrees or radians to set the phase offset value using the phas command (remote interface only). </e><e> unit:angle {degree|radian} unit:angle? unit:angle {degree|radian}unit:angle? select degrees or radians to set the starting phase for the burst with the burs:phas command (remote interface only). the default is deg. the :angl? query returns "deg" or "rad". � from the front panel, the starting phase is always displayed in degrees (radians are not available). if you set the starting phase in radians from the remote interface and then return to front-panel operation, you will see that the function generator converts the phase to degrees. </e></d><d><e>*cls</e><e>*cls</e><e>clear the event register in all register groups. this command also clears the error queue and cancels a *opc operation. </e><e> *cls *cls clear the event register in all register groups. this command also clears the error queue and cancels a *opc operation. </e></d><d><e>*ese</e><e>*ese</e><e>enable bits in the standard event status register to be reported in the status byte. the selected bits are summarized in the "standard event" bit (bit 5) of the status byte register. </e><e> *ese &lt;enable value&gt; *ese? *ese &lt;enable value&gt;*ese? enable bits in the standard event status register to be reported in the status byte. the selected bits are summarized in the "standard event" bit (bit 5) of the status byte register. the *ese? query returns a decimal value which corresponds to the binary-weighted sum of all bits enabled by the *ese command. � a *cls (clear status) does not clear the enable register but it does clear all bits in the event register. � a status:preset does not clear the bits in the status byte enable register. � a *psc 0 preserves the contents of the enable register through power cycles. miscellaneous status register commands </e></d><d><e>*esr</e><e>*esr</e><e>query the standard event status register. once a bit is set, it remains set until cleared by a *cls (clear status) command or queried by this command. </e><e> *esr? *esr? query the standard event status register. once a bit is set, it remains set until cleared by a *cls (clear status) command or queried by this command. a query of this register returns a decimal value which corresponds to the binary-weighted sum of all bits set in the register. </e></d><d><e>*idn</e><e>*idn</e><e>read the function generator's identification string which contains four fields separated by commas. the first field is the manufacturer's name, the second field is the model number, the third field is the serial number, and the fourth field is a revision code which contains four numbers separated by dashes. </e><e> *idn? *idn? read the function generator's identification string which contains four fields separated by commas. the first field is the manufacturer's name, the second field is the model number, the third field is not used (always "0"), and the fourth field is a revision code which contains five numbers separated by dashes. � the command returns a string with the following format (be sure to dimension a string variable with at least 50 characters). agilent technologies,33250a,0,m.mm-l.ll-f.ff-gg-p m.mm = main firmware revision number l.ll = loader firmware revision number f.ff = i/o processor firmware revision number gg = gate array revision number p = printed circuit board revision number </e></d><d><e>*lrn</e><e>*lrn</e><e>query the function generator and return a string of scpi commands containing the current settings (learn string). you can then send the string back to the instrument to restore this state at a later time. </e><e> *lrn? *lrn? query the function generator and return a string of scpi commands containing the current settings (learn string). you can then send the string back to the instrument to restore this state at a later time. for proper operation, do not modify the returned string before sending it to the function generator. the returned string will contain about 1,500 characters. to avoid possible instrument errors, execute the *rst command first, before sending the learn string to the instrument. </e></d><d><e>*opc</e><e>*opc</e><e>set the "operation complete" bit (bit 0) in the standard event register after the previous commands have completed. when used with a bus-triggered sweep or burst, you may have the opportunity to execute commands after the *opc command and before the "operation complete" bit is set in the register. </e><e> *opc *opc set the "operation complete" bit (bit 0) in the standard event register after the previous commands have been executed. other commands may be executed before the bit is set. this command is used in the triggered sweep or triggered burst modes to provide a way to poll or interrupt the computer when the sweep or burst is complete. </e><e> *opc? *opc? return "1" to the output buffer after the previous commands have been executed. other commands cannot be executed until this command completes. used in the triggered sweep and triggered burst modes only. quadralay corporation http://www.webworks.com voice: (512) 719-3399 fax: (512) 719-3606 sales@webworks.com </e></d><d><e>*psc</e><e>*psc</e><e>power-on status clear. clear the standard event enable register and status byte condition register at power on (*psc 1). when *psc 0 is in effect, these two registers are not cleared at power on. </e><e> *psc {0|1} *psc? *psc {0|1}*psc? power-on status clear. clear the standard event enable register and status byte condition register at power on (*psc 1). when *psc 0 is in effect, these two registers are not cleared at power on. the default is *psc 1. the *psc? query returns the power-on status clear setting. returns "0" (do not clear at power on) or "1" (clear at power on). </e></d><d><e>*rcl</e><e>*rcl</e><e>recall the instrument state stored in the specified non-volatile storage location. you cannot recall the instrument state from a storage location that is empty. </e><e> *rcl {0|1|2|3|4} *rcl {0|1|2|3|4} recall the instrument state stored in the specified non-volatile storage location. you cannot recall the instrument state from a storage location that is empty. � when shipped from the factory, storage locations "1" through "4" are empty (location "0" has the power-on state). � from the remote interface only, you can use location "0" to store a fifth instrument state (you cannot store to this location from the front panel). however, keep in mind that location "0" is automatically overwritten when power is cycled (the instrument state previously stored will be overwritten). </e></d><d><e>*rst</e><e>*rst</e><e>reset the function generator to its factory default state.</e><e> *rst *rst reset the function generator to its factory default state (see "factory default settings" on page 127) independent of the mem:stat:rec:auto command setting. this command will abort a sweep or burst in progress and will re-enable the front-panel display if it was previously disabled (disp off command). </e></d><d><e>*sav</e><e>*sav</e><e>store (save) the current instrument state in the specified non-volatile storage location. any state previously stored in the same location will be overwritten (and no error will be generated). </e><e> *sav {0|1|2|3|4} *sav {0|1|2|3|4} store (save) the current instrument state in the specified non-volatile storage location. any state previously stored in the same location will be overwritten (and no error will be generated). � you can store the instrument state in any of the five storage locations. however, you can only recall a state from a location that contains a previously-stored state. � from the remote interface only, you can use storage location "0" to store a fifth instrument state (you cannot store to this location from the front panel). however, note that location "0" is automatically overwritten when power is cycled (the instrument state previously stored will be overwritten). � the state storage feature "remembers" the selected function (including arbitrary waveforms), frequency, amplitude, dc offset, duty cycle, symmetry, as well as any modulation parameters in use. � if you delete an arbitrary waveform from non-volatile memory after storing the instrument state, the waveform data is lost and the function generator will not output the waveform when the state is recalled. the built-in "exponential rise" waveform is output in place of the deleted waveform. � when power is turned off, the function generator automatically stores its state in storage location "0". you can configure the function generator to automatically recall the power-down state when power is restored. see the mem:stat:rec:auto command on page 212 for more information. � the front-panel display state (disp command) is saved when you store the instrument state. when you recall the instrument state, the front-panel display will return to the previous state. � an instrument reset (*rst command) does not affect the configurations stored in memory. once a state is stored, it remains until it is overwritten or specifically deleted. </e></d><d><e>*sre</e><e>*sre</e><e>enable bits in the status byte to generate a service request. the selected bits are summarized in the "master summary" bit (bit 6) of the status byte register. if any of the selected bits change from "0" to "1", a service request signal is generated. </e><e> *sre &lt;enable value&gt; *sre? *sre &lt;enable value&gt; *sre? enable bits in the status byte to generate a service request. to enable specific bits, you must write a decimal value which corresponds to the binary-weighted sum of the bits in the register. the selected bits are summarized in the "master summary" bit (bit 6) of the status byte register. if any of the selected bits change from "0" to "1", a service request signal is generated. the *sre? query returns a decimal value which corresponds to the binary-weighted sum of all bits enabled by the *sre command. � a *cls (clear status) does not clear the enable register but it does clear all bits in the event register. � a status:preset does not clear the bits in the status byte enable register. � a *psc 0 preserves the contents of the enable register through power cycles. questionable data register commands see the table on page 231 for the register bit definitions. </e></d><d><e>*stb</e><e>*stb</e><e>query the summary (condition) register in this register group. this command is similar to a serial poll but it is processed like any other instrument command. this command returns the same result as a serial poll but the "master summary" bit (bit 6) is not cleared by the *stb? command. </e><e> *stb? *stb? query the summary (condition) register in this register group. this command is similar to a serial poll but it is processed like any other instrument command. this command returns the same result as a serial poll but the "master summary" bit (bit 6) is not cleared by the *stb? command. </e></d><d><e>*trg</e><e>*trg</e><e>trigger a sweep or burst from the remote interface only if the bus (software) trigger source is currently selected (trig:sour bus command). </e><e> *trg *trg trigger a sweep or burst from the remote interface only if the bus (software) trigger source is currently selected (trig:sour bus command). </e></d><d><e>*tst</e><e>*tst</e><e>perform a complete self-test of the function generator. returns "+0" (pass) or "+1" (fail). if the test fails, one or more error messages will be generated to provide additional information on the failure. </e><e> *tst? *tst? perform a complete self-test of the function generator. returns "+0" (pass) or "+1" (fail). if the test fails, one or more error messages will be generated to provide additional information on the failure. use the syst:err? command to read the error queue (see page 213). </e></d><d><e>*wai</e><e>*wai</e><e>wait for all pending operations to complete before executing any additional commands over the interface. </e><e> *wai *wai wait for all pending operations to complete before executing any additional commands over the interface. used in the triggered sweep and triggered burst modes only. </e></d></a><a name="Transport"><d><e>defaulttimeout</e><e>defaulttimeout</e><e>defaulttimeout specifies the timeout, in milliseconds, for queries issued to this instrument.

a timeout will occur if there is no response from the instrument within the specified duration.

a value of -1 is used to specify no timeout.
</e></d><d><e>errorquerybehavior</e><e>errorquerybehavior</e><e>errorquerybehavior specifies whether command expert automatically retrieves errors from the instrument's scpi error queue by sending syst:err? queries. command expert displays errors retrieved from the scpi error queue in the results column of the sequence pane.

the supported values for errorquerybehavior are:

     none - syst:err? queries will not be automatically sent.

     errorquerypercommand - a :syst:err? query will be sent after each command, and after each query that times out.

     errorquerypercommandandquery - a :syst:err? query will be sent after each command and after each query.
</e></d><d><e>opcbehavior</e><e>opcbehavior</e><e>opcbehavior specifies whether command expert automatically sends a *opc? query after each command.

the supported values for opcbehavior are:

     none - *opc? queries will not be automatically sent to the instrument.

     opcpercommand - an *opc? query will be sent after every command, and no further commands or queries will be sent until the *opc? returns.
</e></d><d><e>omitdefaultkeywords</e><e>omitdefaultkeywords</e><e>omitdefaultkeywords specifies whether to omit default keywords when sending scpi commands.</e></d><d><e>useshortformkeywords</e><e>useshortformkeywords</e><e>useshortformkeywords specifies whether to use the short form of spci keywords when sending scpi commands.</e></d><d><e>ignorederrors</e><e>ignorederrors</e><e>ignorederrors is a string that specifies the list of scpi error codes that will be ignored during execution.

for example, setting ignorederrors to the string "1:100,301:400" specifies that error codes from 1 to 100 inclusive and 301 to 400 inclusive will be ignored.

when setting ignorederrors, the input string should contain a list of zero or more items, separated by commas. each item is either an integer, or a range of the form x:y where x and y are integers. the integers can be positive, 0, or negative.</e></d><d><e>addtoignorederrors</e><e>addtoignorederrors</e><e>addtoignorederrors adds the specified error codes to ignorederrors (the list of scpi error codes ignored during execution).

for example, invoking addtoignorederrors with the string "1:100,301:400" will add the error codes from 1 to 100 inclusive and 301 to 400 inclusive.

when invoking addtoignorederrors, the input string should contain a list of zero or more items, separated by commas. each item is either an integer, or a range of the form x:y where x and y are integers. the integers can be positive, 0, or negative.</e></d><d><e>removefromignorederrors</e><e>removefromignorederrors</e><e>removefromignorederrors removes the specified error codes from ignorederrors (the list of scpi error codes ignored during execution).

for example, invoking removefromignorederrors with the string "1:100,301:400" will remove the error codes from 1 to 100 inclusive and 301 to 400 inclusive.

when invoking removefromignorederrors, the input string should contain a list of zero or more items, separated by commas. each item is either an integer, or a range of the form x:y where x and y are integers. the integers can be positive, 0, or negative.</e></d><d><e>command</e><e>command</e><e>sends a scpi command that does not return a response from the instrument.  use the transport resource query if the instrument returns a response.</e></d><d><e>query</e><e>query</e><e>sends a scpi query string directly to the instrument and returns the result.</e></d><d><e>commandbatching</e><e>commandbatching</e><e>commandbatching specifies scpi command batching behavior.
</e></d><d><e>sendbatchedcommands</e><e>sendbatchedcommands</e><e>sendbatchedcommands sends any commands that are currently batched.
</e></d><d><e>array/setarrayelement/setarrayelement_double</e><e>setarrayelement_double</e><e>set a value to the element at the specified position in the one-dimensional array.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/setarrayelement/setarrayelement_int</e><e>setarrayelement_int</e><e>set a value to the element at the specified position in the one-dimensional array.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/setarrayelement/setarrayelement_byte</e><e>setarrayelement_byte</e><e>set a value to the element at the specified position in the one-dimensional array.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/setarrayelement/setarrayelement_string</e><e>setarrayelement_string</e><e>set a value to the element at the specified position in the one-dimensional array.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/getarrayelement/getarrayelement_double</e><e>getarrayelement_double</e><e>get an element of one-dimensional array at the specified index.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/getarrayelement/getarrayelement_int</e><e>getarrayelement_int</e><e>get an element of one-dimensional array at the specified index.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/getarrayelement/getarrayelement_byte</e><e>getarrayelement_byte</e><e>get an element of one-dimensional array at the specified index.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/getarrayelement/getarrayelement_string</e><e>getarrayelement_string</e><e>get an element of one-dimensional array at the specified index.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>terminator/getwriteterminator</e><e>getwriteterminator</e><e>get the write terminating characters of scpi</e></d><d><e>terminator/setwriteterminator</e><e>setwriteterminator</e><e>change the write terminating characters of scpi</e></d><d><e>terminator/getreadterminator</e><e>getreadterminator</e><e>get the read terminating characters of scpi</e></d><d><e>terminator/setreadterminator</e><e>setreadterminator</e><e>change the read terminating characters of scpi</e></d><d><e>convert/stringtoint</e><e>stringtoint</e><e>convert string into integer</e></d><d><e>convert/stringtodouble</e><e>stringtodouble</e><e>convert string into double</e></d><d><e>convert/stringtobyte</e><e>stringtobyte</e><e>convert string into byte</e></d><d><e>convert/inttostring</e><e>inttostring</e><e>convert integer into string</e></d><d><e>convert/inttodouble</e><e>inttodouble</e><e>convert integer into double</e></d><d><e>convert/inttobyte</e><e>inttobyte</e><e>convert integer into byte</e></d><d><e>convert/doubletobyte</e><e>doubletobyte</e><e>convert double into byte</e></d><d><e>convert/doubletoint</e><e>doubletoint</e><e>convert double into int</e></d><d><e>convert/doubletostring</e><e>doubletostring</e><e>convert double into string</e></d><d><e>convert/bytetostring</e><e>bytetostring</e><e>convert byte into string</e></d><d><e>convert/bytetodouble</e><e>bytetodouble</e><e>convert byte into double</e></d><d><e>convert/bytetoint</e><e>bytetoint</e><e>convert byte into int</e></d></a></HierarchySearchSerializer>