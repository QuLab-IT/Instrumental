<?xml version="1.0" encoding="utf-8"?><HierarchySearchSerializer xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:xsd="http://www.w3.org/2001/XMLSchema"><a name="SCPI"><d><e>abort</e><e>abort</e><e>halts a sequence, list, sweep, or burst, even an infinite burst. </e><e> abort abort halts a sequence, list, sweep, or burst, even an infinite burst. also causes trigger subsystem to return to idle state. if initiate:continuous is on, instrument immediately proceeds to wait-for-trigger state. parameter typical return (none) (none) halt the items listed above:abor halts any triggered action (triggered list, triggered sweep, triggered burst, triggered arbitrary waveform playback). abort has no effect when instrument is in normal or modulated modes, except for sequenced arbitrary waveforms, lists, bursts, and sweeps. if instrument is running a sequence, list, burst, or sweep, abort restarts the stopped item with the current init and trigger conditions. when abort occurs in list mode, the frequency goes back to the "normal" mode frequency until the first trigger occurs. after the first trigger, the first frequency in the list will be used. if abort executed during sweep, sweep returns to starting sweep frequency. abort always applies to both channels in a two-channel instrument. </e></d><d><e>calibration:all</e><e>all</e><e>performs a calibration using the calibration value (calibration:value). </e><e>calibration[:all]? performs a calibration using the calibration value (calibration:value). the instrument must be unlocked (calibration_secure_state off,&lt;code&gt;) to calibrate. parameter typical return (none) +0 (pass) or +1 (fail) calibrate using the current value:cal? calibration:setup should always precede the calibration? query. increments the instrument�s calibration count (calibration:count?). modifies the volatile version of the calibration constants. use calibration:store to save these constants in nonvolatile memory at end of calibration. </e></d><d><e>calibration:count</e><e>count</e><e>returns the number of calibrations performed.</e><e>calibration:count? returns the number of calibrations performed. read and record the initial count when you receive your instrument from the factory. parameter typical return (none) +117 return the calibration count:cal:coun? because the value increments for each calibration point (each calibration:all?), a complete calibration adds many counts. can display count regardless of whether instrument is secured. this setting is non-volatile; it will not be changed by power cycling or *rst. </e></d><d><e>calibration:secure:code</e><e>code</e><e>sets the security code to prevent unauthorized calibrations.</e><e>calibration:secure:code &lt;new_code&gt; sets the security code to prevent unauthorized calibrations. parameter typical return unquoted string up to 12 charactersmust start with letter (a-z)may contain letters, numbers (0-9) and underscores (none) set new security code:cal:sec:code my_code_272 when shipped from the factory, the instrument is secured, with the security code set to at33520a for the 33521a and 33522a, or at33500 for other 33500 series instruments. to change code: unsecure calibration memory with old code, then set new code. if you forget the security code, see unsecure instrument without security code. this setting is non-volatile; it will not be changed by power cycling or *rst. </e></d><d><e>calibration:secure:state</e><e>state</e><e>unsecures or secures the instrument for calibration. </e><e>calibration:secure:state {on|1|off|0} [,&lt;code&gt;]calibration:secure:state? unsecures or secures the instrument for calibration. to calibrate, you must unsecure the instrument with the code (calibration:secure:code). parameter typical return {on|1|off|0}, default on&lt;code&gt; is unquoted string up to 12 characters 0 (off) or 1 (on) unsecure calibration:cal:sec:stat off,my_code_272secure calibration:cal:sec:stat on the &lt;code&gt; is optional to secure the instrument, but must be correct if provided. front panel and remote interface calibration use same code. if you secure the instrument from one interface, use the same code to unsecure it from the other interface. this setting is non-volatile; it will not be changed by power cycling or *rst. </e></d><d><e>calibration:setup</e><e>setup</e><e>configures the calibration step (default 1) to be performed. </e><e>calibration:setup &lt;step&gt;calibration:setup? configures the calibration step (default 1) to be performed. the instrument must be unlocked (calibration_secure_state off,&lt;code&gt;) to calibrate. see calibration security for details. parameter typical return whole number, default 1 +16 prepare for calibration step 5:cal:set 5 this setting is non-volatile; it will not be changed by power cycling or *rst. </e></d><d><e>calibration:string</e><e>string</e><e>stores a message of up to 40 characters in calibration memory.</e><e>calibration:string "&lt;string&gt;"calibration:string? stores a message of up to 40 characters in calibration memory. common messages include last calibration date, calibration due date, or contact information for calibration department. the instrument must be unlocked (calibration_secure_state off,&lt;code&gt;) to store this string. parameter typical return quoted string up to 40 charactersmay contain letters, numbers, spaces, and other common characters. "last cal oct 31 2011, due oct 31 2012"(if no string stored, returns "") cal:str "for cal help, call joe at ext 1234" may be stored only from remote interface, with instrument unsecured (calibration:secure:state off). you can read the message from the front-panel or remote interface, regardless of whether the instrument is secured. storing a calibration message overwrites the previous message. this setting is non-volatile; it will not be changed by power cycling or *rst. </e></d><d><e>calibration:value</e><e>value</e><e>specifies the value of the known calibration signal.</e><e>calibration:value &lt;value&gt;calibration:value? specifies the value of the known calibration signal. parameter typical return numeric, default 0.0 +1.72300000e+001 specify calibration value 0.0237:cal:val 2.37e-2 this setting is non-volatile; it will not be changed by power cycling or *rst. </e></d><d><e>display</e><e>display</e><e>disables or enables the front-panel display.</e><e>display {on|1|off|0}display? disables or enables the front-panel display. when disabled, the front-panel display turns black, and all annunciators are disabled. however, the screen remains on. parameter typical return {on|1|off|0}, default on 0 (off) or 1 (on) turn display off:disp off disabling the display improves command execution speed from the remote interface and provides basic security. sending display:text &lt;string&gt; overrides the display state. you can display a message with the display disabled. the display is enabled when power is cycled, or when you return to local (front panel) operation by pressing the front-panel [local] key. </e></d><d><e>display:focus</e><e>focus</e><e>selects the channel displayed "in front" on a two-channel instrument </e><e>display:focus {ch1|ch2} selects the channel that is displayed "in front" on a two-channel instrument. parameter typical return {ch1|ch2}default ch1 ch1 or ch2 bring channel 2 to the front:disp:focus ch2 </e></d><d><e>display:text</e><e>text</e><e>displays a text message on the front-panel display.   </e><e>display:text &lt;string&gt;display:text? displays a text message on the front-panel display. parameter typical return quoted string of up to 40 characters (any character on a standard keyboard), default "". "test running. do not touch." show message on display:disp:text "test in progress..." sending display:text &lt;string&gt; overrides the display state. you can display a message with the display disabled. while a message is displayed, information relating to the current instrument operation is not sent to the front-panel display. the display text is unaffected by *rst. it is cleared at power-on. </e></d><d><e>display:text:clear</e><e>clear</e><e>clears the text message from the front-panel display.</e><e>display:text:clear clears the text message from the front-panel display. parameter typical return (none) (none) clear message on display:disp:text:cle with display on, disp:text:clear returns the display to its normal mode. with display off, disp:text:clear clears the message and the display remains disabled. to enable the display, send dispplay on or press the front-panel [local] key. the display text is unaffected by *rst. it is cleared at power-on. </e></d><d><e>display:unit:arbrate</e><e>arbrate</e><e>specifies whether the rate units for arbitrary waveforms are samples per second, (srate), hz (freq) or seconds (per).</e><e>display:unit:arbrate {srate|frequency|period} specifies whether the rate units for arbitrary waveforms are samples per second, (srate), hz (freq) or seconds (per). parameter typical return {srate|frequency|period}default srate srat, freq, or per set the unit for arbitrary waveforms to seconds:disp:unit:arbr per the frequency and period of an arbitrary waveform refer to the time that it takes to run through the entire waveform once. for example, a waveform of 200 samples running at 1 msa/s would have a period of 0.0002 s and a frequency of 5000 hz. </e></d><d><e>display:unit:pulse</e><e>pulse</e><e>selects the method for specifying pulse duration.</e><e>display:unit:pulse {width|duty} selects the method for specifying pulse duration. you can specify either the width or the duty cycle. parameter typical return {width|duty}default width widt or duty specify pulse width as a percentage (duty cycle):disp:unit:puls duty </e></d><d><e>display:unit:rate</e><e>rate</e><e>specifies whether the rate units for sine, square, ramp, pulse, and triangle waves are hz (freq) or seconds (per).</e><e>display:unit:rate {frequency|period} specifies whether the rate units for sine, square, ramp, pulse, and triangle waves are hz (freq) or seconds (per). parameter typical return {frequency|period}default frequency freq or per set the units to hz:disp:unit:rate freq </e></d><d><e>display:unit:sweep</e><e>sweep</e><e>selects the method for specifying sweep frequency range.</e><e>display:unit:sweep {startstop|centerspan} selects the method for specifying sweep frequency range. you can specify the range as start and stop values or as a span around a center value. parameter typical return {startstop|centerspan}default startstop star or cent the following examples both specify a sweep from 10 to 500 hz:disp:unit:swe starfreq:star 10freq:stop 500disp:unit:swe centfreq:span 490freq:cent 255 to sweep up in frequency, set a positive frequency span; to sweep down, set a negative frequency span. </e></d><d><e>display:unit:voltage</e><e>voltage</e><e>selects the method for specifying voltage ranges.</e><e>display:unit:volt {amplitudeoffset|highlow} selects the method for specifying voltage ranges. you can specify a voltage range as an amplitude and an offset or as high and low values. parameter typical return {amplitudeoffset|highlow}default: amplitudeoffset ampl or high the following examples both specify a waveform voltage from 1 to 4 v:disp:unit:volt highvolt:low 1volt:high 4disp:unit:volt:amplvolt 3volt offs 2.5 </e></d><d><e>display:view</e><e>view</e><e>selects the screen layout.</e><e>display:view {standard|text|graph|dual} selects the screen layout. parameter typical return {standard|text|graph|dual}default standard stan, text, grap, or dual select the large graph display:disp:view grap the standard, text, graph, and dual keywords correspond to the standard view, large text, large graph, and ch1/ch2 softkeys on the [system] &gt; system setup &gt; screen layout menu. </e></d><d><e>format:border</e><e>border</e><e>sets the byte order used in binary data point transfers in the block mode.</e><e> format:border format:border {normal|swapped}format:border? sets the byte order used in binary data point transfers in the block mode. parameter typical return {normal|swapped}, default normal norm or swap set swapped order:form:bord swap normal: most-significant byte (msb) of each data point is first. swapped: least-significant byte (lsb) of each data point is first. most computers use this. </e></d><d><e>hcopy:sdump:data</e><e>data</e><e>returns the front panel display image ("screen shot")</e><e>hcopy:sdump:data? returns the front panel display image ("screen shot") parameter typical return (none) (a definite-length binary block containing the image.)definite-length block data allows any type of device-dependent data to be transmitted as a series of 8-bit binary data bytes. this is particularly useful for transferring large quantities of data or 8-bit extended ascii codes. capture and return the display image:hcop:sdum:data? the image format (png or bmp) is specified by hcopy:sdump:data:format. </e></d><d><e>hcopy:sdump:data:format</e><e>format</e><e>specifies the image format for images returned by hcopy:sdump:data?.</e><e>hcopy:sdump:data:format {png|bmp}hcopy:sdump:data:format? specifies the image format for images returned by hcopy:sdump:data?. parameter typical return {png|bmp}, default png png or bmp set the display image format to bmphcop:sdum:data:form bmp </e></d><d><e>initiate:continuous</e><e>continuous</e><e>specifies whether the trigger system for one channel always returns to the "wait-for-trigger" state (on) or remains in the "idle" state (off), ignoring triggers until initiate:immediate is issued.</e><e>initiate[1|2]:continuous {on|1|off|0}initiate[1|2]:continuous?initiate:continuous:all {on|1|off|0} specifies whether the trigger system for one or both channels (all) always returns to the "wait-for-trigger" state (on) or remains in the "idle" state (off), ignoring triggers until initiate:immediate is issued. parameter typical return {on|1|off|0}, default on 0 (off) or 1 (on) configure both channels for continuous trigger:init:cont:all on once the channel is triggered, it leaves the wait-for-trigger state and enters the "action-in-progress" state (for example, burst-in-progress or sweep-in-progress). the action-in-progress state can be lengthy, and during this state triggers are ignored (will not count against number of triggers specified by trigger[1|2]:count). initiate[1|2][:immediate]</e></d><d><e>initiate:continuous:all</e><e>all</e><e>specifies whether the trigger system for both channels (all) always returns to the "wait-for-trigger" state (on) or remains in the "idle" state (off), ignoring triggers until initiate:immediate is issued.</e><e>initiate[1|2]:continuous {on|1|off|0}initiate[1|2]:continuous?initiate:continuous:all {on|1|off|0} specifies whether the trigger system for one or both channels (all) always returns to the "wait-for-trigger" state (on) or remains in the "idle" state (off), ignoring triggers until initiate:immediate is issued. parameter typical return {on|1|off|0}, default on 0 (off) or 1 (on) configure both channels for continuous trigger:init:cont:all on once the channel is triggered, it leaves the wait-for-trigger state and enters the "action-in-progress" state (for example, burst-in-progress or sweep-in-progress). the action-in-progress state can be lengthy, and during this state triggers are ignored (will not count against number of triggers specified by trigger[1|2]:count). initiate[1|2][:immediate]</e></d><d><e>initiate:immediate</e><e>immediate</e><e>change state of triggering system for both channels (all) from "idle" to "wait-for-trigger" for the number of triggers specified by trigger[1|2]:count.</e><e>initiate[1|2][:immediate]initiate[:immediate]:all change state of triggering system for both channels (all) from "idle" to "wait-for-trigger" for the number of triggers specified by trigger[1|2]:count. once the channel is triggered, it leaves the wait-for-trigger state and enters the "action-in-progress" state (for example, burst-in-progress or sweep-in-progress). the action-in-progress state can be lengthy, and during this state triggers are ignored (will not count against number of triggers specified by trigger[1|2]:count). parameter typical return (none) (none) change both channels to the wait-for-trigger state:init:imm:all the trigger system is armed by initiate[:immediate]. once the trigger count is satisfied, the trigger system returns to idle state and ignores further triggers. the triggered function will be left in whatever state is achieved with the count of triggers. rearming the trigger system with another initiate[:immediate] allows further triggers to apply. use abort to return instrument to idle. if the specified channel has init:cont set on, initiate[1|2]:immediate and init[:immediate]:all have no effect on the trigger system and error -213 will be generated. </e></d><d><e>initiate:immediate:all</e><e>all</e><e>change state of triggering system for both channels (all) from "idle" to "wait-for-trigger" for the number of triggers specified by trigger[1|2]:count</e><e>initiate[1|2][:immediate]initiate[:immediate]:all change state of triggering system for both channels (all) from "idle" to "wait-for-trigger" for the number of triggers specified by trigger[1|2]:count. once the channel is triggered, it leaves the wait-for-trigger state and enters the "action-in-progress" state (for example, burst-in-progress or sweep-in-progress). the action-in-progress state can be lengthy, and during this state triggers are ignored (will not count against number of triggers specified by trigger[1|2]:count). parameter typical return (none) (none) change both channels to the wait-for-trigger state:init:imm:all the trigger system is armed by initiate[:immediate]. once the trigger count is satisfied, the trigger system returns to idle state and ignores further triggers. the triggered function will be left in whatever state is achieved with the count of triggers. rearming the trigger system with another initiate[:immediate] allows further triggers to apply. use abort to return instrument to idle. if the specified channel has init:cont set on, initiate[1|2]:immediate and init[:immediate]:all have no effect on the trigger system and error -213 will be generated. </e></d><d><e>lxi:identify:state</e><e>state</e><e>turns the lxi identify indicator on the display on or off.</e><e> lxi subsystem lxi subsystem the lxi subsystem supports lan extensions for instrumentation (lxi) functionality. lxi:identify[:state] {on|1|off|0}lxi:identify[:state]? turns the lxi identify indicator on the display on or off. parameter typical return {on|1|off|0} 0 (off) or 1 (on) turn on the lxi identify indicator:lxi:iden on the lxi identify indicator helps you identify the device associated with the lan address. a *rst turns lxi identify indicator off. pressing the local key turns off the lxi identify indicator. </e></d><d><e>lxi:mdns:enable</e><e>enable</e><e>disables or enables the multicast domain name system (mdns).</e><e>lxi:mdns:enable {on|1|off|0}lxi:mdns:enable? disables or enables the multicast domain name system (mdns). parameter typical return {on|1|off|0}, default on 0 (off) or 1 (on) turn mdns on:lxi:mdsn:enab on setting is enabled after system:security:immediate, *rst, power-on, or lan reset. </e></d><d><e>lxi:mdns:hname:resolved</e><e>resolved</e><e>returns the resolved (unique) mdns hostname in the form &lt;mdns hostname&gt;-n. </e><e>lxi:mdns:hname[:resolved]? returns the resolved (unique) mdns hostname in the form &lt;mdns hostname&gt;-n. the n is an integer appended if necessary to make the name unique. the desired name may be truncated, if necessary, to make room for the appended integer. parameter typical return (none) "a-335xxx-00107", where xxx is the last three characters of the model number, and 00107 is the last five digits of the serial number. return the resolved mdns hostname:lxi:mdns:hname:resolved? </e></d><d><e>lxi:mdns:sname:desired</e><e>desired</e><e>sets the desired mdns service name.</e><e>lxi:mdns:sname:desired &lt;name&gt;lxi:mdns:sname:desired? sets the desired mdns service name. parameter typical return quoted string of up to 63 characters, default is agilent &lt;model_name&gt; arbitrary waveform generator - &lt;serial_number&gt;". "agilent 335xxx arbitrary waveform generator - 99999", where xxx is the last three characters of the model number, and 99999 is the last five digits of the serial number. set the mdns service name to "waveform generator":lxi:mdns:snam:des "waveform generator" this setting is non-volatile; it will not be changed by power cycling or *rst. setting is set to default value after system:security:immediate. </e></d><d><e>lxi:mdns:sname:resolved</e><e>resolved</e><e>returns the resolved (unique) mdns service name in the form &lt;desired mdns service name&gt;(n). </e><e>lxi:mdns:sname[:resolved]? returns the resolved (unique) mdns service name in the form &lt;desired mdns service name&gt;(n). the n is an integer appended if necessary to make the name unique. the desired name may be truncated, if necessary, to make room for the appended integer. parameter typical return (none) "agilent 335xxx arbitrary waveform generator - 00309", where xxx is the last three characters of the model number, and 00309 is the last five digits of the serial number. return resolved mdns service name:lxi:mdns:sname:resolved? the resolved mdns service name will be the desired service name (lxi:mdns:sname:desired), possibly with "(n)" appended, where n is an integer, only if if is necessary to make the name unique. </e></d><d><e>lxi:reset</e><e>reset</e><e>resets lan settings to a known operating state, beginning with dhcp. </e><e>lxi:reset resets lan settings to a known operating state, beginning with dhcp. if dhcp fails, it uses autoip. it also clears the webui password, if set. parameter typical return (none) (none) reset the lan settings:lxi:res depending on your network, the lan interface may take several seconds to restart after this command is sent. if the lan interface or specific lan services (vxi-11, sockets, and so on) have been disabled by system:communicate:enable, you must separately re-enable the interface or services and cycle power on the instrument for the lan to be operational. </e></d><d><e>lxi:restart</e><e>restart</e><e>restarts the lan with the current settings as specified by the system:comm:lan commands. </e><e>lxi:restart restarts the lan with the current settings as specified by the system:comm:lan commands. parameter typical return (none) (none) restart the lan interface:lxi:rest depending on your network, the lan interface may take several seconds to restart after this command is sent. if the lan interface or specific lan services (vxi-11, sockets, and so on) have been disabled by system:communicate:enable, you must separately re-enable the interface or services and cycle power on the instrument for the lan to be operational. </e></d><d><e>memory:nstates</e><e>nstates</e><e>returns the total number of memory locations available for state storage </e><e>memory:nstates? returns the total number of memory locations available for state storage (always +5, including memory location 0). parameter typical return (none) +5 return number of state storage locations:mem:nst? </e></d><d><e>memory:state:catalog</e><e>catalog</e><e>returns the names assigned to locations 0 through 4.</e><e>memory:state:catalog? returns the names assigned to locations 0 through 4. parameter typical return (none) "auto_recall","state_1","state_2","state_3","state_4" return location names:mem:stat:cat? default names are "auto_recall", "state_1", "state_2", "state_3", and "state_4". you can name location 0, but the name is overwritten when power is cycled and a new power-down state is stored there. </e></d><d><e>memory:state:delete</e><e>delete</e><e>deletes a state storage location.</e><e>memory:state:delete {0|1|2|3|4|} deletes a state storage location. parameter typical return {0|1|2|3|4|} (none) delete the contents of storage location 1:mem:stat:del 1 default names are "auto_recall", "state_1", "state_2", "state_3", and "state_4". although you may delete the state in location 0, it will be restored to its factory default state, and state name ("auto_recall") at the next power up. attempting to recall a state from an empty location generates an error. </e></d><d><e>memory:state:name</e><e>name</e><e>names a storage location. </e><e>memory:state:name {0|1|2|3|4} [,&lt;name&gt;]memory:state:name? {0|1|2|3|4} names a storage location. parameter typical return an unquoted string of up to 12 characters. the first character must be a letter (a-z).others can be letters, numbers (0-9), or underscores ("_").if name omitted, factory default name is used. test_rack_1 rename location 1:mem:stat:name 1,test_rack_1 default names are "auto_recall", "state_1", "state_2", "state_3", and "state_4". you can name location 0, but the name is overwritten when power is cycled and a new power-down state is stored there. may assign same name to different locations. deleting a storage location's contents (memory:state:delete) resets associated name to factory default ("auto_recall", "state_1", "state_2", "state_3", or "state_4"). state names are unaffected by *rst. </e></d><d><e>memory:state:recall:auto</e><e>auto</e><e>disables or enables automatic recall of instrument state in storage location "0" at power on.</e><e>memory:state:recall:auto {on|1|off|0}memory:state:recall:auto? disables or enables automatic recall of instrument state in storage location "0" at power on. parameter typical return {on|1|off|0}, default on 0 (off) or 1 (on) disable automatic recall of power-down state:mem:stat:rec:auto off off is equivalent to factory reset (*rst) on power-up. </e></d><d><e>memory:state:valid</e><e>valid</e><e>indicates whether a valid state is currently stored in a storage location.</e><e>memory:state:valid? {0|1|2|3|4} indicates whether a valid state is currently stored in a storage location. parameter typical return {0|1|2|3|4} 0 (no valid state stored) or 1 (valid state stored) return state of memory location 3:mem:stat:val 3? use this before sending *sav to avoid accidentally overwriting a state. </e></d><d><e>mmemory:catalog:all</e><e>all</e><e>returns a list of all files in the current mass storage directory, includin
g internal storage and the usb drive.</e><e>mmemory:catalog[:all]? [&lt;folder&gt;] returns a list of all files in the current mass storage directory, including internal storage and the usb drive. parameter typical return any valid folder name; defaults to folder selected by mmemory:cdirectory +1000000000,+327168572,"command.exe,,375808","mysetup.sta,stat,8192","mywave.csv,asc,11265" list all files in the folder mydata on the front panel usb storage device:mmem:cat? "usb:\mydata" the catalog takes the following form:&lt;mem_used&gt;,&lt;mem_free&gt;{,"&lt;file listing&gt;"}the instrument returns two numeric values and a string for each file in the folder. the first numeric value indicates the number of bytes of storage used on the drive. the second indicates the number of bytes of storage available. each &lt;file listing&gt; is in the format "&lt;file_name&gt;,&lt;file_type&gt;,&lt;file_size&gt;" (the quotation marks are also returned), where &lt;file_name&gt; is the name of the file including file extension, if any; &lt;file_type&gt; is either stat for state (.sta) files, asc for data (.csv) files, fold for folders, or null for all other file extensions; &lt;file_size&gt; is the size of the file in bytes. if no files exist, only &lt;mem_used&gt;,&lt;mem_free&gt; is returned. because the instrument uses a small amount of space in the flash file system for internal use, the &lt;mem_used&gt; value will not be zero even if no user files exist on the drive. </e></d><d><e>mmemory:catalog:data:arbitrary</e><e>arbitrary</e><e>returns a list of all the arbitrary sequence (.seq) files and folders, as well as arbitrary waveform (.arb/.barb) files in a folder.</e><e>mmemory:catalog:data:arbitrary? [&lt;folder&gt;] returns a list of all the arbitrary sequence (.seq) files and folders, as well as arbitrary waveform (.arb/.barb) files in a folder. parameter typical return any valid folder name; defaults to folder selected by mmemory:cdirectory (see below) the following query lists all arbitrary waveform and sequence files at the root level in internal memory. mmem:cat:data:arbitrary? "int:\" typical response: +1000000000,+327168572,"testsequence1.seq,na,223","testsequence1.seq,segment1.arb,1469"","testsequence1.seq,segment2.arb,2356"","testsequence1.seq,segment3.arb,4399"","na,example.arb,2215" the instrument returns two numeric values and a string for each .seq and .arb/.barb file in the selected folder. the first numeric value indicates the number of bytes of storage used on the drive. the second indicates the number of bytes of storage available. each &lt;file listing&gt; is in the format "&lt;filename&gt;,&lt;file_type&gt;,&lt;file_size&gt;" (the quotation marks are also returned), where &lt;filename&gt; is the name of the file including file extension, if any; &lt;file_type&gt; is fold for folders, arb for arb segments, or sequence for arb sequence files; &lt;file_size&gt; is the size of the file in bytes. if no .seq, .arb, or .barb files exist, only &lt;mem_used&gt;,&lt;mem_free&gt; is returned. because the instrument uses a small amount of space in the flash file system for internal use, the &lt;mem_used&gt; value will not be zero even if no user files exist on the drive. </e></d><d><e>mmemory:catalog:state</e><e>state</e><e>lists all state files (.sta file extension) in a folder. </e><e>mmemory:catalog:state? [&lt;folder&gt;] lists all state files (.sta file extension) in a folder. parameter typical return any valid folder name; defaults to folder selected by mmemory:cdirectory +1000000000,+327168572,"mysetup.sta,stat,8192" list all state files in mydata folder on front panel usb drive.mmem:cat:stat? "usb:\mydata" format for returned catalog: &lt;mem_used&gt;,&lt;mem_free&gt;{,"&lt;file listing&gt;"} the instrument returns two numeric values and a string for each state file in the selected folder. the first numeric value indicates the number of bytes of storage used on the drive. the second indicates the number of bytes of storage available. each &lt;file listing&gt; is in the format "&lt;file_name&gt;,&lt;file_type&gt;,&lt;file_size&gt;" (the quotes are also returned), where &lt;file_name&gt; is the name of the file including file extension, if any; &lt;file_type&gt; is stat for state (.sta) files; &lt;file_size&gt; is the size of the file in bytes. if no state files exist, only &lt;mem_used&gt;,&lt;mem_free&gt; is returned. because the instrument uses a small amount of space in the flash file system for internal use, the &lt;mem_used&gt; value will not be zero even if no user files exist on the drive. </e></d><d><e>mmemory:cdirectory</e><e>cdirectory</e><e>mmemory:cdirectory selects the default folder for the mmemory subsystem commands. </e><e>mmemory:cdirectory &lt;folder&gt;mmemory:mdirectory &lt;folder&gt;mmemory:rdirectory &lt;folder&gt; mmemory:cdirectory selects the default folder for the mmemory subsystem commands. this folder must exist and is used when folder or file names do not include a drive and folder name. mmemory:mdirectory makes a new directory (folder) on the mass storage medium. mmemory:rdirectory removes a directory (folder) on the mass storage medium. parameter typical return any directory name, including the mass storage unit specifier, default int:\ "int:\" make and remove a new directory named "test" on the internal mass memory system:mmem:mdir "test"mmem:rdir "test" return the default folder for mmemory subsystem commands:mmem:cdir? the instrument resets the default folder to the internal flash file system root directory ("int:\") after *rst. you can only remove an empty folder (no files). otherwise, the instrument generates a "directory not empty" error. </e></d><d><e>mmemory:copy</e><e>copy</e><e>copies &lt;file1&gt; to &lt;file2&gt;. </e><e>mmemory:copy &lt;file1&gt;,&lt;file2&gt; copies &lt;file1&gt; to &lt;file2&gt;. the file names must include any file extension.. parameter typical return both files can be any valid file name (none) copy the state file myfreqmeas.sta from the root directory to the folder "backup" on the internal flash file system.mmem:copy "int:\mysetup.sta","int:\backup" to copy a file to a file of the same name in a different folder, you can specify just the &lt;drive&gt; and/or &lt;path&gt; for &lt;destination&gt;. </e></d><d><e>mmemory:copy:sequence</e><e>sequence</e><e>copies a sequence from &lt;source&gt; to &lt;destination&gt;. </e><e>mmemory:copy:sequence &lt;source&gt;,&lt;destination&gt; copies a sequence from &lt;source&gt; to &lt;destination&gt;. the file names must include any file extension. use the extension .seq for text format. parameter typical return &lt;source&gt; and &lt;destination&gt; may be any valid sequence file name. (none) copy the sequence file mysequence.seq and all associated segment files specified in the sequence file from internal drive to the folder "backup" on internal storage.mmem:copy:seq "int:\mysequence.seq","int:\backup" the format for &lt;source&gt; and &lt;destination&gt; is "[[&lt;drive&gt;:]&lt;path&gt;]&lt;file_name&gt;", where &lt;drive&gt; can be internal or usb, and &lt;path&gt; is a file path. internal specifies the internal flash file system.usb specifies a front panel usb storage device.e. if &lt;drive&gt; is specified, &lt;path&gt; is interpreted as an absolute path. absolute paths begin with "\" or "/" and start at the root folder of &lt;drive&gt;. if &lt;drive&gt; is omitted, &lt;path&gt; is relative to the folder specified by mmemory:cdirectory. relative paths must not begin with "\" or "/". folder and file names cannot contain the following characters: \ / : * ? " &lt; &gt; | the combination of folder and file name cannot exceed 240 characters. the source file and folder and the destination folder must exist and cannot be marked hidden or system. if the destination file exists, it is overwritten, unless marked as hidden or system. to copy a sequence file to a sequence file of the same name in a different folder, you can specify just the &lt;drive&gt; and/or &lt;path&gt; for &lt;destination&gt;. </e></d><d><e>mmemory:delete</e><e>delete</e><e>deletes a file. </e><e>mmemory:delete &lt;file&gt; deletes a file. to delete a folder, use mmemory:rdirectory. parameter typical return any valid file name, including file extension. (none) delete the indicated file from the root directory of the internal flash file system:mmem:del "int:\mysetup.sta" </e></d><d><e>mmemory:download:data</e><e>data</e><e>downloads data from the host computer to a file in the instrument.</e><e>mmemory:download:data &lt;binary_block&gt; downloads data from the host computer to a file in the instrument. the filename must have been previously specified by mmemory:download:fname. the data in &lt;binary_block&gt; is written to the select file, and any data previously stored in the file is lost. parameter typical return any ieee-488 definite or indefinite block (none) writes the word "hello" to the file "\myfile" on internal storage.mmem:down:fnam "int:\myfile"mmem:down:data #15hello </e></d><d><e>mmemory:download:fname</e><e>fname</e><e>creates or opens the specified filename prior to writing data to that file with mmemory:download:data.</e><e>mmemory:download:fname &lt;filename&gt; creates or opens the specified filename prior to writing data to that file with mmemory:download:data. parameter typical return any valid file name (none) write the word "hello" to the file "\myfile" on the internal flash file system:mmem:down:fnam "int:\myfile"mmem:down:data #15hello </e></d><d><e>mmemory:load:all</e><e>all</e><e>loads a complete instrument setup, using a named file on the mass storage.</e><e>mmemory:load:all &lt;filename&gt;mmemory:store:all &lt;filename&gt; loads or saves a complete instrument setup, using a named file on the mass storage. parameter typical return any valid file name on current mass storage directory (none) store instrument setup to file named "completesetup.all" on internal storage:mmem:stor:all "int:\completesetup.all" load a complete instrument setup from the file in internal mass memory. mmem:load:all "int:\completesetup.all" these commands allow you to duplicate instrument conditions from some previous time. this command loads the current instrument setup (such as is used by *sav and *rcl). instrument setup files used by these commands contain much more than the state files used by *sav and *rcl. they also contain stored states and arbitrary waveforms, gpib and lan parameters, number format, beep on/off, display options, and help language. if the destination file exists, it is overwritten, unless marked as hidden or system. </e></d><d><e>mmemory:load:data</e><e>data</e><e>loads the specified arb segment(.arb/.barb) or arb sequence (.seq) file in internal or usb memory into volatile memory for the specified channel.</e><e>mmemory:load:data[1|2] &lt;filename&gt; loads the specified arb segment(.arb/.barb) or arb sequence (.seq) file in internal or usb memory into volatile memory for the specified channel. parameter typical return any valid file name, as described below. (none) load an arbitrary waveform segment from the internal drive into volatile memory for channel 1 and selects it for use.mmem:load:data "int:\builtin\haversine.arb"func:arb "int:\builtin\haversine.arb" if a sequence file (.seq) is specified, all the arbitrary waveforms defined in the file are loaded. if the waveform referenced by &lt;filename&gt; has already been loaded, the instrument will generate error number +786, "specified arb waveform already exists". deleting an existing waveform requires clearing the waveform non-volatile memory with data:volatile:clear. </e></d><d><e>mmemory:load:list</e><e>list</e><e>loads a frequency list file (.lst).</e><e>mmemory:load:list[1|2] &lt;filename&gt;mmemory:store:list[1|2] &lt;filename&gt; loads or stores a frequency list file (.lst). parameter typical return any valid file name on the mass memory device (none) store the current frequency list to a list file on internal storage:mmem:stor:list "int:\freqlist.lst" load a list file on the internal storage mass memory system (file named freqlist.lst).mmem:load:list "int:\freqlist.lst" a frequency list controls frequency in freq:mode list, rapidly changing to the next frequency in the list when a trigger event is received. a frequency list file contains a comma-separated sequence of ascii numbers, with the first number representing the number of frequencies in the list: 3, 100.000000, 1000.000000, 550.000000 if the destination file exists, it is overwritten, unless marked as hidden or system. mmemory:load:state &lt;filename&gt;</e></d><d><e>mmemory:load:state</e><e>state</e><e>stores the current instrument state to a state file. </e><e>mmemory:load:state &lt;filename&gt;mmemory:store:state &lt;filename&gt; stores the current instrument state to a state file. the file name optionally includes the folder name and the .sta file extension. parameter typical return any valid file name on the current directory (none) store the current instrument state to the state file myfreqmeas.sta in the root directory of the internal flash file system.mmem:stor:stat "int:\mysetup"load the instrument state from mysetup.sta in the root directory of the internal storage.mmem:load:stat "int:\mysetup.sta" </e></d><d><e>mmemory:mdirectory</e><e>mdirectory</e><e>mmemory:mdirectory makes a new directory (folder) on the mass storage medium.</e><e>mmemory:mdirectory &lt;folder&gt;mmemory:rdirectory &lt;folder&gt; mmemory:cdirectory selects the default folder for the mmemory subsystem commands. this folder must exist and is used when folder or file names do not include a drive and folder name. mmemory:mdirectory makes a new directory (folder) on the mass storage medium. mmemory:rdirectory removes a directory (folder) on the mass storage medium. parameter typical return any directory name, including the mass storage unit specifier, default int:\ "int:\" make and remove a new directory named "test" on the internal mass memory system:mmem:mdir "test"mmem:rdir "test" return the default folder for mmemory subsystem commands:mmem:cdir? the instrument resets the default folder to the internal flash file system root directory ("int:\") after *rst. you can only remove an empty folder (no files). otherwise, the instrument generates a "directory not empty" error. </e></d><d><e>mmemory:move</e><e>move</e><e>moves and/or renames &lt;file1&gt; to &lt;file2&gt;. </e><e>mmemory:move &lt;file1&gt;,&lt;file2&gt; moves and/or renames &lt;file1&gt; to &lt;file2&gt;. the file names must include the file extension. parameter typical return both files may be any valid file name (none) move the state file mysetup.sta from the currently selected default directory to the folder "backup" on the internal flash file system;mmem:move "mysetup.sta","int:\backup" rename the arbitrary waveform arbmonday on the usb drive to the name arbtuesday.mmem:move "usb:\arbmonday", "usb:\arbtuesday" to simply rename a file, specify the same folder for &lt;file1&gt; and &lt;file2&gt;. to move a file to a file of the same name in a different folder, you can specify just the &lt;drive&gt;:&lt;path&gt; for &lt;file2&gt;. </e></d><d><e>mmemory:rdirectory</e><e>rdirectory</e><e>mmemory:rdirectory removes a directory (folder) on the mass storage medium.</e><e>mmemory:rdirectory &lt;folder&gt; mmemory:cdirectory selects the default folder for the mmemory subsystem commands. this folder must exist and is used when folder or file names do not include a drive and folder name. mmemory:mdirectory makes a new directory (folder) on the mass storage medium. mmemory:rdirectory removes a directory (folder) on the mass storage medium. parameter typical return any directory name, including the mass storage unit specifier, default int:\ "int:\" make and remove a new directory named "test" on the internal mass memory system:mmem:mdir "test"mmem:rdir "test" return the default folder for mmemory subsystem commands:mmem:cdir? the instrument resets the default folder to the internal flash file system root directory ("int:\") after *rst. you can only remove an empty folder (no files). otherwise, the instrument generates a "directory not empty" error. </e></d><d><e>mmemory:store:all</e><e>all</e><e>loads or saves a complete instrument setup, using a named file on the mass storage.</e><e>mmemory:store:all &lt;filename&gt; loads or saves a complete instrument setup, using a named file on the mass storage. parameter typical return any valid file name on current mass storage directory (none) store instrument setup to file named "completesetup.all" on internal storage:mmem:stor:all "int:\completesetup.all" load a complete instrument setup from the file in internal mass memory. mmem:load:all "int:\completesetup.all" these commands allow you to duplicate instrument conditions from some previous time. this command loads the current instrument setup (such as is used by *sav and *rcl). instrument setup files used by these commands contain much more than the state files used by *sav and *rcl. they also contain stored states and arbitrary waveforms, gpib and lan parameters, number format, beep on/off, display options, and help language. if the destination file exists, it is overwritten, unless marked as hidden or system. mmemory:load:data[1|2] &lt;filename&gt; loads the specified arb segment(.arb/.barb) or arb sequence (.seq) file in internal or usb memory into volatile memory for the specified channel. parameter typical return any valid file name, as described below. (none) load an arbitrary waveform segment from the internal drive into volatile memory for channel 1 and selects it for use.mmem:load:data "int:\builtin\haversine.arb"func:arb "int:\builtin\haversine.arb" if a sequence file (.seq) is specified, all the arbitrary waveforms defined in the file are loaded. if the waveform referenced by &lt;filename&gt; has already been loaded, the instrument will generate error number +786, "specified arb waveform already exists". deleting an existing waveform requires clearing the waveform non-volatile memory with data:volatile:clear. mmemory:load:list[1|2] &lt;filename&gt;</e></d><d><e>mmemory:store:data</e><e>data</e><e>stores the specified arb segment(.arb/.barb) or arb sequence (.seq) data in the channel specified volatile memory (default, channel 1) in internal or usb memory.</e><e>mmemory:store:data[1|2] &lt;filename&gt; stores the specified arb segment(.arb/.barb) or arb sequence (.seq) data in the channel specified volatile memory (default, channel 1) in internal or usb memory. parameter typical return any valid file name (none) store an arbitrary sequence loaded in volatile memory on channel 1 to the internal drive. mmem:stor:data "int:\sequence1.seq" when you store an arbitrary waveform segment or sequence (mmemory:store:data[1|2]), the instrument's current settings (voltage values, sample rate, filter type, and so on) are stored in the segment or sequence file. when you play the file for the first time with function:arbitrary, these settings are loaded and override the instrument's current settings. if you have manually edited a segment or sequence file such that the instrument settings have been removed, the instrument settings will not be changed when you execute function:arbitrary. if the destination file exists, it is overwritten, unless marked as hidden or system. if an arbitrary waveform sequence file (.seq) is specified, all the arbitrary waveform segment file names associated with the sequence are stored in the file. command will error if the specified arbitrary waveform segment or arbitrary waveform sequence is not found in volatile memory. mmemory:upload? &lt;filename&gt; uploads the contents of a file from the instrument to the host computer. parameter typical return any valid file name ieee 488.2 definite-length block the following command uploads the contents of the state file "myfile.sta" in the root directory of the internal flash file system to the host computer:mmem:upl? "int:\myfile.sta" </e></d><d><e>mmemory:store:list</e><e>list</e><e>loads or stores a frequency list file (.lst).</e><e>mmemory:store:list[1|2] &lt;filename&gt; loads or stores a frequency list file (.lst). parameter typical return any valid file name on the mass memory device (none) store the current frequency list to a list file on internal storage:mmem:stor:list "int:\freqlist.lst" load a list file on the internal storage mass memory system (file named freqlist.lst).mmem:load:list "int:\freqlist.lst" a frequency list controls frequency in freq:mode list, rapidly changing to the next frequency in the list when a trigger event is received. a frequency list file contains a comma-separated sequence of ascii numbers, with the first number representing the number of frequencies in the list: 3, 100.000000, 1000.000000, 550.000000 if the destination file exists, it is overwritten, unless marked as hidden or system. </e></d><d><e>mmemory:store:state</e><e>state</e><e>stores the current instrument state to a state file. </e><e>mmemory:store:state &lt;filename&gt; stores the current instrument state to a state file. the file name optionally includes the folder name and the .sta file extension. parameter typical return any valid file name on the current directory (none) store the current instrument state to the state file myfreqmeas.sta in the root directory of the internal flash file system.mmem:stor:stat "int:\mysetup"load the instrument state from mysetup.sta in the root directory of the internal storage.mmem:load:stat "int:\mysetup.sta" </e></d><d><e>mmemory:upload</e><e>upload</e><e>uploads the contents of a file from the instrument to the host computer.</e><e>mmemory:upload? &lt;filename&gt; uploads the contents of a file from the instrument to the host computer. parameter typical return any valid file name ieee 488.2 definite-length block the following command uploads the contents of the state file "myfile.sta" in the root directory of the internal flash file system to the host computer:mmem:upl? "int:\myfile.sta" </e></d><d><e>output</e><e>output</e><e>enables or disables the front-panel output connector.</e><e>output[1|2] {on|1|off|0}output[1|2]? enables or disables the front-panel output connector. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable output connector for channel 1:outp on when output is enabled, the front-panel channel output key is illuminated. the apply commands override current output setting and enable the channel output connector. if excessive external voltage is applied to the front-panel channel output connector, an error message appears and output is disabled. to re-enable output, remove overload from the output connector and send output on. output changes the state of the channel output connector by switching the output relay, without zeroing output voltage. therefore, output may glitch for about a millisecond until signal stabilizes. minimize glitching by first minimizing amplitude (voltage min) and setting offset to 0 (voltage:offset 0) before changing output state. </e></d><d><e>output:load</e><e>load</e><e>sets expected output termination.</e><e>output[1|2]:load {&lt;ohms&gt;|infinity|minimum|maximum}output[1|2]:load? [{minimum|maximum}] sets expected output termination. should equal the load impedance attached to the output. parameter typical return 1 ω to 10 kω, default 50 ω +5.000000000000000e+02 set output impedance to 300 ω:outp:load 300 set output impedance to "high impedance":outp:load inf the specified value is used for amplitude, offset, and high/low level settings. the instrument has a fixed series output impedance of 50 ω to the front-panel channel connectors. if the actual load impedance differs from the value specified, the displayed amplitude and offset levels will be incorrect. the load impedance setting is simply a convenience to ensure that the displayed voltage matches the expected load. if you change the output termination setting, the displayed output amplitude, offset, and high/low levels are adjusted (with no error generated). if the amplitude is 10 vpp and you change the output termination setting from 50 ω to "high impedance" (output[1|2]:load inf), the displayed amplitude doubles to 20 vpp. changing from "high impedance" to 50 ω halves the displayed amplitude. the output termination setting does not affect the actual output voltage; it only changes the values displayed and queried from the remote interface. actual output voltage depends on the connected load. you cannot specify output amplitude in dbm if output termination is set to high impedance.the units are automatically converted to vpp. see volt:unit for details. you cannot change the output termination setting with voltage limits enabled; the instrument cannot know which output termination settings the voltage limits apply to. to change the output termination setting, disable voltage limits, set the new termination value, adjust voltage limits, and re-enable voltage limits. if inf (high impedance) is selected, the query returns 9.9e+37. </e></d><d><e>output:mode</e><e>mode</e><e>enables (gated) or disables (normal) gating of the output waveform signal on and off using the trigger input.</e><e>output[1|2]:mode {normal|gated}output[1|2]:mode? enables (gated) or disables (normal) gating of the output waveform signal on and off using the trigger input. parameter typical return {normal|gated}, default normal gat or norm enable gated output:outp:mode gat the effect of gating is independent of waveform phase or timing of any sort. when trigger input is asserted, the output signal is generated. when trigger is not asserted, the waveform continues to be generated internally, but it is not routed to channel output connector. gating does not change channel output termination (does not operate output on/off relay). </e></d><d><e>output:polarity</e><e>polarity</e><e>inverts waveform relative to the offset voltage.</e><e>output[1|2]:polarity {normal|inverted}output[1|2]:polarity? inverts waveform relative to the offset voltage. parameter typical return {normal|inverted}, default normal norm or inv set output polarity to inverted:outp:pol inv normal: waveform goes in one direction at the beginning of the cycle; inverted: waveform goes in other. as shown below, the waveform is inverted relative to the offset voltage. the offset voltage remains unchanged when the waveform is inverted. the sync signal associated with an inverted waveform is not inverted. </e></d><d><e>output:sync</e><e>sync</e><e>disables or enables the front-panel sync connector.  </e><e>output:sync {on|1|off|0}output:sync? disables or enables the front-panel sync connector. parameter typical return {on|1|off|0}, default on 0 (off) or 1 (on) disable front panel sync connector:outp:sync off disabling the sync signal reduces output distortion at lower amplitudes. for more details on the sync signal for each waveform function, see sync output signal. when sync is disabled, the output level on the sync connector is a logic "low." inverting a waveform (output[1|2]:polarity inv) does not invert the sync signal. </e></d><d><e>output:sync:mode</e><e>mode</e><e>specifies normal sync behavior (normal), forces sync to follow the carrier waveform (carrier), or indicates marker position (marker).</e><e>output[1|2]:sync:mode {normal|carrier|marker}output[1|2]:sync:mode? specifies normal sync behavior (normal), forces sync to follow the carrier waveform (carrier), or indicates marker position (marker). parameter typical return {normal|carrier|marker}, default normal norm, carr, or mark set output sync mode to carrier:output:sync:mode carr the following table details the command's behavior: &lt;mode&gt; sync behavior conditions normal sync follows envelope of burst signal. when burst is on. sync follows envelope of sweep signal. when sweep is on. sync follows modulating signal. when modulating and modulation source is internal. sync follows func signal. all other conditions carrier sync follows current source:marker:point setting. when burst or sweep is on and func is arb. sync follows func signal while burst is on. when burst is on and func is not arb. sync follows func signal. all other conditions marker sync follows current source:marker:point setting. when in cw mode and func is arb. when modulating, modulation source is internal, and func is arb or &lt;modulation&gt;:int:func is arb. when modulating, modulation source is external, and func is arb. sync follows current source:marker:cycle setting. when burst is on. sync follows current source:marker:frequency setting. when sweep is on. sync follows modulating signal. when modulating, modulation source is external, func is not arb, and int:func is not arb. sync follows func signal. all other conditions </e></d><d><e>output:sync:polarity</e><e>polarity</e><e>sets the desired output polarity of the sync output to trigger external equipment that may require falling or rising edge triggers.</e><e>output[1|2]:sync:polarity {normal|inverted}output[1|2]:sync:polarity? sets the desired output polarity of the sync output to trigger external equipment that may require falling or rising edge triggers. parameter typical return {normal|inverted}, default normal norm or inv set the instrument's output sync connector to normal behavior:outp:sync:pol norm normal: voltage on sync output connector is near zero, and rises when a sync event occurs. voltage stays high (approximately 3.3 v into high impedance connection) until sync signal is de-asserted, when it falls back to near zero. inverted: opposite of normal. the sync signal may be derived from either channel in a two-channel instrument (output:sync:source), and from several operating modes of the sync signal (output:sync:mode). </e></d><d><e>output:sync:source</e><e>source</e><e>sets the source for the sync output connector.</e><e>output:sync:source {ch1|ch2}output:sync:source? sets the source for the sync output connector. parameter typical return {ch1|ch2}, default ch1 ch1 or ch2 set sync source to channel 2:outp :sync:sour ch2 </e></d><d><e>output:trigger</e><e>trigger</e><e>disables or enables the "trigger out" signal for sweep and burst modes.</e><e>output:trigger {on|1|off|0}output:trigger? disables or enables the "trigger out" signal for sweep and burst modes. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable trigger out signal:outp:trig on when enabled, a ttl-compatible square wave with the specified edge direction (output:trigger:slope) is output from the rear-panel ext trig connector at the beginning of the burst or sweep. in triggered burst mode: with trigger[1|2]:source immediate, instrument outputs square wave with 50% duty cycle from the ext trig connector. the waveform period equals the burst period (burst:internal:period). with trigger[1|2]:source external or burst:mode gat, the instrument disables "trigger out." the rear-panel ext trig connector cannot be used for both operations simultaneously (an externally-triggered waveform uses the same connector to trigger sweep or burst). with trigger[1|2]:source bus, the instrument outputs a pulse (&gt;1 �s pulse width) from the ext trig connector at the beginning of each sweep or burst. in frequency sweep mode: with trigger[1|2]:source immediate, the instrument outputs a square wave with a 50% duty cycle (the rising edge is the sweep trigger) from the ext trig connector. waveform period equals to the sweep time (sweep:time). with trigger[1|2]:source external, instrument disables the "trigger out" signal. the rear-panel ext trig connector cannot be used for both operations simultaneously (an externally-triggered sweep uses the same connector to trigger the sweep). with trigger[1|2]:source bus, the instrument outputs a pulse (&gt;1 �s pulse width) from the ext trig connector at the beginning of each sweep or burst. </e></d><d><e>output:trigger:slope</e><e>slope</e><e>selects whether the instrument uses the rising edge or falling edge for the "trigger out" signal.</e><e>output:trigger:slope {positive|negative}output:trigger:slope? selects whether the instrument uses the rising edge or falling edge for the "trigger out" signal. parameter typical return {positive|negative}, default positive pos or neg set trigger slope to negative (falling edge):outp:trig:slop neg positive outputs a rising edge pulse; negative outputs a falling edge pulse. when enabled using output:trigger, a ttl-compatible square wave with the specified edge direction is output from the rear-panel trig out connector at the beginning of a sweep or burst. </e></d><d><e>output:trigger:source</e><e>source</e><e>selects the source channel used by trigger output on a two-channel instrument. </e><e>output:trigger:source {ch1|ch2}output:trigger:source? selects the source channel used by trigger output on a two-channel instrument. the source channel determines what output signal to generate on the trigger out connector. parameter typical return {ch1|ch2}, default ch1 ch1 or ch2 set output trigger source to ch2:outp:trig:sour ch2 in a two-channel instrument, either channel may be source channel for the trigger output, but channel 2 is not valid for dual arbitrary (iq) waveforms. output subsystem </e></d><d><e>source:burst:gate:polarity</e><e>polarity</e><e>selects true-high (normal) or true-low (inverted) logic levels on the rear-panel trig in connector for an externally gated burst.</e><e>[source[1|2]:]burst:gate:polarity {normal|inverted}[source[1|2]:]burst:gate:polarity? selects true-high (normal) or true-low (inverted) logic levels on the rear-panel trig in connector for an externally gated burst. parameter typical return {normal|inverted}, default normal norm or inv select true-low logic for an externally gated burst:burs:gate:pol inv </e></d><d><e>source:burst:internal:period</e><e>period</e><e>sets the burst period for internally-triggered bursts.</e><e>[source[1|2]:]burst:internal:period {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]burst:internal:period? [{minimum|maximum}] sets the burst period for internally-triggered bursts. parameter typical return 1 �s to 8000 s, default 10 ms +1.200000000000000e+01 sets the burst period to 12 seconds:burs:int:per 12 the burst period is the time between the starts of consecutive bursts. this is used only when immediate triggering is enabled (trigger[1|2]:source immediate). it is ignored when manual or external triggering is enabled (or with gated burst mode). burst period must satisfy the formula below. if the burst period is too short, the instrument will increase it as needed to continuously re-trigger the burst.from the remote interface, a "settings conflict" error will also be generated. burst period &gt; (burst count / waveform frequency) + 200 ns </e></d><d><e>source:burst:mode</e><e>mode</e><e>selects the burst mode.</e><e>[source[1|2]:]burst:mode {triggered|gated}[source[1|2]:]burst:mode? selects the burst mode. parameter typical return {triggered|gated}, default triggered trig or gat set gated burst modeburs:mode gated triggered: the instrument outputs a waveform for a number of cycles (burst count) each time a trigger is received from the trigger source (trigger[1|2]:source). in gated burst mode, the output waveform is on or off, based on the signal at the rear-panel ext trig connector. select this signal's polarity using burst:gate:polarity. when the gate signal is true, the instrument outputs a continuous waveform. when the gate signal goes false, the current waveform cycle is completed and the instrument stops and remains at the voltage level corresponding to the waveform's starting burst phase. for a noise waveform, the output stops immediately when the gate signal goes false. gated: burst count, burst period, and trigger source are ignored (these are used for the triggered burst mode only). if a manual trigger is received (trigger[1|2] ), it is ignored and no error will be generated. </e></d><d><e>source:burst:ncycles</e><e>ncycles</e><e>sets the number of cycles to be output per burst (triggered burst mode only).</e><e>[source[1|2]:]burst:ncycles {&lt;num_cycles&gt;|infinity|minimum|maximum}[source[1|2]:]burst:ncycles? [{minimum|maximum}] sets the number of cycles to be output per burst (triggered burst mode only). parameter typical return whole number from 1 (default) to 100,000,000, limited as described below +5.000000000000000e+01 return number of cycles per burst:burs:ncyc 50 with trigger[1|2]:source immediate, burst count must be less than the product of the maximum burst period (8000 s) and the waveform frequency, as shown below.burst count &lt; (maximum burst period)(waveform frequency) the increase the burst period up to its maximum value to accommodate the burst count (but the waveform frequency will not be changed). from the remote interface, a "settings conflict" error will also be generated. when gated burst mode is selected, the burst count is ignored. however, if you change the burst count while in the gated mode, the instrument remembers the new count and used it when the triggered mode is selected. </e></d><d><e>source:burst:phase</e><e>phase</e><e>sets the starting phase angle for the burst.</e><e>[source[1|2]:]burst:phase {&lt;angle&gt;|minimum|maximum}[source[1|2]:]burst:phase? [{minimum|maximum}] sets the starting phase angle for the burst. parameter typical return -360 to +360 degrees, -2p to +2p radians, or -(period) to +(period), as specified by unit:angle. default 0. +6.0000000000000e+01 set starting burst phase to 60 degrees:unit:angle degburs:phas 60 note that burst:phase is used instead of output phase, and when burst is enabled, the output phase is set to 0. for sine, square, and ramp, 0 degrees is the point at which the waveform crosses 0 v (or dc offset) in a positive-going direction. for arbitrary waveforms, 0 degrees is the first waveform point. start phase has no effect on noise. for arbitrary waveforms, burst:phase is only available if the waveform is 1,000,000 points or less. start phase also used in gated burst mode. when the gate signal goes false, the current waveform cycle finishes, and output remains at the voltage level of the starting burst phase. </e></d><d><e>source:burst:state</e><e>state</e><e>enables or disables burst mode.</e><e>[source[1|2]:]burst:state {on|1|off|0}[source[1|2]:]burst:state? enables or disables burst mode. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable burst mode:burs:stat on output phase is set to 0 when burst is enabled. to avoid multiple waveform changes, enable the burst mode after configuring the other burst parameters. the instrument will not allow the burst mode to be enabled at the same time that sweep or any modulation mode is enabled. when you enable burst, the sweep or modulation mode is turned off. </e></d><d><e>source:am:depth</e><e>depth</e><e>sets internal modulation depth ("percent modulation") in percent.</e><e>[source[1|2]:]am[:depth] {&lt;depth_in_percent&gt;|minimum|maximum}[source[1|2]:]am[:depth]? [{minimum|maximum}] sets internal modulation depth ("percent modulation") in percent. parameter typical return 0 to 120, default 100 +5.000000000000000e+01 set the internal modulation depth to 50%:am:dept 50 set the internal modulation depth to 120%:am:dept max even at greater than 100% depth, the instrument will not exceed �5 v peak on the output (into a 50 ω load). to achieve modulation depth greater than 100%, output carrier amplitude may be reduced. with am:source external, carrier waveform is modulated with an external waveform. the modulation depth is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if modulation depth (am[:depth]) is 100%, then when the modulating signal is at +5 v, the output will be at the maximum amplitude. similarly, a -5 v modulating signal produces output at minimum amplitude. </e></d><d><e>source:am:dssc</e><e>dssc</e><e>selects amplitude modulation mode </e><e>[source[1|2]:]am:dssc {on|1|off|0}[source[1|2]:]am:dssc? selects amplitude modulation mode − double sideband suppressed carrier (on) or am modulated carrier with sidebands (off). parameter typical return {on|1|off|0} 0 (off) or 1 (on) set am to dssc mode:am:dssc on the power-on default value is off. in dssc am, zero modulation results in zero output signal, and increasing modulation input signal raises the amplitude of the sidebands in proportion to the amplitude of the modulating signal. dssc am is useful for some digital modulation modes. in "normal" am, zero modulation results in a half-amplitude carrier wave signal being output. as modulation input signal rises, the carrier is amplitude modulated between 0 and 100% amplitude. in dssc, the am[:depth] setting applies, and scales the modulation signal from 0 to 120% modulation. </e></d><d><e>source:am:internal:frequency</e><e>frequency</e><e>sets frequency of modulating waveform.</e><e>[source[1|2]:]am:internal:frequency {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]am:internal:frequency? [{minimum|maximum}] sets frequency of modulating waveform. the waveform chosen as modulating source will operate at that frequency, within waveform frequency limits. parameter typical return 1 μhz to the maximum allowed for the internal function. default 100 hz +1.000000000000000e+04 set the modulating frequency to 10 khz:am:int:func 10000 when you select an arbitrary waveform as the modulating source, the frequency changes to the frequency of the arbitrary waveform, which is based on the sample rate and the number of points in the arbitrary waveform. when using an arbitrary waveform for the modulating source, changing this parameter also changes the cached metadata representing the arbitrary waveform's sample rate. you can also change the modulating frequency of an arbitrary waveform with function:arbitrary:frequency, function:arbitrary:period, and function:arbitrary:srate. these commands and the modulation frequency command are directly coupled in order to keep the arbitrary waveform behaving exactly as it was last played. if you later turn modulation off and select that same arbitrary waveform as the current function, its sample rate (and corresponding frequency based upon the number of points) will be the same as it was when played as the modulation source. if the internal function is triangle, upramp, or dnramp, the maximum frequency limited to 200 khz. if the internal function is prbs, the frequency refers to bit rate and is limited to 50 mbps. this command should be used only with the internal modulation source (am:source internal). </e></d><d><e>source:am:internal:function</e><e>function</e><e>selects shape of modulating waveform.</e><e>[source[1|2]:]am:internal:function &lt;function&gt;[source[1|2]:]am:internal:function? selects shape of modulating waveform. parameter typical return {sinusoid|square|ramp|nramp|triangle|noise|prbs|arb}, default sinusoid, default sinusoid.view internal function waveforms. sin, squ, ramp, nram, tri, nois, prbs, or arb select a sine wave as the modulating waveform.am:int:func sin this command should be used only with the internal modulation source (am:source internal). pulse and dc cannot be carrier waveform for am. </e></d><d><e>source:am:source</e><e>source</e><e>select the source of the modulating signal.</e><e> am:source [source[1|2]:]am:source {internal|external|ch1|ch2}[source[1|2]:]am:source?[source[1|2]:]bpsk:source {internal|external}[source[1|2]:]bpsk:source[source[1|2]:]fm:source {internal|external|ch1|ch2}[source[1|2]:]fm:source[source[1|2]:]fskey:source {internal|external}[source[1|2]:]fskey:source[source[1|2]:]pm:source {internal|external|ch1|ch2}[source[1|2]:]pm:source[source[1|2]:]pwm:source {internal|external|ch1|ch2}[source[1|2]:]pwm:source? select the source of the modulating signal. parameter typical return {internal|external|ch1|ch2}, default internal. bpsk and fskey cannot accept ch1 or ch2 int, ext, ch1, or ch2 select external modulation source:am:sour ext (could also substitute fm, bpsk, fsk, pm, or pwm for am) remarks if you select external, the carrier waveform is modulated with an external waveform. specifically: am:the modulation depth is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if modulation depth (am[:depth]) is 100%, then when the modulating signal is at +5 v, the output will be at the maximum amplitude. similarly, a -5 v modulating signal produces output at minimum amplitude. fm:if you select the external modulating source, the deviation is controlled by the �5 v signal level on the rear-panel modulation in connector.for example, if the frequency deviation is 100 khz, then a +5 v signal level corresponds to a 100 khz increase in frequency.lower external signal levels produce less deviation and negative signal levels reduce the frequency below the carrier frequency. pm:with the external modulating source, deviation is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if you have set the frequency deviation to 180 degrees, then a +5 v signal level corresponds to a +180 degree phase deviation. lower external signal levels produce less deviation, and negative signal levels produce negative deviation. pulse as selected function: the pulse width or pulse duty cycle deviation is controlled by the �5 v signal level present on the rear-panel modulation in connector. for example, if you have set the pulse width deviation to 50 μs using the pwm:deviation command, then a +5 v signal level corresponds to a 50 μs width increase. lower external signal levels produce less deviation. with external source, the output phase (bpsk) or frequency (fsk) is determined by the signal level on the rear-panel ext trig connector. when a logic low is present, the carrier phase or carrier frequency is output. when a logic high is present, the phase shifted phase or hop frequency is output. the maximum external bpsk rate is 1 mhz, and the maximum fsk rate is 1 mhz. note: the connector used for externally-controlled bpsk or fsk waveforms (trig in) is not the same connector that is used for externally-modulated am, fm, pm, and pwm waveforms (modulation in). when used for bpsk or fsk, the trig in connector does not have adjustable edge polarity and is not affected by the trigger[1|2]:slope command. with internal source, the rate at which output phase (bpsk) or frequency (fskey) "shifts" between the carrier phase or frequency and the alternate phase or frequency is determined by the bpsk rate (bpsk:internal:rate) or fsk rate (fskey:internal:rate). a channel may not be its own modulation source. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:am:state</e><e>state</e><e>enables or disables modulation.</e><e> am:state [source[1|2]:]am:state {on|1|off|0}[source[1|2]:]am:state?[source[1|2]:]bpsk:state {on|1|off|0}[source[1|2]:]bpsk:state[source[1|2]:]fm:state {on|1|off|0}[source[1|2]:]fm:state[source[1|2]:]fskey:state {on|1|off|0}[source[1|2]:]fskey:state[source[1|2]:]pm:state {on|1|off|0}[source[1|2]:]pm:state[source[1|2]:]pwm:state {on|1|off|0}[source[1|2]:]pwm:state? enables or disables modulation. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable am (could also substitute fm, bpsk, fsk, pm, or pwm):am:stat on to avoid multiple waveform changes, enable modulation after configuring the other modulation parameters. only one modulation mode may be enabled at a time. the instrument will not enable modulation with sweep or burst enabled. when you enable modulation, the sweep or burst mode is turned off. pwm is allowed only when pulse is the selected function. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:apply</e><e>apply</e><e>queries the output configuration.</e><e>[source[1|2]:]apply? queries the output configuration. parameter typical return (none) "sin +5.000000000000000e+03,+3.0000000000000e+00,-2.5000000000000e+00" return the configuration for a 5 khz, 3 v sine wave with a -2.5 vdc offset.apply? the function, frequency, amplitude, and offset are returned as shown above. the amplitude, but not the offset, is returned as specified by voltage:unit. </e></d><d><e>source:apply:arbitrary</e><e>arbitrary</e><e>outputs arbitrary waveform selected by function: arbitrary, using the specified sample rate, amplitude, and offset. </e><e>[source[1|2]:]apply:arbitrary [{&lt;sample_rate&gt;|min|max|def} [,{&lt;amplitude&gt;|min|max|def} [,{&lt;offset&gt;|min|max|def}]]] outputs arbitrary waveform selected by function: arbitrary, using the specified sample rate, amplitude, and offset. parameter typical return &lt;sample_rate&gt; from 1 �sa/s to 250 msa/s, default 40 ksa/s (none) &lt;amplitude&gt; from 1 mvpp to 10 vpp into 50 ω, 2 mvpp to 20 vpp into an open circuit, default 100 mvpp into 50 ω &lt;offset&gt; is the dc offset voltage (default 0), from �5 vdc into 50 ω, or from �10 vdc into an open circuit. output the arbitrary waveform selected using function:arbitrary:apply:arbitrary 1 khz, 5.0, -2.5 v general setting a sample rate when not in the arb mode will not change the frequency. for example, if the current function is sine, setting sample rate has no effect until the function changes to arb. options see function: arbitrary for available arbitrary waveform options. with function:arbitrary, you may select a built-in arbitrary waveform or the waveform currently downloaded to volatile memory using mmemory commands. offset voltage the relationship between offset voltage and output amplitude is shown below. vmax is the maximum peak voltage for the selected output termination (5 v for a 50 ω load or 10 v for a high-impedance load).|voffset| &lt; vmax - vpp/2if the specified offset voltage is not valid, the instrument will adjust it to the maximum dc voltage allowed with the specified amplitude. from the remote interface, a "data out of range" error will also be generated. limits due to output termination: the offset range depends on the output termination setting. for example, if you set offset to 100 mvdc and then change output termination from 50 ω to "high impedance," the offset voltage displayed on the front panel doubles to 200 mvdc (no error is generated). if you change from "high impedance" to 50 ω, the displayed offset voltage will be halved. see output[1|2]:load for details. </e></d><d><e>source:apply:dc</e><e>dc</e><e>outputs a dc voltage.</e><e>[source[1|2]:]apply:dc [{&lt;frequency&gt;|def} [,{&lt;amplitude&gt;|def} [,{&lt;offset&gt;|min|max|def}]]] outputs a dc voltage. parameter typical return &lt;frequency&gt; not applicable to dc function. must be specified as a placeholder; the value is remembered when you change to a different function. (none) &lt;amplitude&gt; not applicable to dc function. must be specified as a placeholder; the value is remembered when you change to a different function. &lt;offset&gt; is the dc offset voltage (default 0), from �5 vdc into 50 ω, or from �10 vdc into an open circuit. output a dc voltage of -2.5 v:apply:dc def, def, -2.5 v limits due to output termination: the offset range depends on the output termination setting. for example, if you set offset to 100 mvdc and then change output termination from 50 ω to "high impedance," the offset voltage displayed on the front panel doubles to 200 mvdc (no error is generated). if you change from "high impedance" to 50 ω, the displayed offset voltage will be halved. see output[1|2]:load for details.changing the output termination setting does not change the voltage present at the output terminals of the instrument. this only changes the displayed values on the front panel and the values queried from the remote interface. the voltage present at the instrument's output depends on the load connected to the instrument. see output[1|2]:load for details. </e></d><d><e>source:apply:noise</e><e>noise</e><e>outputs gaussian noise with the specified amplitude and dc offset.</e><e>[source[1|2]:]apply:noise [{&lt;frequency&gt;|def} [,{&lt;amplitude&gt;|min|max|def} [,{&lt;offset&gt;|min|max|def}]]] outputs gaussian noise with the specified amplitude and dc offset. parameter typical return &lt;frequency&gt; not applicable to noise function. must be specified as a placeholder; the value is remembered when you change to a different function. (none) &lt;amplitude&gt; desired output amplitude in vpp, vrms or dbm, as specified by voltage:unit.1 mvpp to 10 vpp into 50 ω, or twice that into an open circuit.if specified in vpp, the peak to peak output will actually be output very rarely, due to gaussian nature of noise. &lt;offset&gt; is the dc offset voltage (default 0), from �5 vdc into 50 ω, or from �10 vdc into an open circuit. output gaussian noise bounded by 3 vpp, with -2.5 v offset:appl:nois 5 khz, 3.0 v, -2.5 v frequency if you specify a frequency, it has no effect on the noise output, but the value is remembered when you change to a different function. for information on changing noise bandwidth, see function:noise:bandwidth. offset voltage the relationship between offset voltage and output amplitude is shown below. vmax is the maximum peak voltage for the selected output termination (5 v for a 50 ω load or 10 v for a high-impedance load).|voffset| &lt; vmax - vpp/2if the specified offset voltage is not valid, the instrument will adjust it to the maximum dc voltage allowed with the specified amplitude. from the remote interface, a "data out of range" error will also be generated. limits due to output termination: the offset range depends on the output termination setting. for example, if you set offset to 100 mvdc and then change output termination from 50 ω to "high impedance," the offset voltage displayed on the front panel doubles to 200 mvdc (no error is generated). if you change from "high impedance" to 50 ω, the displayed offset voltage will be halved. see output[1|2]:load for details. </e></d><d><e>source:apply:prbs</e><e>prbs</e><e>outputs a pseudo-random binary sequence with the specified bit rate, amplitude and dc offset.</e><e>[source[1|2]:]apply:prbs [{&lt;frequency&gt;|def} [,{&lt;amplitude&gt;|min|max|def} [,{&lt;offset&gt;|min|max|def}]]] outputs a pseudo-random binary sequence with the specified bit rate, amplitude and dc offset. the default waveform is a pn7 maximum length shift register generator. parameter typical return &lt;frequency&gt; in bits/s, default 1000 (none) &lt;amplitude&gt; desired output amplitude in vpp, vrms or dbm, as specified by voltage:unit.1 mvpp to 10 vpp into 50 ω, or twice that into an open circuit.default 100 mvpp into 50 ω &lt;offset&gt; is the dc offset voltage (default 0), from �5 vdc into 50 ω, or from �10 vdc into an open circuit. output pseudo-random bit sequence bounded by 3 vpp, with -2.5 v offset:appl:prbs 5 khz, 3.0 v, -2.5 v frequency prbs is generated by a maximum length sequence (mls) generator (linear feedback shift register) which may be configured to several standard configurations. default is pn7 at 1000 bits/second. a prbs waveform using polynomial pnx is generated by a shift register of x bits, and the output waveform begins with x sample periods of high output. sample period is the reciprocal of the sample rate (function:prbs:brate), and the channel's sync pulse indicates the waveform's start. for example, if the prbs uses pn23 with sample rate 500 hz, the output begins with 46 ms of high output (23 x 2 ms). unlike the apply:noise function, the apply:prbs function operates with the sync output enabled. the sync function indicates the beginning of the pseudo-random function sequence. offset voltage the relationship between offset voltage and output amplitude is shown below. vmax is the maximum peak voltage for the selected output termination (5 v for a 50 ω load or 10 v for a high-impedance load).|voffset| &lt; vmax - vpp/2if the specified offset voltage is not valid, the instrument will adjust it to the maximum dc voltage allowed with the specified amplitude. from the remote interface, a "data out of range" error will also be generated. limits due to output termination: the offset range depends on the output termination setting. for example, if you set offset to 100 mvdc and then change output termination from 50 ω to "high impedance," the offset voltage displayed on the front panel doubles to 200 mvdc (no error is generated). if you change from "high impedance" to 50 ω, the displayed offset voltage will be halved. see output[1|2]:load for details. </e></d><d><e>source:apply:pulse</e><e>pulse</e><e>outputs a pulse wave with the specified frequency, amplitude, and dc offset.</e><e>[source[1|2]:]apply:pulse [{&lt;frequency&gt;|min|max|def} [,{&lt;amplitude&gt;|min|max|def} [,{&lt;offset&gt;|min|max|def}]]] outputs a pulse wave with the specified frequency, amplitude, and dc offset. in addition, apply performs the following operations: preserves either the current pulse width setting (function:pulse:width) or the current pulse duty cycle setting (function:pulse:dcycle). preserves the current transition time setting (function:pulse:transition[:both]). may cause instrument to override the pulse width or edge time setting to comply with the specified frequency or period (function:pulse:period). parameter typical return &lt;frequency&gt; in hz, default 1 khz (none) &lt;amplitude&gt; desired output amplitude in vpp, vrms or dbm, as specified by voltage:unit. 1 mvpp to 10 vpp into 50 ω, or twice that into an open circuit. default 100 mvpp into 50 ω &lt;offset&gt; is the dc offset voltage (default 0), from �5 vdc into 50 ω, or from �10 vdc into an open circuit. output a 5 vpp pulse wave at 1 khz with a -2.5 v offset:appl:puls 1 khz, 5.0 v, -2.5 v frequency the apply command must be appropriate for the function. for example, appl:puls 300 mhz results in a "data out of range" error. in that case, the frequency would be set to the instrument's maximum frequency for a pulse. offset voltage the relationship between offset voltage and output amplitude is shown below. vmax is the maximum peak voltage for the selected output termination (5 v for a 50 ω load or 10 v for a high-impedance load).|voffset| &lt; vmax - vpp/2if the specified offset voltage is not valid, the instrument will adjust it to the maximum dc voltage allowed with the specified amplitude. from the remote interface, a "data out of range" error will also be generated. limits due to output termination: the offset range depends on the output termination setting. for example, if you set offset to 100 mvdc and then change output termination from 50 ω to "high impedance," the offset voltage displayed on the front panel doubles to 200 mvdc (no error is generated). if you change from "high impedance" to 50 ω, the displayed offset voltage will be halved. see output[1|2]:load for details. </e></d><d><e>source:apply:ramp</e><e>ramp</e><e>outputs a ramp wave with the specified frequency, amplitude, and dc offset.</e><e>[source[1|2]:]apply:ramp [{&lt;frequency&gt;|min|max|def} [,{&lt;amplitude&gt;|min|max|def} [,{&lt;offset&gt;|min|max|def}]]][source[1|2]:]apply:triangle [{&lt;frequency&gt;|min|max|def} [,{&lt;amplitude&gt;|min|max|def} [,{&lt;offset&gt;|min|max|def}]]] outputs a ramp wave or triangle wave with the specified frequency, amplitude, and dc offset. in addition, apply performs the following operations: apply:ramp overrides the current symmetry setting (function:ramp:symmetry), and sets 100% symmetry for the ramp waveform. apply:triangle is simply a special case of apply:ramp. it is equivalent to a ramp waveform with 50% symmetry. parameter typical return &lt;frequency&gt; in hz, default 1 khz (none) &lt;amplitude&gt; desired output amplitude in vpp, vrms or dbm, as specified by voltage:unit. 1 mvpp to 10 vpp into 50 ω, or twice that into an open circuit. default 100 mvpp into 50 ω &lt;offset&gt; is the dc offset voltage (default 0), from �5 vdc into 50 ω, or from �10 vdc into an open circuit. configure a 5 v ramp wave at 3 khz with 0 v offset:appl:ramp 3 khz, 5.0 v, 0 frequency the apply command must be appropriate for the function. for example, the command appl:ramp 5 mhz results in a "data out of range" error. in that case, the frequency would be set to 200 khz, which is the maximum for a ramp. offset voltage the relationship between offset voltage and output amplitude is shown below. vmax is the maximum peak voltage for the selected output termination (5 v for a 50 ω load or 10 v for a high-impedance load).|voffset| &lt; vmax - vpp/2if the specified offset voltage is not valid, the instrument will adjust it to the maximum dc voltage allowed with the specified amplitude. from the remote interface, a "data out of range" error will also be generated. limits due to output termination: the offset range depends on the output termination setting. for example, if you set offset to 100 mvdc and then change output termination from 50 ω to "high impedance," the offset voltage displayed on the front panel doubles to 200 mvdc (no error is generated). if you change from "high impedance" to 50 ω, the displayed offset voltage will be halved. see output[1|2]:load for details. </e></d><d><e>source:apply:sinusoid</e><e>sinusoid</e><e>outputs a sine wave with the specified frequency, amplitude, and dc offset.</e><e>[source[1|2]:]apply:sinusoid [{&lt;frequency&gt;|min|max|def} [,{&lt;amplitude&gt;|min|max|def} [,{&lt;offset&gt;|min|max|def}]]] outputs a sine wave with the specified frequency, amplitude, and dc offset. parameter typical return &lt;frequency&gt; from 1 μhz to instrument's maximum frequency. default 1 khz (none) &lt;amplitude&gt; desired output amplitude in vpp, vrms or dbm, as specified by voltage:unit. 1 mvpp to 10 vpp into 50 ω, or twice that into an open circuit. default 100 mvpp into 50 ω. &lt;offset&gt; is the dc offset voltage (default 0), from �5 vdc into 50 ω, or from �10 vdc into an open circuit. output 3 vpp sine wave at 5 khz with -2.5 v offset.appl:sin 5 khz, 3.0 vpp, -2.5 v offset voltage the relationship between offset voltage and output amplitude is shown below. vmax is the maximum peak voltage for the selected output termination (5 v for a 50 ω load or 10 v for a high-impedance load).|voffset| &lt; vmax - vpp/2if the specified offset voltage is not valid, the instrument will adjust it to the maximum dc voltage allowed with the specified amplitude. from the remote interface, a "data out of range" error will also be generated. limits due to output termination: the offset range depends on the output termination setting. for example, if you set offset to 100 mvdc and then change output termination from 50 ω to "high impedance," the offset voltage displayed on the front panel doubles to 200 mvdc (no error is generated). if you change from "high impedance" to 50 ω, the displayed offset voltage will be halved. see output[1|2]:load for details. </e></d><d><e>source:apply:square</e><e>square</e><e>outputs a square wave with the specified frequency, amplitude, and dc offset.</e><e>[source[1|2]:]apply:square [{&lt;frequency&gt;|min|max|def} [,{&lt;amplitude&gt;|min|max|def} [,{&lt;offset&gt;|min|max|def}]]] outputs a square wave with the specified frequency, amplitude, and dc offset. in addition, apply performs the following operations: overrides the current duty cycle setting (function:square:dcycle), and sets a 50% duty cycle for the square wave. parameter typical return &lt;frequency&gt; from 1 μhz to instrument's maximum frequency. default 1 khz. (none) &lt;amplitude&gt; desired output amplitude in vpp, vrms or dbm, as specified by voltage:unit. 1 mvpp to 10 vpp into 50 ω, or twice that into an open circuit. default 100 mvpp (into 50 ω) &lt;offset&gt; is the dc offset voltage (default 0), from �5 vdc into 50 ω, or from �10 vdc into an open circuit. output 3 v square wave at 5 khz with -2.5 v offset:appl:squ 5 khz, 3.0 v, -2.5 v frequency the apply command must be appropriate for the function. for example, appl:squ 40 mhz results in a "data out of range" error and the instrument sets the frequency to its maximum frequency for a square wave. offset voltage the relationship between offset voltage and output amplitude is shown below. vmax is the maximum peak voltage for the selected output termination (5 v for a 50 ω load or 10 v for a high-impedance load).|voffset| &lt; vmax - vpp/2if the specified offset voltage is not valid, the instrument will adjust it to the maximum dc voltage allowed with the specified amplitude. from the remote interface, a "data out of range" error will also be generated. limits due to output termination: the offset range depends on the output termination setting. for example, if you set offset to 100 mvdc and then change output termination from 50 ω to "high impedance," the offset voltage displayed on the front panel doubles to 200 mvdc (no error is generated). if you change from "high impedance" to 50 ω, the displayed offset voltage will be halved. see output[1|2]:load for details. </e></d><d><e>source:apply:triangle</e><e>triangle</e><e>outputs a triangle wave with the specified frequency, amplitude, and dc offset.</e><e>[source[1|2]:]apply:triangle [{&lt;frequency&gt;|min|max|def} [,{&lt;amplitude&gt;|min|max|def} [,{&lt;offset&gt;|min|max|def}]]] outputs a ramp wave or triangle wave with the specified frequency, amplitude, and dc offset. in addition, apply performs the following operations: apply:ramp overrides the current symmetry setting (function:ramp:symmetry), and sets 100% symmetry for the ramp waveform. apply:triangle is simply a special case of apply:ramp. it is equivalent to a ramp waveform with 50% symmetry. parameter typical return &lt;frequency&gt; in hz, default 1 khz (none) &lt;amplitude&gt; desired output amplitude in vpp, vrms or dbm, as specified by voltage:unit. 1 mvpp to 10 vpp into 50 ω, or twice that into an open circuit. default 100 mvpp into 50 ω &lt;offset&gt; is the dc offset voltage (default 0), from �5 vdc into 50 ω, or from �10 vdc into an open circuit. configure a 5 v ramp wave at 3 khz with 0 v offset:appl:ramp 3 khz, 5.0 v, 0 frequency the apply command must be appropriate for the function. for example, the command appl:ramp 5 mhz results in a "data out of range" error. in that case, the frequency would be set to 200 khz, which is the maximum for a ramp. offset voltage the relationship between offset voltage and output amplitude is shown below. vmax is the maximum peak voltage for the selected output termination (5 v for a 50 ω load or 10 v for a high-impedance load).|voffset| &lt; vmax - vpp/2if the specified offset voltage is not valid, the instrument will adjust it to the maximum dc voltage allowed with the specified amplitude. from the remote interface, a "data out of range" error will also be generated. limits due to output termination: the offset range depends on the output termination setting. for example, if you set offset to 100 mvdc and then change output termination from 50 ω to "high impedance," the offset voltage displayed on the front panel doubles to 200 mvdc (no error is generated). if you change from "high impedance" to 50 ω, the displayed offset voltage will be halved. see output[1|2]:load for details. </e></d><d><e>source:bpsk:internal:rate</e><e>rate</e><e>sets the rate at which the output phase "shifts" between the carrier and offset phase.</e><e>[source[1|2]:]bpsk:internal:rate {&lt;modulating_frequency&gt;|minimum|maximum}[source[1|2]:]bpsk:internal:rate? [{minimum|maximum}] sets the rate at which the output phase "shifts" between the carrier and offset phase. parameter typical return 1 mhz to 1 mhz, default 10 hz +1.000000000000000e-03 set bpsk rate to 1 mhz:bpsk:int:rate min the bpsk rate is used only when the internal source is selected (bpsk:source internal) and is ignored when the external source is selected (bpsk:source external). the internal modulating waveform is a square wave with a 50% duty cycle. </e></d><d><e>source:bpsk:phase</e><e>phase</e><e>sets the binary phase shift keying phase shift in degrees.</e><e>[source[1|2]:]bpsk[:phase] {&lt;angle&gt;|minimum|maximum}[source[1|2]:]bpsk[:phase]? [{minimum|maximum}] sets the binary phase shift keying phase shift in degrees. parameter typical return -360 to +360 degrees, default 180 +0.000000000000000e-00 set phase shift to 90 degrees:bpsk:phas 90 </e></d><d><e>source:bpsk:source</e><e>source</e><e>select the source of the modulating signal.</e><e> am:source [source[1|2]:]am:source {internal|external|ch1|ch2}[source[1|2]:]am:source?[source[1|2]:]bpsk:source {internal|external}[source[1|2]:]bpsk:source[source[1|2]:]fm:source {internal|external|ch1|ch2}[source[1|2]:]fm:source[source[1|2]:]fskey:source {internal|external}[source[1|2]:]fskey:source[source[1|2]:]pm:source {internal|external|ch1|ch2}[source[1|2]:]pm:source[source[1|2]:]pwm:source {internal|external|ch1|ch2}[source[1|2]:]pwm:source? select the source of the modulating signal. parameter typical return {internal|external|ch1|ch2}, default internal. bpsk and fskey cannot accept ch1 or ch2 int, ext, ch1, or ch2 select external modulation source:am:sour ext (could also substitute fm, bpsk, fsk, pm, or pwm for am) remarks if you select external, the carrier waveform is modulated with an external waveform. specifically: am:the modulation depth is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if modulation depth (am[:depth]) is 100%, then when the modulating signal is at +5 v, the output will be at the maximum amplitude. similarly, a -5 v modulating signal produces output at minimum amplitude. fm:if you select the external modulating source, the deviation is controlled by the �5 v signal level on the rear-panel modulation in connector.for example, if the frequency deviation is 100 khz, then a +5 v signal level corresponds to a 100 khz increase in frequency.lower external signal levels produce less deviation and negative signal levels reduce the frequency below the carrier frequency. pm:with the external modulating source, deviation is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if you have set the frequency deviation to 180 degrees, then a +5 v signal level corresponds to a +180 degree phase deviation. lower external signal levels produce less deviation, and negative signal levels produce negative deviation. pulse as selected function: the pulse width or pulse duty cycle deviation is controlled by the �5 v signal level present on the rear-panel modulation in connector. for example, if you have set the pulse width deviation to 50 μs using the pwm:deviation command, then a +5 v signal level corresponds to a 50 μs width increase. lower external signal levels produce less deviation. with external source, the output phase (bpsk) or frequency (fsk) is determined by the signal level on the rear-panel ext trig connector. when a logic low is present, the carrier phase or carrier frequency is output. when a logic high is present, the phase shifted phase or hop frequency is output. the maximum external bpsk rate is 1 mhz, and the maximum fsk rate is 1 mhz. note: the connector used for externally-controlled bpsk or fsk waveforms (trig in) is not the same connector that is used for externally-modulated am, fm, pm, and pwm waveforms (modulation in). when used for bpsk or fsk, the trig in connector does not have adjustable edge polarity and is not affected by the trigger[1|2]:slope command. with internal source, the rate at which output phase (bpsk) or frequency (fskey) "shifts" between the carrier phase or frequency and the alternate phase or frequency is determined by the bpsk rate (bpsk:internal:rate) or fsk rate (fskey:internal:rate). a channel may not be its own modulation source. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:bpsk:state</e><e>state</e><e>enables or disables modulation.</e><e> am:state [source[1|2]:]am:state {on|1|off|0}[source[1|2]:]am:state?[source[1|2]:]bpsk:state {on|1|off|0}[source[1|2]:]bpsk:state[source[1|2]:]fm:state {on|1|off|0}[source[1|2]:]fm:state[source[1|2]:]fskey:state {on|1|off|0}[source[1|2]:]fskey:state[source[1|2]:]pm:state {on|1|off|0}[source[1|2]:]pm:state[source[1|2]:]pwm:state {on|1|off|0}[source[1|2]:]pwm:state? enables or disables modulation. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable am (could also substitute fm, bpsk, fsk, pm, or pwm):am:stat on to avoid multiple waveform changes, enable modulation after configuring the other modulation parameters. only one modulation mode may be enabled at a time. the instrument will not enable modulation with sweep or burst enabled. when you enable modulation, the sweep or burst mode is turned off. pwm is allowed only when pulse is the selected function. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:combine:feed</e><e>feed</e><e>enables or disables the combining of both channels' outputs on a two-channel instrument into a single channel connector.</e><e> combine:feed [source[1|2]:]combine:feed {ch1|ch2|none}[source[1|2]:]combine:feed? enables or disables the combining of both channels' outputs on a two-channel instrument into a single channel connector. the "source" keyword (default, source1) specifies the base channel, and &lt;source&gt; specifies the channel to be combined with the base channel. parameter typical return {ch1|ch2|none}, default none ch1, ch2, or none set the combine:feed source for base channel 1 to be channel 2:comb:feed ch2 combine:feed allows digital data from both channels to be added together to create the output signal on the output dac for the base channel. only one channel may operate in combine:feed mode at a time unlike the modulation and sum commands, combine:feed can add two modulated signals. combine:feed can generate quadrature modulated signals from the two channels to be added together into a single connector. to use combine:feed, first configure all parameters on the individual channels. the signals to be combined may have a fixed phase offset between the channels. you can use combine:feed to add noise from a second channel to a modulated signal on the base channel. if combine:feed would cause the combined output to exceed either the instrument's output rating or the programmed limits, the instrument will set combine:feed to none and report a settings conflict error. signals are combined in digital form. when two signals of significantly different amplitudes are combined, the lower amplitude signal may have reduced resolution proportional to the ratio of the two amplitudes. changing the function amplitude or sum amplitude of the master or combined channel will not change the amplitude or offset of any other function or channel. if changing the function amplitude or sum amplitude of the master or combined channel would result in exceeding either the output rating or the programmed limits, the amplitude value will be clipped and a settings conflict error will be reported. changing the channel offset of the master or combined channel will not change the amplitude or offset of any other function or channel. if changing channel offset of the master or combined channel would result in exceeding either the output rating or the programmed limits, the amplitude value will be clipped and the instrument will report a settings conflict error. if turning limits on or adjusting programmed limits would result in a limit being lower than a signal maximum or higher than a signal minimum, the limits will not be turned on or adjusted, and the instrument will report a settings conflict error. </e></d><d><e>source:data:arbitrary</e><e>arbitrary</e><e>downloads integer values representing dac codes (data:arbitrary[1|2]:dac) or floating point values (data:arbitrary[1|2]) into waveform volatile memory as either a list of comma separated values or binary block of data.</e><e>[source[1|2]:]data:arbitrary[1|2] &lt;arb_name&gt;, {&lt;binary_block&gt; | &lt;value&gt;, &lt;value&gt;, . . .} [source[1|2]:]data:arbitrary[1|2]:dac &lt;arb_name&gt;, {&lt;binary_block&gt; | &lt;value&gt;, &lt;value&gt;, . . .} downloads integer values representing dac codes (data:arbitrary[1|2]:dac) or floating point values (data:arbitrary[1|2]) into waveform volatile memory as either a list of comma separated values or binary block of data. the optional [1|2] after the arbitrary keyword indicates whether the data to be downloaded contains one (default) or two channels of data. to use dual arbitrary waveform files (single files containing two channels of arbitrary waveform data), you must have the optional iq player.) parameter typical return &lt;arb_name&gt; an unquoted string of up to 12 characters. (none) &lt;binary_block&gt; integer values from -32767 to +32767 or floating point values from -1.0 to +1.0 in definite length arbitrary block format (details below). from 8 to 1m or 16m samples per waveform, depending on the model and options. definite-length block data allows any type of device-dependent data to be transmitted as a series of 8-bit binary data bytes. this is particularly useful for transferring large quantities of data or 8-bit extended ascii codes. &lt;value&gt; comma separated list of integer values from -32,767 to +32,767 or floating point values from -1.0 to +1.0. from 8 to 65,536 points. download a comma separated list of nine waveform points into waveform memory:data:arb:dac myarb, 32767, 24576, 16384, 8192, 0, -8192, -16384, -24576, - 32767 download nine waveform points into waveform memory as a binary block. the &lt;pmt&gt; specifies what terminates the binary data. it can be a line feed character, or the last byte of your_binary_data can assert the end or identify.data:arb myarb, #236&lt;36 bytes of your_binary_data&gt;&lt;pmt&gt; download a comma separated list of nine waveform points into waveform memory:data:arb myarb, 1, .75, .50, .25, 0, -.25, -.50, -.75, -1 download eight waveform points of a dual arbitrary waveform into waveform memory as a comma separated list of dac codes. there are 16 values in all, eight for each of two channels. note that the data is interleaved (abab), so the positive values are all on channel 1, and the negative values are all on channel 2:data:arb2:form ababdata:arb2:dac myarb, 30000, -10000, 29000, -9000, 27000, -7000, 24000, -4000, 27000, -7000, 29000, -9000, 30000, -10000, 29000, -9000 download the same examples as above, but in aabb format:data:arb2:form aabbdata:arb2:dac myarb, 30000, 29000, 27000, 24000, 27000, 29000, 30000, 29000, -10000, -9000, -7000, -4000, -7000, -9000, -10000, -9000 each data point is either a 16-bit integer from -32,767 and +32,767 or a 32-bit floating point value from -1.0 to +1.0. therefore, the total number of bytes is always two times or four times the number of data points in the waveform. for example, 16,000 bytes are required to download a waveform with 8,000 points as integers, but 32,000 bytes are required to download the same waveform as floating point values. the values -32767 and +32767 or -1.0 to +1.0 correspond to the peak values of the waveform (if the offset is 0 v). for example, if you set the output amplitude to 10 vpp, +32767 corresponds to +5 v and -32767 corresponds to -5 v. use format:border to select the byte order for block mode binary transfers. use data:arb2:format to specify whether dual arbitrary waveforms are interleaved or sequential (channel 1 followed by channel 2). specifying a waveform that is already loaded generates a "specified arb waveform already exists" error. deleting an existing waveform requires clearing all of the waveform memory with data:volatile:clear. either 1 msa or 16 msa (depending on model and options) is the total available sample size for all waveforms loaded per channel. a new waveform may be limited by waveforms already loaded. </e></d><d><e>source:data:arbitrary:dac</e><e>dac</e><e>downloads integer values representing dac codes (data:arbitrary[1|2]:dac) or floating point values (data:arbitrary[1|2]) into waveform volatile memory as either a list of comma separated values or binary block of data.</e><e>[source[1|2]:]data:arbitrary[1|2]:dac &lt;arb_name&gt;, {&lt;binary_block&gt; | &lt;value&gt;, &lt;value&gt;, . . .} downloads integer values representing dac codes (data:arbitrary[1|2]:dac) or floating point values (data:arbitrary[1|2]) into waveform volatile memory as either a list of comma separated values or binary block of data. the optional [1|2] after the arbitrary keyword indicates whether the data to be downloaded contains one (default) or two channels of data. to use dual arbitrary waveform files (single files containing two channels of arbitrary waveform data), you must have the optional iq player.) parameter typical return &lt;arb_name&gt; an unquoted string of up to 12 characters. (none) &lt;binary_block&gt; integer values from -32767 to +32767 or floating point values from -1.0 to +1.0 in definite length arbitrary block format (details below). from 8 to 1m or 16m samples per waveform, depending on the model and options. definite-length block data allows any type of device-dependent data to be transmitted as a series of 8-bit binary data bytes. this is particularly useful for transferring large quantities of data or 8-bit extended ascii codes. &lt;value&gt; comma separated list of integer values from -32,767 to +32,767 or floating point values from -1.0 to +1.0. from 8 to 65,536 points. download a comma separated list of nine waveform points into waveform memory:data:arb:dac myarb, 32767, 24576, 16384, 8192, 0, -8192, -16384, -24576, - 32767 download nine waveform points into waveform memory as a binary block. the &lt;pmt&gt; specifies what terminates the binary data. it can be a line feed character, or the last byte of your_binary_data can assert the end or identify.data:arb myarb, #236&lt;36 bytes of your_binary_data&gt;&lt;pmt&gt; download a comma separated list of nine waveform points into waveform memory:data:arb myarb, 1, .75, .50, .25, 0, -.25, -.50, -.75, -1 download eight waveform points of a dual arbitrary waveform into waveform memory as a comma separated list of dac codes. there are 16 values in all, eight for each of two channels. note that the data is interleaved (abab), so the positive values are all on channel 1, and the negative values are all on channel 2:data:arb2:form ababdata:arb2:dac myarb, 30000, -10000, 29000, -9000, 27000, -7000, 24000, -4000, 27000, -7000, 29000, -9000, 30000, -10000, 29000, -9000 download the same examples as above, but in aabb format:data:arb2:form aabbdata:arb2:dac myarb, 30000, 29000, 27000, 24000, 27000, 29000, 30000, 29000, -10000, -9000, -7000, -4000, -7000, -9000, -10000, -9000 each data point is either a 16-bit integer from -32,767 and +32,767 or a 32-bit floating point value from -1.0 to +1.0. therefore, the total number of bytes is always two times or four times the number of data points in the waveform. for example, 16,000 bytes are required to download a waveform with 8,000 points as integers, but 32,000 bytes are required to download the same waveform as floating point values. the values -32767 and +32767 or -1.0 to +1.0 correspond to the peak values of the waveform (if the offset is 0 v). for example, if you set the output amplitude to 10 vpp, +32767 corresponds to +5 v and -32767 corresponds to -5 v. use format:border to select the byte order for block mode binary transfers. use data:arb2:format to specify whether dual arbitrary waveforms are interleaved or sequential (channel 1 followed by channel 2). specifying a waveform that is already loaded generates a "specified arb waveform already exists" error. deleting an existing waveform requires clearing all of the waveform memory with data:volatile:clear. either 1 msa or 16 msa (depending on model and options) is the total available sample size for all waveforms loaded per channel. a new waveform may be limited by waveforms already loaded. </e></d><d><e>source:data:arbitrary2</e><e>arbitrary2</e><e>downloads integer values representing dac codes (data:arbitrary[2]:dac) or floating point values (data:arbitrary[2]) into waveform volatile memory as either a list of comma separated values or binary block of data.</e><e>[source[1|2]:]data:arbitrary[1|2] &lt;arb_name&gt;, {&lt;binary_block&gt; | &lt;value&gt;, &lt;value&gt;, . . .} [source[1|2]:]data:arbitrary[1|2]:dac &lt;arb_name&gt;, {&lt;binary_block&gt; | &lt;value&gt;, &lt;value&gt;, . . .} downloads integer values representing dac codes (data:arbitrary[1|2]:dac) or floating point values (data:arbitrary[1|2]) into waveform volatile memory as either a list of comma separated values or binary block of data. the optional [1|2] after the arbitrary keyword indicates whether the data to be downloaded contains one (default) or two channels of data. to use dual arbitrary waveform files (single files containing two channels of arbitrary waveform data), you must have the optional iq player.) parameter typical return &lt;arb_name&gt; an unquoted string of up to 12 characters. (none) &lt;binary_block&gt; integer values from -32767 to +32767 or floating point values from -1.0 to +1.0 in definite length arbitrary block format (details below). from 8 to 1m or 16m samples per waveform, depending on the model and options. definite-length block data allows any type of device-dependent data to be transmitted as a series of 8-bit binary data bytes. this is particularly useful for transferring large quantities of data or 8-bit extended ascii codes. &lt;value&gt; comma separated list of integer values from -32,767 to +32,767 or floating point values from -1.0 to +1.0. from 8 to 65,536 points. download a comma separated list of nine waveform points into waveform memory:data:arb:dac myarb, 32767, 24576, 16384, 8192, 0, -8192, -16384, -24576, - 32767 download nine waveform points into waveform memory as a binary block. the &lt;pmt&gt; specifies what terminates the binary data. it can be a line feed character, or the last byte of your_binary_data can assert the end or identify.data:arb myarb, #236&lt;36 bytes of your_binary_data&gt;&lt;pmt&gt; download a comma separated list of nine waveform points into waveform memory:data:arb myarb, 1, .75, .50, .25, 0, -.25, -.50, -.75, -1 download eight waveform points of a dual arbitrary waveform into waveform memory as a comma separated list of dac codes. there are 16 values in all, eight for each of two channels. note that the data is interleaved (abab), so the positive values are all on channel 1, and the negative values are all on channel 2:data:arb2:form ababdata:arb2:dac myarb, 30000, -10000, 29000, -9000, 27000, -7000, 24000, -4000, 27000, -7000, 29000, -9000, 30000, -10000, 29000, -9000 download the same examples as above, but in aabb format:data:arb2:form aabbdata:arb2:dac myarb, 30000, 29000, 27000, 24000, 27000, 29000, 30000, 29000, -10000, -9000, -7000, -4000, -7000, -9000, -10000, -9000 each data point is either a 16-bit integer from -32,767 and +32,767 or a 32-bit floating point value from -1.0 to +1.0. therefore, the total number of bytes is always two times or four times the number of data points in the waveform. for example, 16,000 bytes are required to download a waveform with 8,000 points as integers, but 32,000 bytes are required to download the same waveform as floating point values. the values -32767 and +32767 or -1.0 to +1.0 correspond to the peak values of the waveform (if the offset is 0 v). for example, if you set the output amplitude to 10 vpp, +32767 corresponds to +5 v and -32767 corresponds to -5 v. use format:border to select the byte order for block mode binary transfers. use data:arb2:format to specify whether dual arbitrary waveforms are interleaved or sequential (channel 1 followed by channel 2). specifying a waveform that is already loaded generates a "specified arb waveform already exists" error. deleting an existing waveform requires clearing all of the waveform memory with data:volatile:clear. either 1 msa or 16 msa (depending on model and options) is the total available sample size for all waveforms loaded per channel. a new waveform may be limited by waveforms already loaded. </e></d><d><e>source:data:arbitrary2:dac</e><e>dac</e><e>downloads integer values representing dac codes (data:arbitrary[1|2]:dac) or floating point values (data:arbitrary[1|2]) into waveform volatile memory as either a list of comma separated values or binary block of data.</e><e>[source[1|2]:]data:arbitrary[1|2]:dac &lt;arb_name&gt;, {&lt;binary_block&gt; | &lt;value&gt;, &lt;value&gt;, . . .} downloads integer values representing dac codes (data:arbitrary[1|2]:dac) or floating point values (data:arbitrary[1|2]) into waveform volatile memory as either a list of comma separated values or binary block of data. the optional [1|2] after the arbitrary keyword indicates whether the data to be downloaded contains one (default) or two channels of data. to use dual arbitrary waveform files (single files containing two channels of arbitrary waveform data), you must have the optional iq player.) parameter typical return &lt;arb_name&gt; an unquoted string of up to 12 characters. (none) &lt;binary_block&gt; integer values from -32767 to +32767 or floating point values from -1.0 to +1.0 in definite length arbitrary block format (details below). from 8 to 1m or 16m samples per waveform, depending on the model and options. definite-length block data allows any type of device-dependent data to be transmitted as a series of 8-bit binary data bytes. this is particularly useful for transferring large quantities of data or 8-bit extended ascii codes. &lt;value&gt; comma separated list of integer values from -32,767 to +32,767 or floating point values from -1.0 to +1.0. from 8 to 65,536 points. download a comma separated list of nine waveform points into waveform memory:data:arb:dac myarb, 32767, 24576, 16384, 8192, 0, -8192, -16384, -24576, - 32767 download nine waveform points into waveform memory as a binary block. the &lt;pmt&gt; specifies what terminates the binary data. it can be a line feed character, or the last byte of your_binary_data can assert the end or identify.data:arb myarb, #236&lt;36 bytes of your_binary_data&gt;&lt;pmt&gt; download a comma separated list of nine waveform points into waveform memory:data:arb myarb, 1, .75, .50, .25, 0, -.25, -.50, -.75, -1 download eight waveform points of a dual arbitrary waveform into waveform memory as a comma separated list of dac codes. there are 16 values in all, eight for each of two channels. note that the data is interleaved (abab), so the positive values are all on channel 1, and the negative values are all on channel 2:data:arb2:form ababdata:arb2:dac myarb, 30000, -10000, 29000, -9000, 27000, -7000, 24000, -4000, 27000, -7000, 29000, -9000, 30000, -10000, 29000, -9000 download the same examples as above, but in aabb format:data:arb2:form aabbdata:arb2:dac myarb, 30000, 29000, 27000, 24000, 27000, 29000, 30000, 29000, -10000, -9000, -7000, -4000, -7000, -9000, -10000, -9000 each data point is either a 16-bit integer from -32,767 and +32,767 or a 32-bit floating point value from -1.0 to +1.0. therefore, the total number of bytes is always two times or four times the number of data points in the waveform. for example, 16,000 bytes are required to download a waveform with 8,000 points as integers, but 32,000 bytes are required to download the same waveform as floating point values. the values -32767 and +32767 or -1.0 to +1.0 correspond to the peak values of the waveform (if the offset is 0 v). for example, if you set the output amplitude to 10 vpp, +32767 corresponds to +5 v and -32767 corresponds to -5 v. use format:border to select the byte order for block mode binary transfers. use data:arb2:format to specify whether dual arbitrary waveforms are interleaved or sequential (channel 1 followed by channel 2). specifying a waveform that is already loaded generates a "specified arb waveform already exists" error. deleting an existing waveform requires clearing all of the waveform memory with data:volatile:clear. either 1 msa or 16 msa (depending on model and options) is the total available sample size for all waveforms loaded per channel. a new waveform may be limited by waveforms already loaded. </e></d><d><e>source:data:arbitrary2:format</e><e>format</e><e>specifies whether the format for data points in data:arb2 and data:arb2:dac commands is interleaved (abab) or all of channel 1 followed by all of channel 2 (aabb).</e><e>[source[1|2]:]data:arbitrary2:format {abab|aabb} (applies only to instruments with the optional iq player capability.) specifies whether the format for data points in data:arb2 and data:arb2:dac commands is interleaved (abab) or all of channel 1 followed by all of channel 2 (aabb). you may spell out the keyword arbitrary2, but you must abbreviate it as arb2. you cannot abbreviate it as arb. parameter typical return {aabb|abab} aabb or abab specify an interleaved data format for dual arbitrary waveform data: data:arb2:form abab the source keyword is ignored for this command. if you wish to have a 3 dac count signal on channel 1 and a 4 dac count signal on channel 2, the aabb format would dictate that the data must be sent as 3, 3, 3, 3, 3, 3, 3, 3, 4, 4, 4, 4, 4, 4, 4, 4. the abab format would dictate the order 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4, 3, 4. </e></d><d><e>source:data:attribute:average</e><e>average</e><e>returns the arithmetic mean of all data points for the specified arbitrary waveform internal or usb memory, or loaded into waveform memory.</e><e>[source[1|2]:]data:attribute:average? [&lt;arb_name&gt;] returns the arithmetic mean of all data points for the specified arbitrary waveform internal or usb memory, or loaded into waveform memory. parameter typical return &lt;arb_name&gt; is any valid file name. if omitted, the default &lt;arb_name&gt; is the arbitrary waveform currently active (selected with function:arbitrary). +2.45036000e-002 return the mean of all points stored in "sinc".data:attr:aver?" int:\builtin\sinc.arb" querying a waveform that does not exist generates a "specified arb waveform does not exist" error. &lt;arb_name&gt; can be a file name (put in memory by mmemory:load:data[1|2]) or a name generated from data:arbitrary or data:arbitrary:dac. </e></d><d><e>source:data:attribute:cfactor</e><e>cfactor</e><e>returns the crest factor of all data points for the specified arbitrary waveform segment in internal or usb memory, or loaded into waveform memory.</e><e>[source[1|2]:]data:attribute:cfactor? [&lt;arb_name&gt;] returns the crest factor of all data points for the specified arbitrary waveform segment in internal or usb memory, or loaded into waveform memory. parameter typical return &lt;arb_name&gt; is any valid file name. if omitted, the default &lt;arb_name&gt; is the arbitrary waveform currently active (selected with function:arbitrary). +1.73205100e+000 return crest factor of all data points stored in "neg_ramp".data:attr:cfac? "int:\builtin\neg_ramp.arb" crest factor is the ratio of the peak value to the rms value of the waveform. querying a waveform that does not exist generates a "specified arb waveform does not exist" error. &lt;arb_name&gt; can be a file name (put in memory by mmemory:load:data[1|2]) or a name generated from data:arbitrary or data:arbitrary:dac. </e></d><d><e>source:data:attribute:points</e><e>points</e><e>returns the number of points in the specified arbitrary waveform segment in internal or usb memory, or loaded into waveform memory.</e><e>[source[1|2]:]data:attribute:points? [&lt;arb_name&gt;] returns the number of points in the specified arbitrary waveform segment in internal or usb memory, or loaded into waveform memory. parameter typical return &lt;arb_name&gt; is any valid file name. if omitted, the default &lt;arb_name&gt; is the arbitrary waveform currently active (selected with function:arbitrary). +40 returns the number of data points in "exp_rise":data:attr:poin? "int:\builtin\exp_rise.arb" &lt;arb_name&gt; can be a file name (put in memory by mmemory:load:data[1|2]) or a name generated from data:arbitrary or data:arbitrary:dac. </e></d><d><e>source:data:attribute:ptpeak</e><e>ptpeak</e><e>this query calculates the peak-to-peak value of all data points for the specified arbitrary waveform segment in internal or usb memory, or loaded into waveform memory.

</e><e>[source[1|2]:]data:attribute:ptpeak? [&lt;arb_name&gt;] this query calculates the peak-to-peak value of all data points for the specified arbitrary waveform segment in internal or usb memory, or loaded into waveform memory. parameter typical return any valid file name. if omitted, the default &lt;arb_name&gt; is the arbitrary waveform currently active (selected with function:arbitrary). +1.00000000e+00 return the peak-to-peak value for "exp_fall":data:attr:ptp? "int:\builtin\exp_fall.arb" &lt;arb_name&gt; must match: a waveform already loaded into waveform memory. a waveform existing in internal or usb mass memory. see mmemory:load:data[1|2], data:arbitrary, or data:arbitrary:dac for valid formats for &lt;arb_name&gt;. arbitrary waveform limitations: for arbitrary waveforms, amplitude is limited if the waveform data points do not span the full range of the output dac (digital-to-analog converter). for example, the built-in "sinc" waveform does not use the full range of values, so its maximum amplitude is limited to 6.087 vpp (into 50 ω). &lt;arb_name&gt; can be a file name (put in memory by mmemory:load:data[1|2]) or a name generated from data:arbitrary or data:arbitrary:dac. </e></d><d><e>source:data:sequence</e><e>sequence</e><e>defines a sequence of waveforms already loaded into waveform memory via mmemory:load:data[1|2] or data:arbitrary.</e><e>[source[1|2]:]data:sequence &lt;block_descriptor&gt; defines a sequence of waveforms already loaded into waveform memory via mmemory:load:data[1|2] or data:arbitrary. the mmemory:load:data[1|2] command can also load a sequence file that automatically loads the associated arbitrary waveforms and includes the amplitude, offset, sample rate, and filter setup. parameter typical return ieee definite length arbitrary block, described below. (none) (see example) even arbitrary waveforms with millions of points may be insufficient for applications requiring special sequencing or the repetition of waveforms dependent upon time or external events. sequencing arbitrary waveforms allows you to arrange and conditionally repeat waveforms. this allows you to use less memory and to achieve greater application flexibility. definite-length block data allows any type of device-dependent data to be transmitted as a series of 8-bit binary data bytes. this is particularly useful for transferring large quantities of data or 8-bit extended ascii codes. &lt;block_descriptor&gt; is of the format #&lt;n&gt;&lt;n digits&gt;&lt;sequence name&gt;,&lt;arb name1&gt;,&lt;repeat count1&gt;,&lt;play control1&gt;,&lt;marker mode1&gt;, &lt;marker point1&gt;, &lt;arb name2&gt;,&lt;repeat count2&gt;,&lt;play control2&gt;,&lt;marker mode2&gt;, &lt;marker point2&gt;, and so on, where: &lt;n&gt;specifies the number of digits used to indicate the size of the block. &lt;n digits&gt; is one or more digits hat specifies the number of data bytes to come. &lt;sequence name&gt; an unquoted ascii string which specifies the name of sequence that contains the arbitrary waveforms specified in the following parameters. &lt;arb name&gt; a quoted string that specifies the name of the arbitrary waveform that was loaded with the mmem:load:data[1|2] or data:arbitrary commands. &lt;repeat count&gt; specifies the number of times to repeat the waveform. this value can range from 1 to 1e6 or infinite. this will only be recognized in the hardware if play control is set to "repeat" &lt;play control&gt; is a quoted string which specifies how the arbitrary waveform is to be played in the sequence. valid choices are: "once"- play once "oncewaittrig"- play once and then wait for trigger. triggers will not be accepted until the play of the specified segment has completed. "repeat"- repeat number of times specified by repeat count "repeatinf"- repeat until stopped (infinite) "repeattiltrig" - repeat until triggered then advance &lt;marker mode&gt; a quoted string which specifies how the marker behaves in the arbitrary waveform. valid choices are: "maintain"- maintain current marker state at start of segment "lowatstart"- force marker low at start of segment "highatstart"- force marker high at start of segment "highatstartgolow"- force marker high at start of segment and then low at marker position &lt;marker point&gt; a number specifying the marker location in the arbitrary waveform. this value must be between 4 and the number of points in the arbitrary waveform minus 3. if you specify an arbitrary waveform that has not been loaded, a "specified arb waveform does not exist" error is generated. example of data:sequence command the following command constructs a sequence (named mysequence) of three segments (a.arb, b.arb, and c.arb) that were previously loaded from the usb drive using mmemory:load:data[1|2]. the sequence plays a once, and b five times. it then plays c repeatedly while waiting for a trigger to advance, and finally ends with a. each segment has the &lt;marker point&gt; set to 10. the command is shown on multiple lines for readability purposes only. data:seq #3158"mysequence","usb:\a.arb",0,once,lowatstart,10,"usb:\b.arb",5,repeat,highatstart,10,"usb:\c.arb",0,repeattiltrig,maintain,10,"usb:\a.arb",0,once,lowatstart,10 many text editors let you count the number of bytes in the block simply by highlighting the characters from the "m" in mysequence to the "0" at the end of the line. in this example, the size is 143, which requires 3 digits to represent � hence the #3143 header. using this approach requires you to pre-load all of the arbitrary waveforms and set the amplitude and offset (or high and low levels), sample rate, and filter. see mmem:load:data to combine all that information into a single file rather than creating a block transfer with multiple scpi commands. </e></d><d><e>source:data:volatile:catalog</e><e>catalog</e><e>returns the contents of volatile waveform memory, including arbitrary waveforms and sequences.</e><e>[source[1|2]:]data:volatile:catalog? returns the contents of volatile waveform memory, including arbitrary waveforms and sequences. parameter typical return (none) "int:\builtin\exp_rise.arb","usb:\xyz\a.arb","usb:\xyz\b.arb","usb:\xyz\xyz.seq" return the contents of volatile waveform memory assuming waveforms a.arb, b.arb, and c.arb were previously loaded on channel 1 via a sequence file on usb:\xyz\xyz.seq:data:vol:cat? </e></d><d><e>source:data:volatile:clear</e><e>clear</e><e>clears waveform memory for the specified channel and reloads the default waveform.</e><e>[source[1|2]:]data:volatile:clear clears waveform memory for the specified channel and reloads the default waveform. parameter typical return (none) (none) clear contents of waveform memory on channel 1 and reload default waveform:data:vol:cle </e></d><d><e>source:data:volatile:free</e><e>free</e><e>returns number of points available (free) in volatile memory. </e><e>[source[1|2]:]data:volatile:free? returns number of points available (free) in volatile memory. each arbitrary waveform loaded into volatile memory consumes space allocated in 128-point blocks, so a waveform of 8 to 128 points consumes one such block, a waveform of 129 to 256 points consumes two blocks, and so on. the standard instrument includes memory for 1 million points per channel. you may also extend the memory up to 16,000,000 points. parameter typical return (none) +382956 return number of bytes of free volatile memory:data:vol:free? </e></d><d><e>source:fm:deviation</e><e>deviation</e><e>sets the peak frequency deviation in hz. </e><e>[source[1|2]:]fm[:deviation] {&lt;peak_deviation_in_hz&gt;|minimum|maximum}[source[1|2]:]fm[:deviation]? [{minimum|maximum}] sets the peak frequency deviation in hz. this value represents the peak variation in frequency of the modulated waveform from the carrier frequency. parameter typical return 1 μhz to 15.05 (limited to 150 khz for ramp); default 100 hz +1.000000000000000e+03 set peak frequency deviation to 1 khz:fm:dev 1000 set peak frequency deviation to 1 μhz:fm:dev min the deviation cannot exceed the carrier frequency. if you attempt to set a deviation that exceeds the carrier frequency (with fm enabled), the instrument will adjust the deviation to the maximum value allowed for that carrier frequency. from the remote interface, a "settings conflict" error will also be generated. the carrier frequency plus the deviation cannot exceed the selected function's maximum frequency plus 100 khz. if you attempt to set the deviation to an invalid value, the instrument adjusts it to the maximum value allowed with the present carrier frequency. the remote interface also generates a "data out of range" error. if the deviation causes the carrier waveform to exceed a frequency boundary for the current duty cycle (square waveform only), the instrument will adjust the duty cycle to the maximum value allowed with the present carrier frequency. from the remote interface, a "settings conflict" error will also be generated. if you select the external modulating source, the deviation is controlled by the �5 v signal level on the rear-panel modulation in connector.for example, if the frequency deviation is 100 khz, then a +5 v signal level corresponds to a 100 khz increase in frequency.lower external signal levels produce less deviation and negative signal levels reduce the frequency below the carrier frequency. </e></d><d><e>source:fm:internal:frequency</e><e>frequency</e><e>sets the frequency of the modulating waveform. </e><e>[source[1|2]:]fm:internal:frequency {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]fm:internal:frequency? [{minimum|maximum}] sets the frequency of the modulating waveform. the modulating source waveform operates at that frequency, within the frequency limits of that waveform. parameter typical return 1 μhz to the maximum allowed for the internal function. default 10 hz +1.000000000000000e+04 set the modulating frequency to 10 khz:fm:int:freq 10000 when you select an arbitrary waveform as the modulating source, the frequency changes to the frequency of the arbitrary waveform, which is based on the sample rate and the number of points in the arbitrary waveform. when using an arbitrary waveform for the modulating source, changing this parameter also changes the cached metadata representing the arbitrary waveform's sample rate. you can also change the modulating frequency of an arbitrary waveform with function:arbitrary:frequency, function:arbitrary:period, and function:arbitrary:srate. these commands and the modulation frequency command are directly coupled in order to keep the arbitrary waveform behaving exactly as it was last played. if you later turn modulation off and select that same arbitrary waveform as the current function, its sample rate (and corresponding frequency based upon the number of points) will be the same as it was when played as the modulation source. if the internal function is triangle, upramp, or dnramp, the maximum frequency limited to 200 khz. if the internal function is prbs, the frequency refers to bit rate and is limited to 50 mbps. this command should be used only with the internal modulation source (fm:source internal). </e></d><d><e>source:fm:internal:function</e><e>function</e><e>this command selects the shape of the modulating waveform.</e><e>[source[1|2]:]fm:internal:function &lt;function&gt;[source[1|2]:]fm:internal:function? this command selects the shape of the modulating waveform. parameter typical return {sinusoid|square|ramp|nramp|triangle|noise|prbs|arb}, default sinusoidview internal function waveforms. sin, squ, ramp, nram, tri, nois, prbs, or arb select a sine wave as the modulating waveform.fm:int:func sin this command should be used only with the internal modulation source (fm:source internal). some combinations of carrier and internal function are not allowed: prbs carrier and prbs internal function, arb carrier and arb internal function. you can use noise as the modulating waveform, but you cannot use noise, pulse, or dc as the carrier. </e></d><d><e>source:fm:source</e><e>source</e><e>select the source of the modulating signal.</e><e> am:source [source[1|2]:]am:source {internal|external|ch1|ch2}[source[1|2]:]am:source?[source[1|2]:]bpsk:source {internal|external}[source[1|2]:]bpsk:source[source[1|2]:]fm:source {internal|external|ch1|ch2}[source[1|2]:]fm:source[source[1|2]:]fskey:source {internal|external}[source[1|2]:]fskey:source[source[1|2]:]pm:source {internal|external|ch1|ch2}[source[1|2]:]pm:source[source[1|2]:]pwm:source {internal|external|ch1|ch2}[source[1|2]:]pwm:source? select the source of the modulating signal. parameter typical return {internal|external|ch1|ch2}, default internal. bpsk and fskey cannot accept ch1 or ch2 int, ext, ch1, or ch2 select external modulation source:am:sour ext (could also substitute fm, bpsk, fsk, pm, or pwm for am) remarks if you select external, the carrier waveform is modulated with an external waveform. specifically: am:the modulation depth is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if modulation depth (am[:depth]) is 100%, then when the modulating signal is at +5 v, the output will be at the maximum amplitude. similarly, a -5 v modulating signal produces output at minimum amplitude. fm:if you select the external modulating source, the deviation is controlled by the �5 v signal level on the rear-panel modulation in connector.for example, if the frequency deviation is 100 khz, then a +5 v signal level corresponds to a 100 khz increase in frequency.lower external signal levels produce less deviation and negative signal levels reduce the frequency below the carrier frequency. pm:with the external modulating source, deviation is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if you have set the frequency deviation to 180 degrees, then a +5 v signal level corresponds to a +180 degree phase deviation. lower external signal levels produce less deviation, and negative signal levels produce negative deviation. pulse as selected function: the pulse width or pulse duty cycle deviation is controlled by the �5 v signal level present on the rear-panel modulation in connector. for example, if you have set the pulse width deviation to 50 μs using the pwm:deviation command, then a +5 v signal level corresponds to a 50 μs width increase. lower external signal levels produce less deviation. with external source, the output phase (bpsk) or frequency (fsk) is determined by the signal level on the rear-panel ext trig connector. when a logic low is present, the carrier phase or carrier frequency is output. when a logic high is present, the phase shifted phase or hop frequency is output. the maximum external bpsk rate is 1 mhz, and the maximum fsk rate is 1 mhz. note: the connector used for externally-controlled bpsk or fsk waveforms (trig in) is not the same connector that is used for externally-modulated am, fm, pm, and pwm waveforms (modulation in). when used for bpsk or fsk, the trig in connector does not have adjustable edge polarity and is not affected by the trigger[1|2]:slope command. with internal source, the rate at which output phase (bpsk) or frequency (fskey) "shifts" between the carrier phase or frequency and the alternate phase or frequency is determined by the bpsk rate (bpsk:internal:rate) or fsk rate (fskey:internal:rate). a channel may not be its own modulation source. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:fm:state</e><e>state</e><e>enables or disables modulation.

</e><e> am:state [source[1|2]:]am:state {on|1|off|0}[source[1|2]:]am:state?[source[1|2]:]bpsk:state {on|1|off|0}[source[1|2]:]bpsk:state[source[1|2]:]fm:state {on|1|off|0}[source[1|2]:]fm:state[source[1|2]:]fskey:state {on|1|off|0}[source[1|2]:]fskey:state[source[1|2]:]pm:state {on|1|off|0}[source[1|2]:]pm:state[source[1|2]:]pwm:state {on|1|off|0}[source[1|2]:]pwm:state? enables or disables modulation. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable am (could also substitute fm, bpsk, fsk, pm, or pwm):am:stat on to avoid multiple waveform changes, enable modulation after configuring the other modulation parameters. only one modulation mode may be enabled at a time. the instrument will not enable modulation with sweep or burst enabled. when you enable modulation, the sweep or burst mode is turned off. pwm is allowed only when pulse is the selected function. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:frequency</e><e>frequency</e><e>sets the output frequency.</e><e>[source[1|2]:]frequency {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]frequency? [{minimum|maximum}] sets the output frequency. this command is paired with function:pulse:period; whichever one is executed last overrides the other. parameter typical return 1 μhz to maximum instrument frequency, except for triangle and ramp, which are limited to 200 khz. default 1 khz +1.000000000000000e+03 set output frequency to 60 hz:freq 60 function limitations: the frequency limits are function dependent, as shown in the above table. if you send a command specifying a frequency that is not in the appropriate range for the current function, an error will occur. for example, if the current function is "ramp" and you send the command freq 20 mhz, a "data out of range" error is generated and the frequency is set to 200 khz, which is the maximum for a ramp waveform. </e></d><d><e>source:frequency:center</e><e>center</e><e>sets the center frequency.</e><e>[source[1|2]:]frequency:center {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]frequency:center? [{minimum|maximum}] sets the center frequency. used with frequency span for a frequency sweep. parameter typical return 1 μhz to maximum instrument frequency, except for triangle and ramp, which are limited to 200 khz. default default 550 hz +1.000000000000000e+03 set sweep center frequency to 1 khz:freq:cent 1000 the following equation shows how center frequency is limited by span frequency. center frequency (max) = max. frequency for waveform - (span/2) the following equation shows how center frequency relates to start and stop frequencies. center frequency = |(stop frequency - start frequency)|/2 </e></d><d><e>source:frequency:couple:mode</e><e>mode</e><e>sets the type of frequency coupling between frequency coupled channels; offset specifies a constant frequency offset between channels; ratio specifies a constant ratio between the channels' frequencies.</e><e>[source[1|2]:]frequency:couple:mode {offset|ratio}[source[1|2]:]frequency:couple:mode? sets the type of frequency coupling between frequency coupled channels; offset specifies a constant frequency offset between channels; ratio specifies a constant ratio between the channels' frequencies. parameter typical return {offset|ratio}, default ratio with ratio 1.0 offs or rat set frequency coupling mode to offset:freq:coup:mode offs power-on default for frequency coupling is off. specifying source1 or source2 is irrelevant; either syntax sets the same coupling mode for both channels. </e></d><d><e>source:frequency:couple:offset</e><e>offset</e><e>sets the offset frequency when an instrument is in frequency coupled mode offset.</e><e>[source[1|2]:]frequency:couple:offset &lt;frequency&gt;[source[1|2]:]frequency:couple:offset? sets the offset frequency when an instrument is in frequency coupled mode offset. parameter typical return a number between plus and minus the instrument's maximum frequency (limited to � 200 khz for ramps and triangles); default 0. +7.650000000000000e+05 set frequency of channel 2 to 10.245 mhz above frequency of channel 1:freq:coup:offs 10.245 mhz set frequency of channel 1 to 350 khz above frequency of channel 2:sour2:freq:coup:offs 350 khz set frequency of channel 1 to 455 khz below frequency of channel 2:sour2:freq:coup:offs -455 khz the source channel (source1 or source2) is used as the reference channel and the offset is applied to the other channel. for example, suppose the instrument is in freq:couple:state on and in freq:couple:mode offset (frequency offset mode active), and channel 1 is currently operating at 1.0 mhz. the command source1:frequency:couple:offset 500 will cause channel 1 to remain at 1.0 mhz, and channel 2 to be set to 1.5 mhz. as the frequency of either channel is changed, the frequency of the other channel will change to maintain the 500 khz offset. if the frequency coupling would cause either channel to exceed instrument frequency specifications for the present functions, the command will result in an error, and the frequency will be set to its maximum or minimum limit for that channel. frequency coupling is not valid with arbitrary waveforms, but you can couple the sample rate of arbitrary waveforms. </e></d><d><e>source:frequency:couple:ratio</e><e>ratio</e><e>sets offset ratio between channel frequencies in frequency coupled mode ratio.</e><e>[source[1|2]:]frequency:couple:ratio &lt;ratio&gt;[source[1|2]:]frequency:couple:ratio? sets offset ratio between channel frequencies in frequency coupled mode ratio. parameter typical return 0.001 to 1000, default 1 +7.500000000000000e-01 set frequency of channel 2 to twice the frequency of channel 1:freq:coup:rat 2.0 set frequency of channel 1 to 3.14 times the frequency of channel 2:sour2:freq:coup:rat 3.14 the source channel (source1 or source2) is used as the reference channel and the ratio is applied to the other channel. for example, suppose the instrument is in frequency:couple on and frequency:couple:mode ratio. furthermore, suppose channel 1 is currently operating at 2 khz, and channel 2 is at 10 khz. the command source1:frequency:couple:ratio 2.5 will cause channel 1 to remain at 2 khz, and channel 2 to be set to 5 khz. as the frequency of either channel is changed, the frequency of the other channel will change to maintain the 2.5 ratio. if the frequency coupling would cause either channel to exceed instrument frequency specifications for the present functions, the command will result in an error, and the frequency will be set to its maximum or minimum limit for that channel. frequency coupling is not valid with arbitrary waveforms, but you can couple the sample rate of arbitrary waveforms. </e></d><d><e>source:frequency:couple:state</e><e>state</e><e>enables/disables frequency coupling between channels in a two-channel instrument.</e><e>[source[1|2]:]frequency:couple[:state] {on|1|off|0}[source[1|2]:]frequency:couple[:state]? enables/disables frequency coupling between channels in a two-channel instrument. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) turn on the frequency couple state:freq:coup on specifying on starts frequency coupling as specified by frequency:couple:mode. if the current offset or ratio, combined with the current frequency settings, would cause either frequency to exceed instrument specifications, the instrument will generate an error and the exceeded frequency will clip at its maximum or minimum value. if setting mode to ratio and setting ratio to 1.0 still exceeds the specifications of either channel (for example, channel 1 is a 3 mhz sine and channel 2 is a ramp, which cannot go that high), an error message will be generated and frequency:couple will be turned off. </e></d><d><e>source:frequency:mode</e><e>mode</e><e>sets the type of frequency mode as a continuous wave at a fixed frequency (cw or fixed), a frequency sweep (sweep), or a frequency list (list).</e><e>[source[1|2]:]frequency:mode {cw|list|sweep|fixed}[source[1|2]:]frequency:mode? sets the type of frequency mode as a continuous wave at a fixed frequency (cw or fixed), a frequency sweep (sweep), or a frequency list (list). parameter typical return {cw|list|sweep|fixed}, default cw cw, list, swe, or fix set frequency mode to list:freq:mode list if the mode is set to list, use list:frequency to specify the frequency list. </e></d><d><e>source:frequency:span</e><e>span</e><e>sets frequency span (used in conjunction with the center frequency) for a frequency sweep.</e><e>[source[1|2]:]frequency:span {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]frequency:span? [{minimum|maximum}] sets frequency span (used in conjunction with the center frequency) for a frequency sweep. parameter typical return � instrument's maximum frequency (� 200 khz for ramps and triangles), default 900 hz +1.000000000000000e+02 set sweep frequency span to 100 khz:freq:span 100 khz the following equation shows the limitation for the maximum frequency span: frequency span (max) = (max. frequency for the chosen waveform - center frequency) x 2 the following equation shows the relationship between the span and the start/stop frequencies. frequency span = stop frequency - start frequency to sweep up in frequency, set a positive frequency span; to sweep down, set a negative frequency span. </e></d><d><e>source:frequency:start</e><e>start</e><e>sets the start frequencies for a frequency sweep.</e><e>[source[1|2]:]frequency:start {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]frequency:start? [{minimum|maximum}] [source[1|2]:]frequency:stop {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]frequency:stop? [{minimum|maximum}] sets the start and stop frequencies for a frequency sweep. parameter typical return � instrument's maximum frequency (� 200 khz for ramps and triangles), default 100 hz +1.000000000000000e+02 set sweep start and stop frequency to 100 hz and 1 khz, respectively:freq:star 100freq:stop 1000 </e></d><d><e>source:frequency:stop</e><e>stop</e><e>sets the stop frequencies for a frequency sweep.</e><e>[source[1|2]:]frequency:stop {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]frequency:stop? [{minimum|maximum}] sets the start and stop frequencies for a frequency sweep. parameter typical return � instrument's maximum frequency (� 200 khz for ramps and triangles), default 100 hz +1.000000000000000e+02 set sweep start and stop frequency to 100 hz and 1 khz, respectively:freq:star 100freq:stop 1000 </e></d><d><e>source:fskey:frequency</e><e>frequency</e><e>sets the fsk alternate (or "hop") frequency.</e><e>[source[1|2]:]fskey:frequency {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]fskey:frequency? [{minimum|maximum}] sets the fsk alternate (or "hop") frequency. parameter typical return 1 μhz to maximum instrument frequency (200 khz limit for ramps), default 100 hz +1.000000000000000e-06 set hop frequency to 10 khz:fsk:freq 10000 set hop frequency to 1 μhz:fsk:freq min </e></d><d><e>source:fskey:internal:rate</e><e>rate</e><e>sets the rate at which output frequency "shifts" between the carrier and hop frequency.</e><e>[source[1|2]:]fskey:internal:rate {&lt;rate_in_hz&gt;|minimum|maximum}[source[1|2]:]fskey:internal:rate? [{minimum|maximum}] sets the rate at which output frequency "shifts" between the carrier and hop frequency. parameter typical return 1 mhz to 1 mhz, default 100 hz +1.000000000000000e-03 set fsk rate to 10 khz:fsk:int:rate 10000 set fsk rate to 1 mhz:fsk:int:rate min the fsk rate is used only with the internal source (fsk:source internal). the modulating waveform is a square wave with a 50% duty cycle. fskey subsystem </e></d><d><e>source:fskey:source</e><e>source</e><e>select the source of the modulating signal.</e><e> am:source [source[1|2]:]am:source {internal|external|ch1|ch2}[source[1|2]:]am:source?[source[1|2]:]bpsk:source {internal|external}[source[1|2]:]bpsk:source[source[1|2]:]fm:source {internal|external|ch1|ch2}[source[1|2]:]fm:source[source[1|2]:]fskey:source {internal|external}[source[1|2]:]fskey:source[source[1|2]:]pm:source {internal|external|ch1|ch2}[source[1|2]:]pm:source[source[1|2]:]pwm:source {internal|external|ch1|ch2}[source[1|2]:]pwm:source? select the source of the modulating signal. parameter typical return {internal|external|ch1|ch2}, default internal. bpsk and fskey cannot accept ch1 or ch2 int, ext, ch1, or ch2 select external modulation source:am:sour ext (could also substitute fm, bpsk, fsk, pm, or pwm for am) remarks if you select external, the carrier waveform is modulated with an external waveform. specifically: am:the modulation depth is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if modulation depth (am[:depth]) is 100%, then when the modulating signal is at +5 v, the output will be at the maximum amplitude. similarly, a -5 v modulating signal produces output at minimum amplitude. fm:if you select the external modulating source, the deviation is controlled by the �5 v signal level on the rear-panel modulation in connector.for example, if the frequency deviation is 100 khz, then a +5 v signal level corresponds to a 100 khz increase in frequency.lower external signal levels produce less deviation and negative signal levels reduce the frequency below the carrier frequency. pm:with the external modulating source, deviation is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if you have set the frequency deviation to 180 degrees, then a +5 v signal level corresponds to a +180 degree phase deviation. lower external signal levels produce less deviation, and negative signal levels produce negative deviation. pulse as selected function: the pulse width or pulse duty cycle deviation is controlled by the �5 v signal level present on the rear-panel modulation in connector. for example, if you have set the pulse width deviation to 50 μs using the pwm:deviation command, then a +5 v signal level corresponds to a 50 μs width increase. lower external signal levels produce less deviation. with external source, the output phase (bpsk) or frequency (fsk) is determined by the signal level on the rear-panel ext trig connector. when a logic low is present, the carrier phase or carrier frequency is output. when a logic high is present, the phase shifted phase or hop frequency is output. the maximum external bpsk rate is 1 mhz, and the maximum fsk rate is 1 mhz. note: the connector used for externally-controlled bpsk or fsk waveforms (trig in) is not the same connector that is used for externally-modulated am, fm, pm, and pwm waveforms (modulation in). when used for bpsk or fsk, the trig in connector does not have adjustable edge polarity and is not affected by the trigger[1|2]:slope command. with internal source, the rate at which output phase (bpsk) or frequency (fskey) "shifts" between the carrier phase or frequency and the alternate phase or frequency is determined by the bpsk rate (bpsk:internal:rate) or fsk rate (fskey:internal:rate). a channel may not be its own modulation source. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:fskey:state</e><e>state</e><e>enables or disables modulation.</e><e> am:state [source[1|2]:]am:state {on|1|off|0}[source[1|2]:]am:state?[source[1|2]:]bpsk:state {on|1|off|0}[source[1|2]:]bpsk:state[source[1|2]:]fm:state {on|1|off|0}[source[1|2]:]fm:state[source[1|2]:]fskey:state {on|1|off|0}[source[1|2]:]fskey:state[source[1|2]:]pm:state {on|1|off|0}[source[1|2]:]pm:state[source[1|2]:]pwm:state {on|1|off|0}[source[1|2]:]pwm:state? enables or disables modulation. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable am (could also substitute fm, bpsk, fsk, pm, or pwm):am:stat on to avoid multiple waveform changes, enable modulation after configuring the other modulation parameters. only one modulation mode may be enabled at a time. the instrument will not enable modulation with sweep or burst enabled. when you enable modulation, the sweep or burst mode is turned off. pwm is allowed only when pulse is the selected function. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:function</e><e>function</e><e>selects output function.</e><e>[source[1|2]:]function &lt;function&gt;[source[1|2]:]function? selects output function. parameter typical return {sinusoid | square | triangle | ramp | pulse | prbs | noise | arb | dc}, default sinusoid sin, squ, tri, ramp, puls, prbs, nois, arb, or dc set output on channel 2 to sine:sour2:func sin the selected waveform (other than an arbitrary waveform) is output using the previously selected frequency, amplitude, and offset voltage settings. arbitrary waveforms are played according to the settings specified in the arbitrary waveform file. brand new arbitrary waveforms inherit the current arbitrary waveform settings. noise generates white gaussian noise with adjustable bandwidth and crest factor about 3.5. prbs generates pseudo-random noise using linear feedback shift register (lfsr) user selectable methods. arb generates the arbitrary waveform currently selected by function:arbitrary. function limitations: if you change to a function whose maximum frequency is less than that of the current function, the frequency is adjusted to the maximum for the new function. for example, if you change a high frequency sine wave to the ramp function, the instrument will adjust the output frequency to 200 khz (the upper limit for ramps)from the remote interface, a "settings conflict" error will also be generated.d. amplitude limitations: if you change to a function whose maximum amplitude is less than that of the current function, the amplitude is adjusted to the maximum for the new function. this may occur when the output units are vrms or dbm due to the differences in crest factor for the various output functions for example, if you change a 5 vrms square wave (into 50 ω) to a sine wave, the instrument will adjust the amplitude to 3.536 vrms (the upper limit for sine in vrms). the remote interface will also generate a "settings conflict" error. </e></d><d><e>source:function:arbitrary</e><e>arbitrary</e><e>selects an arbitrary waveform (.arb/.barb) or sequence (.seq) that has previously been loaded into volatile memory for the channel specified with mmemory:load:data[1|2] or data:arbitrary.</e><e>[source[1|2]:]function:arbitrary {&lt;filename&gt;}[source[1|2]:]function:arbitrary? selects an arbitrary waveform (.arb/.barb) or sequence (.seq) that has previously been loaded into volatile memory for the channel specified with mmemory:load:data[1|2] or data:arbitrary. several waveforms can be in volatile memory simultaneously. parameter typical return see mmemory:load:data[1|2], for valid &lt;filename&gt; formats. "int:\myarb103.arb" select an arbitrary waveform in memory on channel 2:func:arb "int:\myarb103.arb" load an arbitrary waveform from the internal drive into volatile memory. then select and play the waveform:mmem:load:data "int:\builtin\sinc.arb"function:arbitrary "int:\builtin\sinc.arb"function arb the &lt;filename&gt; should match the filename used to load the arbitrary waveform or sequence into volatile memory with mmemory:load:data[1|2], data:arbitrary, data:arbitrary:dac, or data:sequence. when you store an arbitrary waveform segment or sequence (mmemory:store:data[1|2]), the instrument's current settings (voltage values, sample rate, filter type, and so on) are stored in the segment or sequence file. when you play the file for the first time with function:arbitrary, these settings are loaded and override the instrument's current settings. if you have manually edited a segment or sequence file such that the instrument settings have been removed, the instrument settings will not be changed when you execute function:arbitrary. when you store an arbitrary waveform segment or sequence (mmemory:store:data[1|2]), the instrument's current settings (voltage values, sample rate, filter type, and so on) are stored in the segment or sequence file. when you play the file for the first time with function:arbitrary, these settings are loaded and override the instrument's current settings. if you have manually edited a segment or sequence file such that the instrument settings have been removed, the instrument settings will not be changed when you execute function:arbitrary. </e></d><d><e>source:function:arbitrary:advance</e><e>advance</e><e>specifies the method for advancing to the next arbitrary waveform data point for the specified channel.</e><e>[source[1|2]:]function:arbitrary:advance {trigger|srate}[source[1|2]:]function:arbitrary:advance? specifies the method for advancing to the next arbitrary waveform data point for the specified channel. parameter typical return {trigger|srate}, default trig trig or srat set advance methord to trigger:func:arb:adv trig trigger causes instrument to advance to next data point with each trigger received and forces trigger[1|2]:source to external. srate causes instrument to advance to next data point at the sample rate set by function:arbitrary:srate. </e></d><d><e>source:function:arbitrary:balance:gain</e><e>gain</e><e>sets the gain balance ratio for dual arbitrary waveforms.</e><e>function:arbitrary:balance:gain {&lt;percent&gt;|maximum|minimum}function:arbitrary:balance:gain? {maximum|minimum}this command requires the iq player option.sets the gain balance ratio for dual arbitrary waveforms.parametertypical return-30 to +30+1.02000000e+000load an arbitrary waveform from the usb drive and set up the balance gain (channel 2 down by 1.02%) and balance offsets (120 mv for channel 1 and -38 mv for channel 2):func:arb "usb:\qam32.barb"func:arb:bal:gain 1.02func:arb:bal:offs1 0.12func:arb:bal:offs2 -0.038func:arb:bal onboth channels must stay on the same amplifier range.a value of 0 means that both channels use their current amplitude. a positive value means that the amplitude of channel 2 is pushed down, while the amplitude of channel 1 remains constant, a negative value pushes channel 1 down while holding channel 2 constant. see the following table for examples.&lt;percent&gt;channel 1amplitude %channel 2amplitude %-2080100-1090100010010010100902010080this command is enabled by function:arbitrary:balance on.this setting is stored as part of the instrument state, and it is affected by *rst.</e></d><d><e>source:function:arbitrary:balance:offset1</e><e>offset1</e><e>specifies the offset (in volts) added to the dual arbitrary waveform offset for the specified channel.

</e><e>function:arbitrary:balance:offset[1|2] {&lt;volts&gt;|maximum|minimum}function:arbitrary:balance:offset[1|2]? {maximum|minimum}this command requires the iq player option.specifies the offset (in volts) added to the dual arbitrary waveform offset for the specified channel.parametertypical returna floating point value, limited by the dual arbitrary waveform amplitude.+1.00000000e+000load an arbitrary waveform from the usb drive and set up the balance gain (channel 2 down by 1.02%) and balance offsets (120 mv for channel 1 and -38 mv for channel 2):func:arb "usb:\qam32.barb"func:arb:bal:gain 1.02func:arb:bal:offs1 0.12func:arb:bal:offs2 -0.038func:arb:bal onboth channels must stay on the same amplifier range.this command is enabled by function:arbitrary:balance on.this setting is stored as part of the instrument state, and it is affected by *rst.</e></d><d><e>source:function:arbitrary:balance:offset2</e><e>offset2</e><e>specifies the offset (in volts) added to the dual arbitrary waveform offset for the specified channel.

</e><e>function:arbitrary:balance:offset[1|2] {&lt;volts&gt;|maximum|minimum}function:arbitrary:balance:offset[1|2]? {maximum|minimum}this command requires the iq player option.specifies the offset (in volts) added to the dual arbitrary waveform offset for the specified channel.parametertypical returna floating point value, limited by the dual arbitrary waveform amplitude.+1.00000000e+000load an arbitrary waveform from the usb drive and set up the balance gain (channel 2 down by 1.02%) and balance offsets (120 mv for channel 1 and -38 mv for channel 2):func:arb "usb:\qam32.barb"func:arb:bal:gain 1.02func:arb:bal:offs1 0.12func:arb:bal:offs2 -0.038func:arb:bal onboth channels must stay on the same amplifier range.this command is enabled by function:arbitrary:balance on.this setting is stored as part of the instrument state, and it is affected by *rst.</e></d><d><e>source:function:arbitrary:balance:state</e><e>state</e><e>enables or disables channel balancing for dual arbitrary waveforms </e><e>function:arbitrary:balance[:state] &lt;state&gt;function:arbitrary:balance:[:state]?this command requires the iq player option.enables or disables channel balancing for dual arbitrary waveforms (function:arbitrary:balance:gain and function:arbitrary:balance:offset).parametertypical return{on|1|off|0}, default off0 (off) or 1 (on)load an arbitrary waveform from the usb drive and set up the balance gain (channel 2 down by 1.02%) and balance offsets (120 mv for channel 1 and -38 mv for channel 2):func:arb "usb:\qam32.barb"func:arb:bal:gain 1.02func:arb:bal:offs1 0.12func:arb:bal:offs2 -0.038func:arb:bal onthis feature can be used to compensate for minor variations in the load impedances on the two channels, or for minor differences between the two channels of information in the original dual arbitrary waveform file.when the &lt;state&gt; is on, both channels must stay on the same amplifier range.this setting is stored as part of the instrument state, and it is affected by *rst.</e></d><d><e>source:function:arbitrary:filter</e><e>filter</e><e>specifies the filter setting for an arbitrary waveform.</e><e>[source[1|2]:]function:arbitrary:filter {normal|step|off}[source[1|2]:]function:arbitrary:filter? specifies the filter setting for an arbitrary waveform. parameter typical return {normal|step|off}, default step normal, step, or off set filter to normal:function:arbitrary:filter norm normal filters the data points with the filter that provides the flattest frequency response. this effectively smoothes the signal, but sharp transitions will have pre-shoot and overshoot. step filters the data points in a way that effectively smoothes the signal while minimizing the pre-shoot and overshoot. however, this setting has a narrower bandwidth than the normal setting. off steps from point to point at the sample rate. moves between data points are accomplished as quickly as possible with no smoothing. if the &lt;mode&gt; is set to off, the instrument uses a filter whose bandwidth limit restricts the maximum sample rate for the arbitrary waveform to 62.5 msa/s. </e></d><d><e>source:function:arbitrary:frequency</e><e>frequency</e><e>sets the frequency for the arbitrary waveform.

</e><e>[source[1|2]:]function:arbitrary:frequency {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]function:arbitrary:frequency? {minimum|maximum}[source[1|2]:]function:arbitrary:period {&lt;period&gt;|minimum|maximum}[source[1|2]:]function:arbitrary:period? {minimum|maximum} sets the frequency or period for the arbitrary waveform. parameter typical return &lt;frequency&gt; (hz): limited by the number of waveform points; default based on 40 ksa/s sample rate. +1.000000000000000e+03 &lt;period&gt; (seconds): limited by the number of waveform points; default based on 40 ksa/s sample rate. +1.000000000000000e-03 set arbitrary waveform frequency to 1000 hz.func:arb:freq 1000 with function:arbitrary:filter off, the arbitrary waveform sample rate is limited to 1/4 of the maximum sample rate. the &lt;frequency&gt; ranges from 1 �hz to (max sample rate(250 msa/s) / ( 8 points), or 31.25 mhz. frequency is also limited by the filter setting. with function:arbitrary:filter off, the arbitrary waveform sample rate is limited to 62.5 msa/s, or 1/4 of the 250 msa/s rate. therefore, frequency is also reduced to 7.8125 mhz for an eight point waveform. the arbitrary waveform sample rate and frequency are not coupled to sour:freq, which applies to only non-arbitrary waveforms. the arbitrary waveform plays at a speed specified by the sample rate. when setting the frequency or period of an arbitrary waveform, the instrument changes the sample rate based on the number of points in the waveform and the new frequency or period setting. the new frequency or period may be altered slightly to meet the restrictions of sample rate resolution and the number of points. in other words, frequency will be recalculated from the new sample rate and number of points to ensure compatibility between the coupled parameters. this is due to math resolution of 15 digits in combination with a sample rate that can also be 15 digits. changing the number of points in the waveform, or changing the sample rate with function:arbitrary:srate, changes the frequency and period settings. </e></d><d><e>source:function:arbitrary:period</e><e>period</e><e>sets the period for the arbitrary waveform.</e><e>[source[1|2]:]function:arbitrary:period {&lt;period&gt;|minimum|maximum}[source[1|2]:]function:arbitrary:period? {minimum|maximum} sets the frequency or period for the arbitrary waveform. parameter typical return &lt;frequency&gt; (hz): limited by the number of waveform points; default based on 40 ksa/s sample rate. +1.000000000000000e+03 &lt;period&gt; (seconds): limited by the number of waveform points; default based on 40 ksa/s sample rate. +1.000000000000000e-03 set arbitrary waveform frequency to 1000 hz.func:arb:freq 1000 with function:arbitrary:filter off, the arbitrary waveform sample rate is limited to 1/4 of the maximum sample rate. the &lt;frequency&gt; ranges from 1 �hz to (max sample rate(250 msa/s) / ( 8 points), or 31.25 mhz. frequency is also limited by the filter setting. with function:arbitrary:filter off, the arbitrary waveform sample rate is limited to 62.5 msa/s, or 1/4 of the 250 msa/s rate. therefore, frequency is also reduced to 7.8125 mhz for an eight point waveform. the arbitrary waveform sample rate and frequency are not coupled to sour:freq, which applies to only non-arbitrary waveforms. the arbitrary waveform plays at a speed specified by the sample rate. when setting the frequency or period of an arbitrary waveform, the instrument changes the sample rate based on the number of points in the waveform and the new frequency or period setting. the new frequency or period may be altered slightly to meet the restrictions of sample rate resolution and the number of points. in other words, frequency will be recalculated from the new sample rate and number of points to ensure compatibility between the coupled parameters. this is due to math resolution of 15 digits in combination with a sample rate that can also be 15 digits. changing the number of points in the waveform, or changing the sample rate with function:arbitrary:srate, changes the frequency and period settings. </e></d><d><e>source:function:arbitrary:points</e><e>points</e><e>returns the number of points in the currently selected arbitrary waveform.</e><e>[source[1|2]:]function:arbitrary:points? returns the number of points in the currently selected arbitrary waveform. parameter typical return (none) +100000 return the number of points in the current arbitrary waveform on channel 1:func:arb:poin? the maximum number of points depends on the instrument's memory, which is based on the model and options. </e></d><d><e>source:function:arbitrary:ptpeak</e><e>ptpeak</e><e>sets peak to peak voltage.</e><e>[source[1|2]:]function:arbitrary:ptpeak {&lt;voltage&gt;|minimum|maximum}[source[1|2]:]function:arbitrary:ptpeak? [{minimum|maximum}] sets peak to peak voltage. parameter typical return 10 vdc into 50 ω, 20 vdc into an open circuit; default 100 mv +4.000000000000000e+00 set peak to peak voltage to 4 v:func:arbitrary:ptpeak 4 limits due to amplitude: you can set the voltage levels to a positive or negative value with the restrictions shown below. vpp is the maximum peak-to-peak amplitude for the selected output termination (10 vpp into 50 ω or 20 vpp into an open circuit). vhigh � vlow� vpp (max) and vhigh, vlow� vpp (max)/2 differences between remote and front panel operation: remote interface: setting the high or low level from the remote interface can change the high level or low level to achieve the desired setting. in this case either a "data out of range" or "settings conflict" error will occur. if the high level is set below the low level, the instrument will set the low level 1 mv less than the high level. if the high level is set below the low limit or the instrument output specifications, the low level will be set to the low limit or instrument output specification and the high level will be set 1 mv above the low level. a similar set of rules applies if the low level is set incorrectly. similarly, the low level can be set above the high level from the remote interface. in this case the instrument will set the high level 1 mv larger than the low level. if the low level is set higher than the high limit or the instrument output specifications, the high level will be set to the high limit or instrument output specification and the low level will be set 1 mv below the high level. front panel: setting the high or low level from the front panel may clip that level setting in order to achieve the desired level setting, and a "data out of range" error will be generated. the high level cannot be set below the low level from the front panel. note that when you set the high and low levels, you are also setting the amplitude and offset of the waveform. for example, if you set the high level to +2 v and the low level to -3 v, the resulting amplitude is 5 vpp, with a -500 mv offset. limits due to output termination: if you change the output termination setting, the displayed voltage levels will be adjusted (and no error will be generated). for example, if you set the high level to +100 mvdc and then change the output termination from 50 ω to "high impedance", the amplitude displayed on the front panel will double to +200 mvdc. if you change from "high impedance" to 50 ω, the displayed amplitude will be halved. changing the output termination setting does not change the voltage present at the output terminals of the instrument. this only changes the displayed values on the front panel and the values queried from the remote interface. the voltage present at the instrument's output depends on the load connected to the instrument. see output[1|2]:load for details. limits due to voltage:limit:state command: if the voltage limits are enabled, the level settings are checked against the specified limits (voltage:limit:high, voltage:limit:low) before a change in level is executed. if a change in output level would exceed a limit setting, the level is clipped to the maximum (or minimum) value allowed that will not exceed the limit setting and a "settings conflict" error will be generated. limits due to output coupling: if two channels are coupled, limitations of setting the levels of both channels will be checked before a change in level is executed. in this case, if a change in level would exceed a limit setting, or instrument output specifications for either channel, the level is clipped to the maximum (or minimum) allowable value and a "settings conflict" error will be generated. to invert the waveform relative to the offset voltage, use output[1|2]:polarity. </e></d><d><e>source:function:arbitrary:skew:state</e><e>state</e><e>enables or disables skew time compensation (function:arbitrary:skew:time). this is always off for modulated signals, sweeps, lists, and bursts.</e><e>function:arbitrary:skew[:state] &lt;state&gt;function:arbitrary:skew[:state]?this command requires the iq player option.enables or disables skew time compensation (function:arbitrary:skew:time). this is always off for modulated signals, sweeps, lists, and bursts.parametertypical return{on|1|off|0}, default off0 (off) or 1 (on)set the skew time to compensate for channel 1 being behind channel 2 by 140 picoseconds:function:arbitrary:skew:time 1.4e-10function:arbitrary:skew onskew compensation is typically determined empirically, using an oscilloscope and then set one time. that one-time setup will then be valid until the dut or test equipment configuration changes.the value specified by this command is not stored in the instrument state. it is stored in non-volatile memory and is not affected by *rst. </e></d><d><e>source:function:arbitrary:skew:time</e><e>time</e><e>sets a small time difference between the channels to compensate for minor variations in timing at the connector output plane or at the device under test (dut). </e><e>function:arbitrary:skew:time [{&lt;time&gt;|minimum|maximum}]function:arbitrary:skew:time? [{minimum|maximum}]this command requires the iq player option.sets a small time difference between the channels to compensate for minor variations in timing at the connector output plane or at the device under test (dut). note than func:arb:skew[:state] off for modulated signals, sweeps, lists, and bursts.parametertypical returna floating point value in the range of �4 ns. default 0.+1.40000000e-010set the skew time to compensate for channel 1 being behind channel 2 by 140 picoseconds:function:arbitrary:skew:time 1.4e-10function:arbitrary:skew onchannels may exhibit slight timing variations at the output connector plane due to variations in internal circuitry between the two channels. they may exhibit slight timing variations at the device under test (dut) due to variations in signal paths, including such things as switches and cable lengths.a positive value delays channel 2, and a negative value delays channel 1.the value specified by this command is not stored in the instrument state. it is stored in non-volatile memory and is not affected by *rst. </e></d><d><e>source:function:arbitrary:srate</e><e>srate</e><e>sets the sample rate for the arbitrary waveform.</e><e>[source[1|2]:]function:arbitrary:srate {&lt;sample_rate&gt;|minimum|maximum}[source[1|2]:]function:arbitrary:srate? {minimum|maximum} sets the sample rate for the arbitrary waveform. parameter typical return 1 �sa/s to 250 msa/s, default 40 ksa/s. limited to 62.5 msa/s if function:arbitrary:filter is off. +1.000000000000000e+04 set sample rate to 10 ksa/s:func:arb:srat 1e4 the sample rate and frequency parameter are not coupled when playing an arbitrary waveform segment. the concept of frequency does not apply for arbitrary waveform sequences. setting a sample rate when not in the arb mode will not change the frequency. for example, if the current function is sine, setting sample rate has no effect until the function changes to arb. the maximum sample rate depends on the filter applied to the arbitrary waveform. see function:arbitrary:filter for details. </e></d><d><e>source:function:arbitrary:synchronize</e><e>synchronize</e><e>causes two independent arbitrary waveforms to synchronize to first point of each waveform (two-channel instruments only).</e><e>[source]:function:arbitrary:synch causes two independent arbitrary waveforms to synchronize to first point of each waveform (two-channel instruments only). parameter typical return (none) (none) load an internal haversine waveform into channel 1 and a custom arbitrary waveform from a usb drive into channel 2. set both sample rates to 100 ksa/s and then synchronizes both channels to the first point of each waveform:mmem:load:data "int:\builtin\haversine.arb"func:arb "int:\builtin\haversine.arb"func arbfunc:arb:srate 1e+05mmem:load:data2 "usb:\myfiles\testdut3.arb"sour2:func:arb "usb:\myfiles\testdut3.arb"sour2:func arbsour2:func:arb:srat 1e+05func:arb:sync this command stops and restarts the arbitrary waveforms on both channels at whatever sample rates they happen to be set. if the two arbitrary waveforms have the same number of points, they will remain synchronized over multiple repetitions; otherwise, they will only be synchronized at the beginning and after numbers of repetitions that happen to be multiples of the number of points in both waveforms. for example, if you synchronize an 8-point waveform and a 10-point waveform, they will re-synchronize after 40, 80, and 120 repetitions. this functionality is similar to using burst mode, but it operates in continuous wave mode. this command also works with burst, sweep, and modulation, when trying to synchronize two arbitrary waveforms. </e></d><d><e>source:function:noise:bandwidth</e><e>bandwidth</e><e>sets bandwidth of noise function.</e><e>[source[1|2]:]function:noise:bandwidth {&lt;bandwidth&gt;| minimum | maximum}[source[1|2]:]function:noise:bandwidth? [{minimum | maximum}] sets bandwidth of noise function. parameter typical return 1 mhz to instrument's maximum frequency, default 100 khz +6.000000000000000e+03 set bandwidth to 20 khz:func:noise:bwidth 20000 the noise function produces white gaussian noise with a crest factor of 4.6. the noise bandwidth is continuously adjustable to place more noise energy in the frequency range from 0 hz to the specified noise bandwidth frequency. </e></d><d><e>source:function:prbs:brate</e><e>brate</e><e>sets the pseudo-random binary sequence (prbs) bit rate.</e><e>[source[1|2]:]function:prbs:brate {&lt;bit_rate&gt; | minimum | maximum}[source[1|2]:]function:prbs:brate? {&lt;bit_rate&gt;| minimum | maximum} sets the pseudo-random binary sequence (prbs) bit rate. parameter typical return 1 mbit/s to 50 mbits/s, default 1000 bit/s +1.920000000000000e+04 set bit rate to 19,200 bits per secondfunc:prbs:brate 19200 a prbs waveform using polynomial pnx is generated by a shift register of x bits, and the output waveform begins with x sample periods of high output. sample period is the reciprocal of the sample rate (function:prbs:brate), and the channel's sync pulse indicates the waveform's start. for example, if the prbs uses pn23 with sample rate 500 hz, the output begins with 46 ms of high output (23 x 2 ms). the bit rate is independent of the data sequence length. </e></d><d><e>source:function:prbs:data</e><e>data</e><e>sets the pseudo-random binary sequence (prbs) type. </e><e>[source[1|2]:]function:prbs:data &lt;sequence_type&gt;[source[1|2]:]function:prbs:data? sets the pseudo-random binary sequence (prbs) type. setting the sequence type sets the length and feedback values as shown below. parameter typical return 335xx: {pn7|pn9|pn11|pn15|pn20|pn23}336xx: pn3 through pn32 (all 30 possible values from 3 to 32)value after pn corresponds to maximum shift register length in bits.default is pn7. pn# (pn3 through pn9) or pn## (pn10 through pn32), where each # is one digit. set data format to pn23:func:prbs:data pn23 sync output may be active during a prbs function, unlike the noise function. a prbs waveform using polynomial pnx is generated by a shift register of x bits, and the output waveform begins with x sample periods of high output. sample period is the reciprocal of the sample rate (function:prbs:brate), and the channel's sync pulse indicates the waveform's start. for example, if the prbs uses pn23 with sample rate 500 hz, the output begins with 46 ms of high output (23 x 2 ms). the polynomials are shown below. sequence type polynomial length pn3 x3 + x2 + 1 3 pn4 x4 + x3 + 1 4 pn5 x5 + x3 + 1 5 pn6 x6 + x5 + 1 6 pn7 x7 + x6 + 1 7 pn8 x8 + x6 + x5 + x4 + 1 8 pn9 x9 + x5 + 1 9 pn10 x10 + x7 + 1 10 pn11 x11 + x9 + 1 11 pn12 x12 + x6 + x4 + x1 + 1 12 pn13 x13 + x4 + x3 + x1 + 1 13 pn14 x14 + x5 + x3 + x1 + 1 14 pn15 x15 + x14 + 1 15 pn16 x16 + x15 + x13 + x4 + 1 16 pn17 x17 + x14 + 1 17 pn18 x18 + x11 + 1 18 pn19 x19 + x6 + x2 + x1 + 1 19 pn20 x20 + x17 + 1 20 pn21 x21 + x19 + 1 21 pn22 x22 + x21 + 1 22 pn23 x23 + x18 + 1 23 pn24 x24 + x23 + x22 + x17 + 1 24 pn25 x25 + x22 + 1 25 pn26 x26 + x6 + x2 + x1 + 1 26 pn27 x27 + x5 + x2 + x1 + 1 27 pn28 x28 + x25 + 1 28 pn29 x29 + x27 + 1 29 pn30 x30 + x6 + x4 + x1 + 1 30 pn31 x31 + x28 + 1 31 pn32 x32 + x22 + x2 + x1 + 1 32 </e></d><d><e>source:function:prbs:transition:both</e><e>both</e><e>sets prbs transition edge time on both edges of a prbs transition.</e><e>[source[1|2]:]function:prbs:transition[:both] {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:prbs:transition[:both]? [{minimum|maximum}] sets prbs transition edge time on both edges of a prbs transition. parameter typical return 8.4 ns (default) to 1 μsec, limited as described below +1.000000000000000e-08 set edge time to 10 ns for the leading and trailing edges (two methods):func:prbs:tran 10 nsfunc:prbs:tran .000000010 the default "both" keyword is optional and allows simultaneous control of the leading and trailing edges of the prbs waveform. the edge time applies to both the rising and falling edges, and represents the time between the 10% and 90% thresholds of each edge. the specified edge time must fit within the specified period. the instrument will limit the edge time as needed to accommodate the specified bit rate. from the remote interface, a "settings conflict" error will also be generated. </e></d><d><e>source:function:pulse:dcycle</e><e>dcycle</e><e>sets pulse duty cycle.</e><e>[source[1|2]:]function:pulse:dcycle {&lt;percent&gt;|minimum|maximum}[source[1|2]:]function:pulse:dcycle? [{minimum|maximum}] sets pulse duty cycle. parameter typical return 0 to 100, limited as described below; default 10 +5.000000000000000e+01 set duty cycle to 50%:func:puls:dcyc 50 the function:pulse:dcycle and function:pulse:width commands affect the same parameter. in some applications, it is natural to adjust pulse width directly (in seconds); in others, adjusting duty cycle seems more natural. when frequency is adjusted, if pulse width was most recently adjusted as duty cycle on the front panel, then duty cycle will be kept constant as frequency or period changes. however, if pulse width was the last setting, then pulse width will be kept constant as frequency or period changes. see function:pulse:hold. the pulse duty cycle is defined as: duty cycle = 100 x pulse width � periodpulse width is the time from the 50% threshold of a pulse's rising edge to the 50% threshold of the next falling edge. the pulse duty cycle range is 0 percent to 100 percent. however, the pulse duty cycle is limited by minimum pulse width and edge time restrictions, which prevent you from setting exactly 0 percent or 100 percent. for example, for a 1 khz pulse waveform, you are typically restricted to pulse duty cycles in the range 0.002 percent to 99.998 percent, limited by the minimum pulse width of 16 ns. restrictions based on pulse width: the specified pulse duty cycle must conform to the following restrictions determined by the minimum pulse width (wmin). the instrument will adjust pulse duty cycle as needed to accommodate the specified period. from the remote interface, a "settings conflict" error will also be generated. duty cycle � (wmin / period) x 100 and duty cycle � (1 � wmin / period) x 100 where wmin = 20 ns restrictions based on and affecting edge time: the specified pulse duty cycle may affect the edge time. the edge time is adjusted first, and then the duty cycle is adjusted to accommodate the specified period, conforming to the following restriction. from the remote interface, a "settings conflict" error will also be generated. duty cycle � [(0.8 x leading edge time) + (0.8 x trailing edge time) ]/ period x 100and duty cycle � [1 � [(0.8 x leading edge time) + (0.8 x trailing edge time) ]/ period] x 100 </e></d><d><e>source:function:pulse:hold</e><e>hold</e><e>sets the pulse waveform parameter (either pulse width or duty cycle) to be held constant as other parameters are varied.</e><e>[source[1|2]:]function:pulse:hold {width|dcycle}[source[1|2]:]function:pulse:hold? sets the pulse waveform parameter (either pulse width or duty cycle) to be held constant as other parameters are varied. parameter typical return {width|dcycle}, default width widt or dcyc set the instrument to hold duty cycle for pulse waveforms:func:puls:hold dcyc width: the instrument holds the pulse width setting (in seconds) constant as the period is varied. if a command to set a duty cycle value is received, the duty cycle is converted to the equivalent pulse width. if pulse width modulation (pwm) is turned on, the pulse width and width deviation are held as the period is varied. duty cycle deviation commands are converted to width deviations.minimum width and edge time restrictions still apply. may cause a change in the selected edge times, pulse width, or both. dcycle: the instrument holds the pulse duty cycle setting (in percent) constant as the period is varied. if a command to set a pulse width value is received, the width is converted to the equivalent duty cycle. if pulse width modulation (pwm) is turned on, the pulse duty cycle and the duty cycle deviation are held as the period is varied. width deviation commands are converted to duty cycle deviation values.minimum width and edge time restrictions still apply. may cause a change in the selected edge times, duty cycle, or both. the function:pulse:hold command does not limit period settings. the pulse width or duty cycle may be adjusted if necessary to accommodate a new period setting. </e></d><d><e>source:function:pulse:period</e><e>period</e><e>sets the period for pulse waveforms.</e><e>[source[1|2]:]function:pulse:period {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:period? [{minimum|maximum}] sets the period for pulse waveforms. this command is paired with the frequency command; the one executed last overrides the other, as frequency and period specify the same parameter. parameter typical return from reciprocal of instrument's maximum frequency up to 1,000,000 s. default 1 ms +2.000000000000000e-07 set the period to 500 ms:func:puls:per .5orfunc:puls:per 500 ms the specified period must be greater than the sum of the pulse width and the edge time. the instrument will adjust edge time and pulse width as needed to accommodate the specified period. from the remote interface, a "settings conflict" error will also be generated. the edge time is minimized first, and then the width (or duty cycle) is adjusted as shown below. period � [pulse width + ((lead edge time + trail edge time) * 0.625)] this command affects the period (and frequency) for all waveform functions (not just pulse). for example, if you select a period using function:pulse:period and then change the output function to sine wave, the specified period will be used for the new function. function limitations: if you change to a function whose minimum period exceeds the value set by this command, the period is adjusted to the new function's minimum pulse. for example, if you set a period of 2 �s and then change to the ramp function, the instrument adjusts the period to 5 �s (the minimum for ramps). from the remote interface, a "settings conflict" error will also be generated. </e></d><d><e>source:function:pulse:transition:both</e><e>both</e><e>sets the pulse edge time on both edges of a pulse.</e><e>[source[1|2]:]function:pulse:transition[:both] {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:transition:leading {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:transition:leading? [{minimum|maximum}][source[1|2]:]function:pulse:transition:trailing {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:transition:trailing? [{minimum|maximum}] sets the pulse edge time on the leading, trailing, or both edges of a pulse. parameter typical return 8.4 ns to 1 �s, limited as described below; default 10 ns +1.000000000000000e-08 set leading edge time to 10 ns (two methods): func:puls:tran:leading 10 nsfunc:puls:tran:leading .000000010 the leading edge time applies to rising edge, and represents the time from the 10% threshold to the 90% threshold of the edge; the trailing edge represents the time from the 90% threshold to the 10% threshold. the specified edge time must fit within the specified pulse width and period. the instrument will limit the edge time to accommodate the specified pulse width or duty cycle. from the remote interface, a "settings conflict" error will also be generated. </e></d><d><e>source:function:pulse:transition:leading</e><e>leading</e><e>sets the pulse edge time on the leading edges of a pulse.

</e><e>[source[1|2]:]function:pulse:transition[:both] {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:transition:leading {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:transition:leading? [{minimum|maximum}][source[1|2]:]function:pulse:transition:trailing {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:transition:trailing? [{minimum|maximum}] sets the pulse edge time on the leading, trailing, or both edges of a pulse. parameter typical return 8.4 ns to 1 �s, limited as described below; default 10 ns +1.000000000000000e-08 set leading edge time to 10 ns (two methods): func:puls:tran:leading 10 nsfunc:puls:tran:leading .000000010 the leading edge time applies to rising edge, and represents the time from the 10% threshold to the 90% threshold of the edge; the trailing edge represents the time from the 90% threshold to the 10% threshold. the specified edge time must fit within the specified pulse width and period. the instrument will limit the edge time to accommodate the specified pulse width or duty cycle. from the remote interface, a "settings conflict" error will also be generated. </e></d><d><e>source:function:pulse:transition:trailing</e><e>trailing</e><e>sets the pulse edge time on the trailing edges of a pulse.

</e><e>[source[1|2]:]function:pulse:transition[:both] {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:transition:leading {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:transition:leading? [{minimum|maximum}][source[1|2]:]function:pulse:transition:trailing {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:transition:trailing? [{minimum|maximum}] sets the pulse edge time on the leading, trailing, or both edges of a pulse. parameter typical return 8.4 ns to 1 �s, limited as described below; default 10 ns +1.000000000000000e-08 set leading edge time to 10 ns (two methods): func:puls:tran:leading 10 nsfunc:puls:tran:leading .000000010 the leading edge time applies to rising edge, and represents the time from the 10% threshold to the 90% threshold of the edge; the trailing edge represents the time from the 90% threshold to the 10% threshold. the specified edge time must fit within the specified pulse width and period. the instrument will limit the edge time to accommodate the specified pulse width or duty cycle. from the remote interface, a "settings conflict" error will also be generated. </e></d><d><e>source:function:pulse:width</e><e>width</e><e>sets pulse width.</e><e>[source[1|2]:]function:pulse:width {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:pulse:width? [{minimum|maximum}] sets pulse width. parameter typical return 16 ns to approximately 1,000,000 s, limited as described below; default 100 �s +5.000000000000000e-03 set pulse width to 5 ms (two methods):func:puls:widt 5 msfunc:puls:widt .005 the function:pulse:dcycle and function:pulse:width commands affect the same parameter. in some applications, it is natural to adjust pulse width directly (in seconds); in others, adjusting duty cycle seems more natural. when frequency is adjusted, if pulse width was most recently adjusted as duty cycle on the front panel, then duty cycle will be kept constant as frequency or period changes. however, if pulse width was the last setting, then pulse width will be kept constant as frequency or period changes. see function:pulse:hold. pulse width is the time from the 50% threshold of a pulse's rising edge to the 50% threshold of the next falling edge. the specified pulse width must be less than the difference between the period and the minimum pulse width as shown below. the instrument will adjust pulse edge time first and then limit pulse width as needed to accommodate the period.from the remote interface, a "settings conflict" error will also be generated. pulse width � period � wmin the specified pulse width must also be less than the difference between the period and the edge time as shown below. the instrument will adjust pulse edge time first and then limit pulse width as needed to accommodate the period.from the remote interface, a "settings conflict" error will also be generated. pulse width � [period - ((leading edge time + trailing edge time) * 0.625)] the pulse width must also be greater than the total time of one edge as shown below. pulse width � [(leading edge time + trailing edge time) * 0.625] </e></d><d><e>source:function:ramp:symmetry</e><e>symmetry</e><e>sets the symmetry percentage for ramp waves.</e><e>[source[1|2]:]function:ramp:symmetry {&lt;percent&gt;|minimum|maximum}[source[1|2]:]function:ramp:symmetry? [{minimum|maximum}] sets the symmetry percentage for ramp waves. parameter typical return 0 to 100, default 100 +5.000000000000000e+01 set symmetry to 50%:func:ramp:symm 50 symmetry represents the amount of time per cycle that the ramp wave is rising (assuming that the waveform polarity is not inverted). symmetry 0% symmetry 100% for ramp waveforms, the apply:ramp command overrides the current symmetry setting and selects 100%. to set a symmetry other than 100%, select the ramp waveform output with the function ramp command, then use function:ramp:symmetry to set the symmetry. the symmetry setting is remembered when you change from ramp wave to another function. when you return to the ramp wave function, the previous symmetry is used. when ramp is the modulating waveform for am, fm, pm, or pwm, the symmetry setting does not apply. the instrument always uses a ramp waveform with 100% symmetry. </e></d><d><e>source:function:square:dcycle</e><e>dcycle</e><e>sets duty cycle percentage for square wave.</e><e>[source[1|2]:]function:square:dcycle {&lt;percent&gt;|minimum|maximum}[source[1|2]:]function:square:dcycle? [{minimum|maximum}] sets duty cycle percentage for square wave. parameter typical return 0.01 to 99.99, subject to limitation of 16 ns minimum pulse width; default 50 +5.000000000000000e+01 set duty cycle to 30%:func:squ:dcyc 30sets the duty cycle to 8%, if output frequency is 5 mhz:func:squ:dcyc min duty cycle represents the amount of time per cycle that the square wave is at a high level (assuming normal polarity). for square waveforms, apply:square replaces the current duty cycle setting with 50%. to set a duty cycle other than 50%, select the square wave with function square, then use function:square:dcycle. the duty cycle setting is remembered when you change from square wave to another function. when you return to square wave, the previous duty cycle is used. limits due to frequency: as frequency is increased, minimum and maximum duty cycle limits are adjusted to maintain a minimum pulse width of 16 ns. for example, at 1 mhz the minimum duty cycle is 1.60% and maximum duty cycle is 98.40%. at 10 mhz, the minimum duty cycle is 16.00% and the maximum duty cycle is 84.00%. if you select a square waveform as the modulating waveform for am, fm, pm, or pwm, the instrument always uses a square wave with 50% duty cycle. </e></d><d><e>source:function:square:period</e><e>period</e><e>sets period for square wave.</e><e>[source[1|2]:]function:square:period {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]function:square:period? [{minimum|maximum}] sets period for square wave. parameter typical return 33.3 ns to 1,000,000 s, default 1 ms +5.000000000000000e-01 set period to 500 ms (two methods):func:square:per .5func:square:per 500 ms function limitations: if you change to a function whose minimum period exceeds the value set by this command, the period is adjusted to the new function's minimum pulse. for example, if you set a period of 2 �s and then change to the ramp function, the instrument adjusts the period to 5 �s (the minimum for ramps). from the remote interface, a "settings conflict" error will also be generated.from the remote interface, a "settings conflict" error will also be generated. the commands shown below all require the iq player option. </e></d><d><e>source:list:dwell</e><e>dwell</e><e>sets dwell time, the amount of time each frequency in a frequency list is generated.</e><e>[source[1|2]:]list:dwell {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]list:dwell? [{minimum|maximum}] sets dwell time, the amount of time each frequency in a frequency list is generated. parameter typical return 1 �s to 1000 s, default 1 s +1.200000000000000e+01 set dwell time for channel 1 to 12 s:list:dwel 12 the instrument generates each frequency in a frequency list for the specified dwell time, when trigger[1|2]:source is immediate. </e></d><d><e>source:list:frequency</e><e>frequency</e><e>specifies frequency values in a frequency list.</e><e>[source[1|2]:]list:frequency &lt;freq1&gt;[, &lt;freq2&gt;, etc.][source[1|2]:]list:frequency? specifies frequency values in a frequency list. parameter typical return list of 1 to 128 frequencies, each 1 μhz to maximum instrument frequency (up to 200 khz for triangle and ramp). default list: 100 hz, 1000 hz, and 550 hz. 2.17800000e+006,3.14000000e+003, 6.28318000e+006 set channel 1 frequency list to three frequency values:list:freq 2.718e6, 3.14e3, 6.28318e6 command overwrites previous list with new list. </e></d><d><e>source:list:frequency:points</e><e>points</e><e>returns number of frequencies in current frequency list.</e><e>[source[1|2]:]list:frequency:points? [{minimum|maximum}] returns number of frequencies in current frequency list. parameter typical return {minimum|maximum} +17 return number of entries in the channel 1 frequency list:list:freq:poin? default is list of three frequencies: 100 hz, 1000 hz, and 550 hz. minimum is 1, maximum is 128. </e></d><d><e>source:marker:cycle</e><e>cycle</e><e>sets the marker cycle number at which the front-panel sync signal goes low in a burst mode operation.</e><e>[source[1|2]:]marker:cycle {&lt;cycle_num&gt;|minimum|maximum}[source[1|2]:]marker:cycle? [{minimum|maximum}] sets the marker cycle number at which the front-panel sync signal goes low in a burst mode operation. output:sync:polarity may reverse this.. parameter typical return whole number from 2 to number of cycles in the burst plus one (ncycles+1), default 2 +2.000000000000000e+03 set the marker cycle to 2000:mark:cycl 2000 this is valid only if burst is enabled and outp:sync:mode is marker. with burst enabled, marker cycle must be less than number of cycles in burst plus one. attempting to set the marker cycle outside this range will set marker cycle equal to middle of burst. from the remote interface, a "settings conflict" error will also be generated. </e></d><d><e>source:marker:frequency</e><e>frequency</e><e>sets the marker frequency at which the front-panel sync signal goes low during a sweep.</e><e>[source[1|2]:]marker:frequency {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]marker:frequency? [{minimum|maximum}] sets the marker frequency at which the front-panel sync signal goes low during a sweep. output:sync:polarity may reverse this.. parameter typical return any frequency between start and stop frequency, default 500 hz +2.000000000000000e+03 set marker frequency to 2 khz:mark:freq 2000 this is valid only if burst is enabled and outp:sync:mode is marker. when sweep is enabled, marker frequency must be between start frequency and stop frequency. attempting to set the marker cycle outside this range will set marker frequency to start frequency or frequency (whichever is closer). from the remote interface, a "settings conflict" error will also be generated. </e></d><d><e>source:marker:point</e><e>point</e><e>sets the sample number at which the front-panel sync signal goes low within the active arbitrary waveform.</e><e>[source[1|2]:]marker:point {&lt;sample_number&gt;|minimum|maximum}[source[1|2]:]marker:point? [{minimum|maximum}] sets the sample number at which the front-panel sync signal goes low within the active arbitrary waveform. output:sync:polarity may reverse this.. parameter typical return whole number from 4 to number of samples in waveform, minus 3; default is midpoint of arbitrary waveform +1.000000000000000e+01 set marker point to 10th sample in waveform:mark:poin 10 command only sets marker point in currently active arbitrary waveform (function:arbitrary), not in a sequence. command is valid only under these conditions: output:sync:mode set to mark, func set to arb, frequency:mode set to cw output:sync:mode set to carr, func set to arb, burst on. output:sync:mode set to carr, func set to arb, frequency:mode set to sweep output:sync:mode set to mark, internal modulation active, and either function set to arb or a modulating waveform's internal function is set to arb output:sync:mode set to mark, external modulation active, and function set to arb </e></d><d><e>source:modulation:phase</e><e>phase</e><e>sets the phase of the internal modulation source when modulating by the internal source with shape sin, squ, ramp, nramp, or tri. this command applies to the 336xx models only.</e><e> [source[1|2]:]modulation:phase {&lt;angle&gt;|minimum|maximum}[source[1|2]:]modulation:phase? [source[1|2]:]modulation:phase {&lt;angle&gt;|minimum|maximum}[source[1|2]:]modulation:phase? sets the phase of the internal modulation source when modulating by the internal source with shape sin, squ, ramp, nramp, or tri. this command applies to the 336xx models only. parameter typical return from -360 to 360 (degree)from -2π to 2π (degree)from -arbitrary waveform period to +arbitrary waveform period (second) +3.000000000000000e+01 set the modulation phase to 30 degrees:unit:angl degmod:phas 30 the default units of the &lt;angle&gt; parameter are set by unit:angle. </e></d><d><e>source:phase:reference</e><e>reference</e><e>simultaneously removes the offset set by phase and adjusts the primary phase generator by an amount equivalent to the phase setting.</e><e>[source[1|2]:]phase:reference simultaneously removes the offset set by phase and adjusts the primary phase generator by an amount equivalent to the phase setting. this retains the phase relationship set with another instrument while realigning the sync signal with the output. parameter typical return (none) (none) reset the zero-phase reference point for channel 1:phas:ref the primary purpose of this command is to establish a zero-point between two connected instruments. for channel-to-channel operation on a two-channel instrument, use phase:synchronize. setting a new zero-phase reference point means that the value subsequently returned by a phase? query command is reset to "0", but the output waveform itself does not change. </e></d><d><e>source:phase:synchronize</e><e>synchronize</e><e>simultaneously resets all phase generators in the instrument, including the modulation phase generators, to establish a common, internal phase zero reference point.</e><e>[source[1|2]:]phase:synchronize simultaneously resets all phase generators in the instrument, including the modulation phase generators, to establish a common, internal phase zero reference point. this command does not affect phase setting of either channel; it simply establishes phase difference between channels as the sum of sour1:phas and sour2:phas instead of an arbitrary amount. parameter typical return (none) (none) reset all phase generators:phas:sync source1 and source2 mean nothing for this command. this command breaks the phase relation with another instrument, because it resets the phase generators. in single channel instruments, this synchronizes the main channel with the internal modulation generator. you can synchronize the phase between the primary signal and the sum signal by sending source[1|2]:phase:synchronize after setting the functions for the primary signal and the sum signal. otherwise, the phase between the two signals is arbitrary. </e></d><d><e>source:phase:unlock:error:state</e><e>state</e><e>enables or disables the generation of an error if the phase-lock is ever lost by the instrument timebase.</e><e>[source[1|2]:]phase:unlock:error:state {on|1|off|0}[source[1|2]:]phase:unlock:error:state? enables or disables the generation of an error if the phase-lock is ever lost by the instrument timebase. the instrument uses one timebase for both channels. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable the generation of phase-lock errors:phase:unlock:error:state on source1 and source2 mean nothing for this command. if the phase-lock is lost and the error is enabled, a "reference phase-locked loop is unlocked" error is generated. volatile setting, lost on power cycle. a faulty reference signal applied to the 10 mhz in connector may generate many error messages. </e></d><d><e>source:pm:deviation</e><e>deviation</e><e>sets the phase deviation in degrees. </e><e>[source[1|2]:]pm:deviation {&lt;deviation in degrees&gt;|minimum|maximum}[source[1|2]:]pm:deviation? [{minimum|maximum}] sets the phase deviation in degrees. this value represents the peak variation in phase of the modulated waveform from the carrier waveform. parameter typical return 0 to 360, default 180 +9.000000000000000e+01 set phase deviation to � 90 degreespm:dev 90 with the external modulating source, deviation is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if you have set the frequency deviation to 180 degrees, then a +5 v signal level corresponds to a +180 degree phase deviation. lower external signal levels produce less deviation, and negative signal levels produce negative deviation. </e></d><d><e>source:pm:internal:frequency</e><e>frequency</e><e>sets the frequency of the modulating waveform.</e><e>[source[1|2]:]pm:internal:frequency {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]pm:internal:frequency? [{minimum|maximum}] sets the frequency of the modulating waveform. the waveform chosen as the modulating source will operate at that frequency, within the frequency limits of that waveform. parameter typical return 1 μhz to the maximum allowed for the internal function. default 10 hz. +1.000000000000000e-06 set modulating frequency to 10 khz:pm:int:freq 10000set modulating frequency to 1 μhz:pm:int:freq min when you select an arbitrary waveform as the modulating source, the frequency changes to the frequency of the arbitrary waveform, which is based on the sample rate and the number of points in the arbitrary waveform. when using an arbitrary waveform for the modulating source, changing this parameter also changes the cached metadata representing the arbitrary waveform's sample rate. you can also change the modulating frequency of an arbitrary waveform with function:arbitrary:frequency, function:arbitrary:period, and function:arbitrary:srate. these commands and the modulation frequency command are directly coupled in order to keep the arbitrary waveform behaving exactly as it was last played. if you later turn modulation off and select that same arbitrary waveform as the current function, its sample rate (and corresponding frequency based upon the number of points) will be the same as it was when played as the modulation source. if the internal function is triangle, upramp, or dnramp, the maximum frequency limited to 200 khz. if the internal function is prbs, the frequency refers to bit rate and is limited to 50 mbps. this command should be used only with the internal modulation source (pm:source internal). </e></d><d><e>source:pm:internal:function</e><e>function</e><e>selects shape of modulating waveform.</e><e>[source[1|2]:]pm:internal:function &lt;function&gt;[source[1|2]:]pm:internal:function? selects shape of modulating waveform. parameter typical return {sinusoid|square|ramp|nramp|triangle|noise|prbs|arb}, default sinusoidview internal function waveforms. sin, squ, ramp, nram, tri, nois, prbs, or arb select a sine wave as the modulating waveform:pm:int:func sin this command should be used only with the internal modulation source (pm:source internal). you can use noise as the modulating waveform, but you cannot use noise, pulse, or dc as the carrier. pm subsystem </e></d><d><e>source:pm:source</e><e>source</e><e>select the source of the modulating signal.</e><e> am:source [source[1|2]:]am:source {internal|external|ch1|ch2}[source[1|2]:]am:source?[source[1|2]:]bpsk:source {internal|external}[source[1|2]:]bpsk:source[source[1|2]:]fm:source {internal|external|ch1|ch2}[source[1|2]:]fm:source[source[1|2]:]fskey:source {internal|external}[source[1|2]:]fskey:source[source[1|2]:]pm:source {internal|external|ch1|ch2}[source[1|2]:]pm:source[source[1|2]:]pwm:source {internal|external|ch1|ch2}[source[1|2]:]pwm:source? select the source of the modulating signal. parameter typical return {internal|external|ch1|ch2}, default internal. bpsk and fskey cannot accept ch1 or ch2 int, ext, ch1, or ch2 select external modulation source:am:sour ext (could also substitute fm, bpsk, fsk, pm, or pwm for am) remarks if you select external, the carrier waveform is modulated with an external waveform. specifically: am:the modulation depth is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if modulation depth (am[:depth]) is 100%, then when the modulating signal is at +5 v, the output will be at the maximum amplitude. similarly, a -5 v modulating signal produces output at minimum amplitude. fm:if you select the external modulating source, the deviation is controlled by the �5 v signal level on the rear-panel modulation in connector.for example, if the frequency deviation is 100 khz, then a +5 v signal level corresponds to a 100 khz increase in frequency.lower external signal levels produce less deviation and negative signal levels reduce the frequency below the carrier frequency. pm:with the external modulating source, deviation is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if you have set the frequency deviation to 180 degrees, then a +5 v signal level corresponds to a +180 degree phase deviation. lower external signal levels produce less deviation, and negative signal levels produce negative deviation. pulse as selected function: the pulse width or pulse duty cycle deviation is controlled by the �5 v signal level present on the rear-panel modulation in connector. for example, if you have set the pulse width deviation to 50 μs using the pwm:deviation command, then a +5 v signal level corresponds to a 50 μs width increase. lower external signal levels produce less deviation. with external source, the output phase (bpsk) or frequency (fsk) is determined by the signal level on the rear-panel ext trig connector. when a logic low is present, the carrier phase or carrier frequency is output. when a logic high is present, the phase shifted phase or hop frequency is output. the maximum external bpsk rate is 1 mhz, and the maximum fsk rate is 1 mhz. note: the connector used for externally-controlled bpsk or fsk waveforms (trig in) is not the same connector that is used for externally-modulated am, fm, pm, and pwm waveforms (modulation in). when used for bpsk or fsk, the trig in connector does not have adjustable edge polarity and is not affected by the trigger[1|2]:slope command. with internal source, the rate at which output phase (bpsk) or frequency (fskey) "shifts" between the carrier phase or frequency and the alternate phase or frequency is determined by the bpsk rate (bpsk:internal:rate) or fsk rate (fskey:internal:rate). a channel may not be its own modulation source. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:pm:state</e><e>state</e><e>enables or disables modulation.</e><e> am:state [source[1|2]:]am:state {on|1|off|0}[source[1|2]:]am:state?[source[1|2]:]bpsk:state {on|1|off|0}[source[1|2]:]bpsk:state[source[1|2]:]fm:state {on|1|off|0}[source[1|2]:]fm:state[source[1|2]:]fskey:state {on|1|off|0}[source[1|2]:]fskey:state[source[1|2]:]pm:state {on|1|off|0}[source[1|2]:]pm:state[source[1|2]:]pwm:state {on|1|off|0}[source[1|2]:]pwm:state? enables or disables modulation. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable am (could also substitute fm, bpsk, fsk, pm, or pwm):am:stat on to avoid multiple waveform changes, enable modulation after configuring the other modulation parameters. only one modulation mode may be enabled at a time. the instrument will not enable modulation with sweep or burst enabled. when you enable modulation, the sweep or burst mode is turned off. pwm is allowed only when pulse is the selected function. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:pwm:deviation</e><e>deviation</e><e>sets pulse width deviation; the ± variation in width (in seconds) from the pulse width of the carrier pulse waveform.</e><e>[source[1|2]:]pwm:deviation {&lt;deviation&gt;|minimum|maximum}[source[1|2]:]pwm:deviation? [{minimum|maximum}] sets pulse width deviation; the � variation in width (in seconds) from the pulse width of the carrier pulse waveform. parameter typical return 0 to 1000 (seconds); default 10 μs +1.000000000000000e+00 set pulse width deviation to 1 s:pwm:dev 1set pulse width deviation to 0 s:pwm:dev min the deviation is a � deviation, so if the pulse width is 10 ms and the deviation is 4 ms, the width can vary from 6 to 14 ms. the pulse width deviation cannot exceed the current pulse width, and is also limited by the minimum pulse width (wmin): width deviation &lt; pulse width � wmin and width deviation &lt; period � pulse width � wmin the pulse width deviation is limited by the current edge time setting. width deviation &lt; pulse width � (0.8 x leading edge time) � (0.8 x trailing edge time) and width deviation &lt; period � pulse width � (0.8 x leading edge time) � (0.8 x trailing edge time) if you select the external modulating source (pwm:source external), the deviation is controlled by the �5 v signal level present on the rear-panel modulation in connector. for example, if you have set the width deviation to 10 μs, then a +5 v signal level corresponds to a 10 μs deviation. lower external signal levels produce less deviation. negative signal levels produce negative deviation. </e></d><d><e>source:pwm:deviation:dcycle</e><e>dcycle</e><e>sets duty cycle deviation in percent of period.</e><e>[source[1|2]:]pwm:deviation:dcycle {&lt;deviation_in_pct&gt;|minimum|maximum}[source[1|2]:]pwm:deviation:dcycle? [{minimum|maximum}] sets duty cycle deviation in percent of period. this is the peak variation in duty cycle from the underlying pulse waveform. for example, if duty cycle is 10% and duty cycle deviation is 5%, the duty cycle of the modulated waveform will vary from 5% to 15%. parameter typical return duty cycle in percent of period, from 0 to 99.9; default approximately 1 percent +5.000000000000000e+00 set pulse width deviation to 5%:pwm:dev:dcyc 5 duty cycle deviation cannot exceed pulse duty cycle. duty cycle deviation also limited by minimum pulse width (wmin): duty cycle deviation &lt; duty cycle � 100 x wmin � period and duty cycle deviation &lt; 100 � duty cycle � 100 x wmin � period where wmin = 16 ns. duty cycle deviation limited by edge time. duty cycle dev &lt; duty cycle � (80 x leading edge time) � period � (80 x trailing edge time) � period and duty cycle dev &lt; 100 � duty cycle � (80 x leading edge time) � period � (80 x trailing edge time) � period with pwm:source external, deviation is controlled by the �5 v signal level on rear-panel modulation in connector. for example, with duty cycle deviation of 5 percent, a +5 v signal level corresponds to 5% deviation, an additional 5% of period added to the pulse duty cycle. lower external signal levels produce less deviation, and negative signal levels reduce the duty cycle. </e></d><d><e>source:pwm:internal:frequency</e><e>frequency</e><e>selects frequency at which output pulse width shifts through its pulse width deviation.</e><e>[source[1|2]:]pwm:internal:frequency {&lt;frequency&gt;|maximum|minimum}[source[1|2]:]pwm:internal:frequency? [{maximum|minimum}] selects frequency at which output pulse width shifts through its pulse width deviation. the waveform used as the modulating source will operate at that frequency, within frequency limits of that waveform. parameter typical return 1 μhz to the maximum allowed for the internal function. default 10 hz +1.000000000000000e+02 set internal pwm frequency to 100 hz:pwm:int:freq 100 when you select an arbitrary waveform as the modulating source, the frequency changes to the frequency of the arbitrary waveform, which is based on the sample rate and the number of points in the arbitrary waveform. when using an arbitrary waveform for the modulating source, changing this parameter also changes the cached metadata representing the arbitrary waveform's sample rate. you can also change the modulating frequency of an arbitrary waveform with function:arbitrary:frequency, function:arbitrary:period, and function:arbitrary:srate. these commands and the modulation frequency command are directly coupled in order to keep the arbitrary waveform behaving exactly as it was last played. if you later turn modulation off and select that same arbitrary waveform as the current function, its sample rate (and corresponding frequency based upon the number of points) will be the same as it was when played as the modulation source. if the internal function is triangle, upramp, or dnramp, the maximum frequency limited to 200 khz. if the internal function is prbs, the frequency refers to bit rate and is limited to 50 mbps. this command should be used only with the internal modulation source (pwm:source internal). </e></d><d><e>source:pwm:internal:function</e><e>function</e><e>selects shape of the internal modulating waveform.</e><e>[source[1|2]:]pwm:internal:function &lt;function&gt;[source[1|2]:]pwm:internal:function? selects shape of the internal modulating waveform. parameter typical return {sinusoid|square|ramp|nramp|triangle|noise|prbs|arb}, default sinusoidview internal function waveforms. sin, squ, ramp, nram, tri, nois, prbs, or arb select a sine wave as the modulating waveform shape:pwm:int:func sin this command should be used only with the internal modulation source (pwm:source internal). pwm subsystem </e></d><d><e>source:pwm:source</e><e>source</e><e>select the source of the modulating signal.</e><e> am:source [source[1|2]:]am:source {internal|external|ch1|ch2}[source[1|2]:]am:source?[source[1|2]:]bpsk:source {internal|external}[source[1|2]:]bpsk:source[source[1|2]:]fm:source {internal|external|ch1|ch2}[source[1|2]:]fm:source[source[1|2]:]fskey:source {internal|external}[source[1|2]:]fskey:source[source[1|2]:]pm:source {internal|external|ch1|ch2}[source[1|2]:]pm:source[source[1|2]:]pwm:source {internal|external|ch1|ch2}[source[1|2]:]pwm:source? select the source of the modulating signal. parameter typical return {internal|external|ch1|ch2}, default internal. bpsk and fskey cannot accept ch1 or ch2 int, ext, ch1, or ch2 select external modulation source:am:sour ext (could also substitute fm, bpsk, fsk, pm, or pwm for am) remarks if you select external, the carrier waveform is modulated with an external waveform. specifically: am:the modulation depth is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if modulation depth (am[:depth]) is 100%, then when the modulating signal is at +5 v, the output will be at the maximum amplitude. similarly, a -5 v modulating signal produces output at minimum amplitude. fm:if you select the external modulating source, the deviation is controlled by the �5 v signal level on the rear-panel modulation in connector.for example, if the frequency deviation is 100 khz, then a +5 v signal level corresponds to a 100 khz increase in frequency.lower external signal levels produce less deviation and negative signal levels reduce the frequency below the carrier frequency. pm:with the external modulating source, deviation is controlled by the �5 v signal level on the rear-panel modulation in connector. for example, if you have set the frequency deviation to 180 degrees, then a +5 v signal level corresponds to a +180 degree phase deviation. lower external signal levels produce less deviation, and negative signal levels produce negative deviation. pulse as selected function: the pulse width or pulse duty cycle deviation is controlled by the �5 v signal level present on the rear-panel modulation in connector. for example, if you have set the pulse width deviation to 50 μs using the pwm:deviation command, then a +5 v signal level corresponds to a 50 μs width increase. lower external signal levels produce less deviation. with external source, the output phase (bpsk) or frequency (fsk) is determined by the signal level on the rear-panel ext trig connector. when a logic low is present, the carrier phase or carrier frequency is output. when a logic high is present, the phase shifted phase or hop frequency is output. the maximum external bpsk rate is 1 mhz, and the maximum fsk rate is 1 mhz. note: the connector used for externally-controlled bpsk or fsk waveforms (trig in) is not the same connector that is used for externally-modulated am, fm, pm, and pwm waveforms (modulation in). when used for bpsk or fsk, the trig in connector does not have adjustable edge polarity and is not affected by the trigger[1|2]:slope command. with internal source, the rate at which output phase (bpsk) or frequency (fskey) "shifts" between the carrier phase or frequency and the alternate phase or frequency is determined by the bpsk rate (bpsk:internal:rate) or fsk rate (fskey:internal:rate). a channel may not be its own modulation source. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:pwm:state</e><e>state</e><e>enables or disables modulation.</e><e> am:state [source[1|2]:]am:state {on|1|off|0}[source[1|2]:]am:state?[source[1|2]:]bpsk:state {on|1|off|0}[source[1|2]:]bpsk:state[source[1|2]:]fm:state {on|1|off|0}[source[1|2]:]fm:state[source[1|2]:]fskey:state {on|1|off|0}[source[1|2]:]fskey:state[source[1|2]:]pm:state {on|1|off|0}[source[1|2]:]pm:state[source[1|2]:]pwm:state {on|1|off|0}[source[1|2]:]pwm:state? enables or disables modulation. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable am (could also substitute fm, bpsk, fsk, pm, or pwm):am:stat on to avoid multiple waveform changes, enable modulation after configuring the other modulation parameters. only one modulation mode may be enabled at a time. the instrument will not enable modulation with sweep or burst enabled. when you enable modulation, the sweep or burst mode is turned off. pwm is allowed only when pulse is the selected function. see also am subsystem bpsk subsystem fm subsystem fskey subsystem pm subsystem pwm subsystem </e></d><d><e>source:rate:couple:mode</e><e>mode</e><e>sets type of sample rate coupling to either a constant sample rate offset (offset) or a constant ratio (ratio) between the channels' sample rates.</e><e>[source[1|2]:]rate:couple:mode {offset|ratio}[source[1|2]:]rate:couple:mode? sets type of sample rate coupling to either a constant sample rate offset (offset) or a constant ratio (ratio) between the channels' sample rates. parameter typical return {offset|ratio}, default ratio offs or rat set the sample rate coupling mode to offset.rate:coup:mode offset the default ratio is 1. the default sample rate coupling is off. the source[1|2] keyword is ignored; the setting applies to both channels. </e></d><d><e>source:rate:couple:offset</e><e>offset</e><e>sets sample rate offset when a two-channel instrument is in sample rate coupled mode offset.</e><e>[source[1|2]:]rate:couple:offset &lt;sample_rate&gt;[source[1|2]:]rate:couple:offset? sets sample rate offset when a two-channel instrument is in sample rate coupled mode offset. parameter typical return valid values depend on function:arbitrary:filter setting. for normal and step, the range is between � 250 msa/s . for off, the range is between �62.5 msa/s. in either case, default is 0. +8.000000000000000e+02 set sample rate offset of channel 2 to 10.3 ksa/s higher than sample rate of channel 1.rate:couple:offset 10300sets the sample rate offset of channel 1 to 45 ksa/s below the sample rate of channel 2.sour2:rate:coup:offs -45000 when specifying offset or ratio, the source channel specified in the command (source1 or source2) is used as the reference channel and the offset or ratio is applied to the other channel. for example, suppose the function generator is in rate:couple[:state] on and rate:couple:mode is set to offset. furthermore, suppose channel 1 is currently operating at 2 ksa/s, and channel 2 is at 10 ksa/s. the command source1:rate:couple:offset 2.5 causes channel 1 to remain at 2 sa/s, and channel 2 to be set to 4.5 sa/s. as the sample rate of either channel changes, the other channel's sample rate changes to maintain the specified coupling. if the sample rate coupling would cause either channel to exceed instrument sample rate specifications for the present functions, the command will result in an error, and the sample rate will be set to its maximum or minimum limit for the particular channel. </e></d><d><e>source:rate:couple:ratio</e><e>ratio</e><e>sets offset ratio between channel sample rates when a two-channel instrument is in sample rate coupled mode ratio.</e><e>[source[1|2]:]rate:couple:ratio &lt;ratio&gt;[source[1|2]:]rate:couple:ratio? sets offset ratio between channel sample rates when a two-channel instrument is in sample rate coupled mode ratio. parameter typical return 0.001 to 1000, default 1 +7.500000000000000e-1 set channel 2's sample rate to twice that of channel 1.sour1:rate:coup:ratio 2 set channel 1's sample rate to 3.14 times that of channel 2.sour2:rate:couple:rat 3.14 when specifying offset or ratio, the source channel specified in the command (source1 or source2) is used as the reference channel and the offset or ratio is applied to the other channel. for example, suppose the function generator is coupled in ratio mode. furthermore, suppose channel 1 is currently operating at 2 ksa/s, and channel 2 is at 10 ksa/s.the command source1:rate:couple:ratio 2.5 causes channel 1 to remain at 2 ksa/s, and channel 2 to be set to 5 ksa/s. as the sample rate of either channel changes, the other channel's sample rate changes to maintain the specified coupling. if the sample rate coupling would cause either channel to exceed instrument sample rate specifications for the present functions, the command will result in an error, and the sample rate will be set to its maximum or minimum limit for the particular channel. </e></d><d><e>source:rate:couple:state</e><e>state</e><e>enables or disables sample rate coupling between channels, or allows one-time copying of one channel's sample rate into the other channel.</e><e>[source[1|2]:]rate:couple[:state] {on|1|off|0}[source[1|2]:]rate:couple[:state]? enables or disables sample rate coupling between channels, or allows one-time copying of one channel's sample rate into the other channel. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) turn on sample rate coupled state:rate:coup on the on value starts sample rate coupling in the mode specified by rate:couple:mode. if the current offset or ratio, combined with the current sample rate settings, would cause either sample rate to exceed instrument specifications, the instrument will generate an error and the exceeded sample rate will clip at its maximum or minimum value. if setting mode to ratio and setting ratio to 1.0 still exceeds the specifications of either channel, an error message will be generated and the rate:couple[:state] will not be turned on. both channels must be configured for function arb in order to enable sample rate coupling. </e></d><d><e>source:roscillator:source</e><e>source</e><e>selects the source for the reference oscillator used as the frequency/phase reference for signals generated by the instrument.</e><e>roscillator:source {internal|external}roscillator:source? selects the source for the reference oscillator used as the frequency/phase reference for signals generated by the instrument. parameter typical return {internal|external}, default int int or ext use the external reference oscillator source:rosc:sour ext external:instrument uses signal on the rear-panel 10 mhz in connector as reference, and generates an error if this signal is absent or the instrument cannot lock to it. in such error cases, instrument output continues, but the frequency will be unstable. internal: instrument uses the internal reference oscillator and ignores the signal at the 10 mhz in connector. </e></d><d><e>source:roscillator:source:auto</e><e>auto</e><e>disables or enables automatic selection of the reference oscillator.</e><e>roscillator:source:auto {on|off}roscillator:source:auto? disables or enables automatic selection of the reference oscillator. parameter typical return {on|off}, default on on or off select reference source automatically:rosc:sour:auto on on: the instrument preferentially selects a 10 mhz signal from the rear-panel 10 mhz in connector. off: the instrument selects the reference oscillator based on the rosc:source setting. </e></d><d><e>source:roscillator:source:current</e><e>current</e><e>indicates which reference oscillator signal is currently in use when rosc:source:auto is on.</e><e>roscillator:source:current? indicates which reference oscillator signal is currently in use when rosc:source:auto is on. parameter typical return (none) int (internal) or ext (10 mhz connector on rear panel) determine reference signal source:rosc:sour:curr? int refers to the basic internal tcxo or the optional ovenized ocxo oscillator, whichever is installed. </e></d><d><e>source:sum:amplitude</e><e>amplitude</e><e>sets internal modulation depth (or "percent modulation") in percent.</e><e>[source[1|2]:]sum:amplitude &lt;amplitude&gt;[source[1|2]:]sum:amplitude? [{minimum|maximum}] sets internal modulation depth (or "percent modulation") in percent. parameter typical return desired sum signal amplitude in percent of carrier amplitude, from 0 to 100; default 0.1 +3.200000000000000e+00 set the internal sum signal amplitude to 1.0% of the signal amplitude:sum:ampl 1.0phas:sync set the internal sum signal amplitude on channel 2 to 0.15% of the signal amplitude:sour2:sum:ampl 0.15 you can synchronize the phase between the primary signal and the sum signal by sending source[1|2]:phase:synchronize after setting the functions for the primary signal and the sum signal. otherwise, the phase between the two signals is arbitrary. summed output cannot exceed �5 v peak output (into a 50 ω load). if you select the external sum source (sum:source external), the carrier waveform is added to the external waveform. the summing signal is the �5 v signal level on the rear-panel modulation in connector. for example, if you have the carrier amplitude of a sine wave set to 4 vpp and set the sum amplitude to 20% (resulting in a maximum sum contribution of 800 mvpp) using sum:amplitude, then when the ext signal is at +5 v, the additive signal output will be at the maximum amplitude of 4.8 vpp. when the modulating signal is at -5 v, the additive signal will be at the minimum amplitude of -4.8 vpp. a modulation input of 0 v would result in a signal equal to the carrier amplitude. </e></d><d><e>source:sum:internal:frequency</e><e>frequency</e><e>sets the frequency of the summing waveform when internal sum source is selected (sum:source:internal). </e><e>[source[1|2]:]sum:internal:frequency {&lt;frequency&gt;|minimum|maximum}[source[1|2]:]sum:internal:frequency? [{minimum|maximum}] sets the frequency of the summing waveform when internal sum source is selected (sum:source:internal). the modulating source waveform operates at that frequency, within the frequency limits of that waveform. parameter typical return 1 μhz to the maximum allowed for the internal function. default 100 hz +1.000000000000000e-06 the following command sets the summing frequency to 10 khz on channel 2:sour2:sum:int:freq 10000 sour2:phas:sync the following command sets the summing frequency to 1 μhz on channel 1:sum:int:freq minphas:sync you can synchronize the phase between the primary signal and the sum signal by sending source[1|2]:phase:synchronize after setting the functions for the primary signal and the sum signal. otherwise, the phase between the two signals is arbitrary. when you select an arbitrary waveform as the modulating source, the frequency changes to the frequency of the arbitrary waveform, which is based on the sample rate and the number of points in the arbitrary waveform. when using an arbitrary waveform for the modulating source, changing this parameter also changes the cached metadata representing the arbitrary waveform's sample rate. you can also change the modulating frequency of an arbitrary waveform with function:arbitrary:frequency, function:arbitrary:period, and function:arbitrary:srate. these commands and the modulation frequency command are directly coupled in order to keep the arbitrary waveform behaving exactly as it was last played. if you later turn modulation off and select that same arbitrary waveform as the current function, its sample rate (and corresponding frequency based upon the number of points) will be the same as it was when played as the modulation source. if the internal function is triangle, upramp, or dnramp, the maximum frequency limited to 200 khz. if the internal function is prbs, the frequency refers to bit rate and is limited to 50 mbps. </e></d><d><e>source:sum:internal:function</e><e>function</e><e>selects the summing waveform (the waveform added to the primary waveform).</e><e>[source[1|2]:]sum:internal:function &lt;function&gt;[source[1|2]:]sum:internal:function? selects the summing waveform (the waveform added to the primary waveform). parameter typical return {sinusoid|square|ramp|nramp|triangle|noise|prbs|arb}, default sinusoid sin, squ, ramp, nram, tri, nois, prbs, or arb select a sine wave as the summing waveform shape for channel 2:sour2:sum:int:func sin you can synchronize the phase between the primary signal and the sum signal by sending source[1|2]:phase:synchronize after setting the functions for the primary signal and the sum signal. otherwise, the phase between the two signals is arbitrary. this command is applicable only with internal sum source (sum:source internal). you cannot use sum when dc is the carrier. an arbitrary waveform may not simultaneously be a carrier and a sum waveform. the following table shows which carriers can be associated with which internal functions. modulating signal carrier sine square tri / ramp noise prbs arb external sine � � � � � � � square/pulse � � � � � � � triangle/ramp � � � � � � � gaussian noise � � � � � � prbs � � � � � � arbitrary � � � � � � sequenced arbitrary � � � � � � </e></d><d><e>source:sum:source</e><e>source</e><e>selects source of summing signal.</e><e>[source[1|2]:]sum:source {internal|external}[source[1|2]:]sum:source? selects source of summing signal. parameter typical return {internal|external}, default internal int or ext set the sum source to external:sum:sour ext you can synchronize the phase between the primary signal and the sum signal by sending source[1|2]:phase:synchronize after setting the functions for the primary signal and the sum signal. otherwise, the phase between the two signals is arbitrary. sum:source external: carrier waveform is summed with external waveform. the amplitude and polarity of the sum signal is determined by the �5 v signal level on rear-panel modulation in connector. for example, if you have set the sum amplitude to 2.0 vpp using sum:amplitude, then when ext signal is at +5 v, the sum signal will be at 2 vpp. when the modulating signal is at -5 v, the sum signal will be at full amplitude and opposite polarity. </e></d><d><e>source:sum:state</e><e>state</e><e>disables or enables sum function.</e><e>[source[1|2]:]sum:state {on|1|off|0}[source[1|2]:]sum:state? disables or enables sum function. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable sumsum:stat on you can synchronize the phase between the primary signal and the sum signal by sending source[1|2]:phase:synchronize after setting the functions for the primary signal and the sum signal. otherwise, the phase between the two signals is arbitrary. to avoid multiple waveform changes, enable sum after you have configured the other sum parameters. only one modulation mode may be enabled at a time. the instrument will not allow sum to be enabled when sweep or burst is enabled. when you enable sum, the sweep or burst mode is turned off. with sum:state on, the sum amplitude plus the carrier amplitude may not exceed either the programmed limits or the instrument's output rating. if setting sum:state on would cause either the output rating or the limits to be exceeded, sum:state will be set off and the instrument will report a settings conflict error. </e></d><d><e>source:sweep:htime</e><e>htime</e><e>sets number of seconds the sweep holds (pauses) at the stop frequency before returning to the start frequency.</e><e>[source[1|2]:]sweep:htime {&lt;hold_time&gt; | minimum | maximum}[source[1|2]:]sweep:htime? [{minimum|maximum}] sets number of seconds the sweep holds (pauses) at the stop frequency before returning to the start frequency. parameter typical return 0 to 3600, default 0 +3.400000000000000e+00 set sweep hold time to 3.4 seconds:swe:htim 3.4 </e></d><d><e>source:sweep:rtime</e><e>rtime</e><e>sets number of seconds the sweep takes to return from stop frequency to start frequency.</e><e>[source[1|2]:]sweep:rtime {&lt;return_time&gt; | minimum | maximum}[source[1|2]:]sweep:rtime? [ minimum | maximum ] sets number of seconds the sweep takes to return from stop frequency to start frequency. parameter typical return 0 to 3600, default 0 +5.600000000000000e+00 set sweep return time to 5.6 s:swe:rtim 5.6 the return sweep is always a linear sweep, regardless of the setting of sweep:spacing. </e></d><d><e>source:sweep:spacing</e><e>spacing</e><e>selects linear or logarithmic spacing for sweep.</e><e>[source[1|2]:]sweep:spacing {linear|logarithmic}[source[1|2]:]sweep:spacing? selects linear or logarithmic spacing for sweep. parameter typical return {linear|logarithmic}, default lin lin or log set logarithmic sweep spacing:swe:spac lin linear: output frequency varies linearly (from start frequency to stop frequency) during sweep. logarithmic: output frequency varies logarithmically (from start frequency to stop frequency) during sweep. </e></d><d><e>source:sweep:state</e><e>state</e><e>enables or disables the sweep.</e><e>[source[1|2]:]sweep:state {on|1|off|0}[source[1|2]:]sweep:state? enables or disables the sweep. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable sweep:swe:stat on </e></d><d><e>source:sweep:time</e><e>time</e><e>sets time (seconds) to sweep from start frequency to stop frequency.</e><e>[source[1|2]:]sweep:time {&lt;seconds&gt;|minimum|maximum}[source[1|2]:]sweep:time? [{minimum|maximum}] sets time (seconds) to sweep from start frequency to stop frequency. parameter typical return 1 ms to 250,000 s for linear sweep, up to 500 s for logarithmic sweep; default 1 s +2.500000000000000e+01 set sweep time to 25 s:swe:time 25 the number of discrete frequency points in the sweep is calculated based on the sweep time. sweep subsystem introduction </e></d><d><e>source:track</e><e>track</e><e>causes channels 1 and 2 of a two-channel instrument to output the same signal, or an inverted polarity signal.</e><e> track [source[1|2]:]track {on|off|inverted} causes channels 1 and 2 of a two-channel instrument to output the same signal, or an inverted polarity signal. parameter typical return {on|off|inverted} on, off, or inv set channel 2 to output a signal identical to that of channel 1:track on causes all settings of the named channel to be copied to the other channel with exceptions noted below. this does include frequency list settings and any arbitrary waveforms loaded in memory. with the inverted option, the tracking channel's amplitude will be inverted, forming a signal similar to a differential output between channel 1 and channel 2. dc offset is not inverted. when track is on, voltage limits on both channels apply. if voltage limits on either channel would prevent the other channel's setup from being applied, the instrument will generate a settings conflict error and channel tracking will remain off. when track is on, changes to either channel are reflected in both channels. when track is changed from on or inv to off, the channels will remain in their present setup (frequency, amplitude, and so on), but you may now change one channel without affecting the other channel. voltage limits may be adjusted in tracking mode, but cannot be set in violation of the current signal. turning tracking on sets combine:feed to none, turns off frequency:couple, voltage:couple, and rate:couple. track is not allowed if the internal modulation source for the channel being tracked is the other channel. the output:sync:source is set to the channel being tracked. </e></d><d><e>source:voltage</e><e>voltage</e><e>sets output amplitude.</e><e>[source[1|2]:]voltage {&lt;amplitude&gt;|minimum|maximum}[source[1|2]:]voltage? [{minimum|maximum}] sets output amplitude. parameter typical return 1 mvpp to 10 vpp into 50 ω, default 100 mvpp +5.0000000000000e+00 set output amplitude to 5 vpp:volt 5 vpp the relationship between offset voltage and output amplitude is shown below. vmax is the maximum peak voltage for the selected output termination (5 v for a 50 ω load or 10 v for a high-impedance load).|voffset| &lt; vmax - vpp/2if the specified offset voltage is not valid, the instrument will adjust it to the maximum dc voltage allowed with the specified amplitude. from the remote interface, a "data out of range" error will also be generated. differences between remote and front panel operation: remote interface: setting amplitude from the remote interface can change the offset in order to achieve the desired amplitude. the instrument will generate either a "data out of range" or "settings conflict" error. if the specified offset voltage is not valid, the instrument adjusts it to the maximum allowed with the specified amplitude. front panel: setting amplitude from the front panel will not change the offset setting. if the specified amplitude is not valid, the instrument clips it to the maximum amplitude allowed with the current offset and generates a "data out of range" error. limits due to output termination: if the amplitude is 10 vpp and you change the output termination setting from 50 ω to "high impedance" (output[1|2]:load inf), the displayed amplitude doubles to 20 vpp. changing from "high impedance" to 50 ω halves the displayed amplitude. the output termination setting does not affect the actual output voltage; it only changes the values displayed and queried from the remote interface. actual output voltage depends on the connected load. limits due to output coupling: differences between remote and front panel operation: if two channels are coupled, both channels' amplitude limitations will be checked before a change in amplitude is executed. if a change in output amplitude would exceed a limit for either channel, or exceed the instrument's output specifications for either channel: remote interface: the instrument will first adjust the offset, then if necessary, the amplitude of that channel to comply with the voltage limits or specification. the instrument will generate either a "data out of range" or "settings conflict" error. front panel: the instrument will clip the amplitude value to the maximum value with the current offset setting. a "data out of range" error will be generated. specifying voltage units: you can set the output amplitude in vpp, vrms, or dbm by specifying the units as part of the voltage command volt 3.0 vrms. use voltage:unit to specify output units for all subsequent commands. you cannot specify output amplitude in dbm if output termination is set to high impedance.the units are automatically converted to vpp. limits due to units selection:amplitude limits are sometimes determined by the output units selected. this may occur when the units are vrms or dbm due to the differences in various functions' crest factors. for example, if you change a 5 vrms square wave (into 50 ω) to a sine wave, the instrument will adjust the amplitude to 3.536 vrms (the upper limit for sine in vrms). the remote interface will also generate a "settings conflict" error. arbitrary waveform limitations: for arbitrary waveforms, amplitude is limited if the waveform data points do not span the full range of the output dac (digital-to-analog converter). for example, the built-in "sinc" waveform does not use the full range of values, so its maximum amplitude is limited to 6.087 vpp (into 50 ω). changing amplitude may briefly disrupt output at certain voltages due to output attenuator switching. the amplitude is controlled, however, so the output voltage will never exceed the current setting while switching ranges. to prevent this disruption, disable voltage autoranging using voltage:range:auto off. the apply command automatically enables autoranging. you can also set the amplitude (with an associated offset voltage) by specifying a high level (voltage:high) and low level (voltage:low). for example, if you set the high level to +2 v and the low level to -3 v, the resulting amplitude is 5 vpp, with a -500 mv offset. to output a dc voltage level, select the dc voltage function (function dc) and then set the offset voltage (voltage:offset). valid values are between �5 vdc into 50 ω or �10 vdc into an open circuit. while the instrument is in dc mode, setting amplitude has no effect. </e></d><d><e>source:voltage:limit:high</e><e>high</e><e>sets the high limits for output voltage.

</e><e>[source[1|2]:]voltage:limit:high {&lt;voltage&gt;|maximum|minimum}[source[1|2]:]voltage:limit:high? {maximum|minimum}[source[1|2]:]voltage:limit:low {&lt;voltage&gt;|maximum|minimum}[source[1|2]:]voltage:limit:low? {maximum|minimum}? sets the high and low limits for output voltage. parameter typical return �5 vdc into 50 ω, as long as high is at least 1 mv greater than low. defaults: high +50 mv, low -50 mv. +5.0000000000000e+00 set channel 1 output high limit to 5 v:volt:limit:high 5.0volt:limit:state on for voltage limits to be in effect, voltage:limit:state must be on. if this is the case, and the high limit is set below the high value of the signal or the low limit is set above the low value of the signal, the relevant limit will be clipped to the high or low value of the signal. the instrument will generate either a "data out of range" or "settings conflict" error. the high limit sets the highest output voltage allowed to be set, including dc offset and peak amplitude. it is set in reference to the current output[1|2]:load setting. if the specified load impedance is not present at the instrument's output, then the output limit may not represent the actual voltages at the output connector. for example, if the output impedance is set to 50 ω, but the actual load is high impedance, then the actual output peak voltage may be up to twice the specified limit voltage. specifying voltage units: you can set the output limit voltage only in volts. when voltage:couple[:state] is on, and voltage:limit:state is on, voltage limit settings on both channels affect maximum amplitude and offset voltage settings on both channels. the most restrictive combination of high and low limits from either channel is used. </e></d><d><e>source:voltage:limit:low</e><e>low</e><e>sets the low limits for output voltage.

</e><e>[source[1|2]:]voltage:limit:low {&lt;voltage&gt;|maximum|minimum}[source[1|2]:]voltage:limit:low? {maximum|minimum}? sets the high and low limits for output voltage. parameter typical return �5 vdc into 50 ω, as long as high is at least 1 mv greater than low. defaults: high +50 mv, low -50 mv. +5.0000000000000e+00 set channel 1 output high limit to 5 v:volt:limit:high 5.0volt:limit:state on for voltage limits to be in effect, voltage:limit:state must be on. if this is the case, and the high limit is set below the high value of the signal or the low limit is set above the low value of the signal, the relevant limit will be clipped to the high or low value of the signal. the instrument will generate either a "data out of range" or "settings conflict" error. the high limit sets the highest output voltage allowed to be set, including dc offset and peak amplitude. it is set in reference to the current output[1|2]:load setting. if the specified load impedance is not present at the instrument's output, then the output limit may not represent the actual voltages at the output connector. for example, if the output impedance is set to 50 ω, but the actual load is high impedance, then the actual output peak voltage may be up to twice the specified limit voltage. specifying voltage units: you can set the output limit voltage only in volts. when voltage:couple[:state] is on, and voltage:limit:state is on, voltage limit settings on both channels affect maximum amplitude and offset voltage settings on both channels. the most restrictive combination of high and low limits from either channel is used. </e></d><d><e>source:voltage:limit:state</e><e>state</e><e>enables or disables output amplitude voltage limits.</e><e>[source[1|2]:]voltage:limit:state {on|1|off|0}[source[1|2]:]voltage:limit:state? enables or disables output amplitude voltage limits. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) set and enable �2.5 v output limits on channel 1:volt:lim:high 2.5volt:lim:low -2.5volt:lim:stat on when this is turned on, if the present settings of amplitude and offset exceed the limits, then the limits will be disabled. the instrument will generate either a "settings conflict" error. when voltage:couple[:state] is on, and voltage:limit:state is on, voltage limit settings on both channels affect maximum amplitude and offset voltage settings on both channels. the most restrictive combination of high and low limits from either channel is used. limits are set in reference to the current setting of output[1|2]:load. if the specified load impedance is not present at the instrument's output, then the output limit may not represent the actual voltages at the output connector. for example, if the output impedance is set to 50 ω, but the actual load is high impedance, then the actual output peak voltage may be up to twice the specified limit voltage. </e></d><d><e>source:voltage:range:auto</e><e>auto</e><e>disables or enables voltage autoranging for all functions.</e><e>[source[1|2]:]voltage:range:auto {off|0|on|1|once}[source[1|2]:]voltage:range:auto? disables or enables voltage autoranging for all functions. selecting once performs an immediate autorange and then turns autoranging off parameter typical return {off|0|on|1|once}, default on 0 (off) or 1 (on) turn voltage autoranging off:volt:rang:auto 0 in the default mode, autoranging is enabled and the instrument automatically selects the optimal settings for the output waveform generator and attenuator. with autoranging disabled (off), the instrument uses the instrument's current gain and attenuator settings. the apply command overrides the voltage autorange setting and automatically enables autoranging (on). disabling autoranging eliminates momentary disruptions caused by attenuator switching while changing amplitude. however, the amplitude and offset accuracy and resolution (and waveform fidelity) may be adversely affected when reducing the amplitude below the expected range change. if a voltage:couple[:state] is on, changing this setting on either channel changes it on both. </e></d><d><e>source:voltage:unit</e><e>unit</e><e>selects the units for output amplitude.</e><e>[source[1|2]:]voltage:unit {vpp|vrms|dbm}[source[1|2]:]voltage:unit? selects the units for output amplitude. parameter typical return {vpp|vrms|dbm}, default vpp vpp, vrms, or dbm set output amplitude units to vrms:volt:unit vrms does not affect offset voltage (voltage:offset), high level (voltage:high) or low level (voltage:low). they all use units of volts. the instrument uses the current units selection for both front panel and remote interface operations. for example, if you select "vrms" from the remote interface (voltage:unit vrms), the units are displayed as "vrms" on the front panel. command applies to voltage? query results. output units for amplitude cannot be set to dbm if the output termination is set to "high impedance." the units are automatically converted to vpp. arbitrary waveform sequences do not accept units of vrms or dbm. unless you specify the units as part of either the voltage command or one of the apply commands, the voltage:unit command takes precedence. for example, if you select voltage:unit vrms and do not include units with an apply command, the &lt;amplitude&gt; in the apply command will be in "vrms". </e></d><d><e>source:voltage:couple:state</e><e>state</e><e>enables or disables the maintaining of the same amplitude, offset, range, load, and units on both channels of a two-channel instrument. </e><e>[source[1|2]:]voltage:couple[:state] {on|1|off|0}[source[1|2]:]voltage:couple[:state]? enables or disables the maintaining of the same amplitude, offset, range, load, and units on both channels of a two-channel instrument. the command applies to both channels; the source keyword is ignored. parameter typical return {on|1|off|0}, default off 0 (off) or 1 (on) enable voltage coupling:volt:coup on </e></d><d><e>source:voltage:high</e><e>high</e><e>set the waveform's high voltage levels.</e><e>[source[1|2]:]voltage:high {&lt;voltage&gt;|minimum|maximum}[source[1|2]:]voltage:high? [{minimum|maximum}][source[1|2]:]voltage:low {&lt;voltage&gt;|minimum|maximum}[source[1|2]:]voltage:low? [{minimum|maximum}] set the waveform's high and low voltage levels. parameter typical return �5 vdc into 50 ω, as long as high is at least 1 mv greater than low. defaults: high +50 mv, low -50 mv. +4.000000000000000e+00 set high voltage level to 4 v:volt:high 4 limits due to amplitude: you can set the voltage levels to a positive or negative value with the restrictions shown below. vpp is the maximum peak-to-peak amplitude for the selected output termination (10 vpp into 50 ω or 20 vpp into an open circuit). vhigh � vlow� vpp (max) and vhigh, vlow� vpp (max)/2 differences between remote and front panel operation: remote interface: setting the high or low level from the remote interface can change the high level or low level to achieve the desired setting. in this case either a "data out of range" or "settings conflict" error will occur. if the high level is set below the low level, the instrument will set the low level 1 mv less than the high level. if the high level is set below the low limit or the instrument output specifications, the low level will be set to the low limit or instrument output specification and the high level will be set 1 mv above the low level. a similar set of rules applies if the low level is set incorrectly. front panel: setting the high or low level from the front panel may clip that level setting in order to achieve the desired level setting, and a "data out of range" error will be generated. the high level cannot be set below the low level from the front panel. setting the high and low levels also sets the waveform amplitude and offset. for example, if you set the high level to +2 v and the low level to -3 v, the resulting amplitude is 5 vpp, with a -500 mv offset. limits due to output termination:if the amplitude is 10 vpp and you change the output termination setting from 50 ω to "high impedance" (output[1|2]:load inf), the displayed amplitude doubles to 20 vpp. changing from "high impedance" to 50 ω halves the displayed amplitude. the output termination setting does not affect the actual output voltage; it only changes the values displayed and queried from the remote interface. actual output voltage depends on the connected load. limits due to voltage:limit:state: if voltage limits are enabled, the level settings are checked against the specified limits (voltage:limit:high, voltage:limit:low) before a level change is executed. if an output level change would exceed a limit setting, the level is clipped to the maximum (or minimum) value allowed that will not exceed the limit setting and a "settings conflict" error will be generated. limits due to output coupling: if two channels are coupled, limitations are checked on both channels before a change in level is executed. if a change in level would exceed a limit setting or exceed the instrument's output specifications for either channel, the level is clipped to the maximum (or minimum) value allowed that will not exceed the limit setting and a "settings conflict" error will be generated. to invert the waveform relative to the offset voltage, use output[1|2]:polarity. </e></d><d><e>source:voltage:low</e><e>low</e><e>set the waveform's low voltage levels.</e><e>[source[1|2]:]voltage:low {&lt;voltage&gt;|minimum|maximum}[source[1|2]:]voltage:low? [{minimum|maximum}] set the waveform's high and low voltage levels. parameter typical return �5 vdc into 50 ω, as long as high is at least 1 mv greater than low. defaults: high +50 mv, low -50 mv. +4.000000000000000e+00 set high voltage level to 4 v:volt:high 4 limits due to amplitude: you can set the voltage levels to a positive or negative value with the restrictions shown below. vpp is the maximum peak-to-peak amplitude for the selected output termination (10 vpp into 50 ω or 20 vpp into an open circuit). vhigh � vlow� vpp (max) and vhigh, vlow� vpp (max)/2 differences between remote and front panel operation: remote interface: setting the high or low level from the remote interface can change the high level or low level to achieve the desired setting. in this case either a "data out of range" or "settings conflict" error will occur. if the high level is set below the low level, the instrument will set the low level 1 mv less than the high level. if the high level is set below the low limit or the instrument output specifications, the low level will be set to the low limit or instrument output specification and the high level will be set 1 mv above the low level. a similar set of rules applies if the low level is set incorrectly. front panel: setting the high or low level from the front panel may clip that level setting in order to achieve the desired level setting, and a "data out of range" error will be generated. the high level cannot be set below the low level from the front panel. setting the high and low levels also sets the waveform amplitude and offset. for example, if you set the high level to +2 v and the low level to -3 v, the resulting amplitude is 5 vpp, with a -500 mv offset. limits due to output termination:if the amplitude is 10 vpp and you change the output termination setting from 50 ω to "high impedance" (output[1|2]:load inf), the displayed amplitude doubles to 20 vpp. changing from "high impedance" to 50 ω halves the displayed amplitude. the output termination setting does not affect the actual output voltage; it only changes the values displayed and queried from the remote interface. actual output voltage depends on the connected load. limits due to voltage:limit:state: if voltage limits are enabled, the level settings are checked against the specified limits (voltage:limit:high, voltage:limit:low) before a level change is executed. if an output level change would exceed a limit setting, the level is clipped to the maximum (or minimum) value allowed that will not exceed the limit setting and a "settings conflict" error will be generated. limits due to output coupling: if two channels are coupled, limitations are checked on both channels before a change in level is executed. if a change in level would exceed a limit setting or exceed the instrument's output specifications for either channel, the level is clipped to the maximum (or minimum) value allowed that will not exceed the limit setting and a "settings conflict" error will be generated. to invert the waveform relative to the offset voltage, use output[1|2]:polarity. </e></d><d><e>source:voltage:offset</e><e>offset</e><e>sets dc offset voltage.</e><e>[source[1|2]:]voltage:offset {&lt;offset&gt;|minimum|maximum}[source[1|2]:]voltage:offset? [{minimum|maximum}] sets dc offset voltage. parameter typical return � 5 vdc into 50 ω, default 0 +1.0000000000000e-01 set offset voltage to 100 mv:volt:offs 100 mv the relationship between offset voltage and output amplitude is shown below.|voffset| &lt; vmax - vpp/2 differences between remote and front panel operation: remote interface: setting the offset from the remote interface can change the amplitude in order to achieve the desired offset setting. the instrument will generate either a "data out of range" or "settings conflict" error. front panel: setting the offset from the front panel will not change the amplitude in order to achieve the desired offset setting. if the specified offset is not valid, the instrument will clip it to the maximum offset allowed with the current amplitude and generate a "data out of range" error. limits due to output termination: the offset range depends on the output termination setting. for example, if you set offset to 100 mvdc and then change output termination from 50 ω to "high impedance," the offset voltage displayed on the front panel doubles to 200 mvdc (no error is generated). if you change from "high impedance" to 50 ω, the displayed offset voltage will be halved. see output[1|2]:load for details. changing the output termination setting does not change the voltage present at the output terminals of the instrument. this only changes the displayed values on the front panel and the values queried from the remote interface. the voltage present at the instrument's output depends on the load connected to the instrument. see output[1|2]:load for details. limits due to output coupling: if two channels are coupled, limitations of setting offset will be checked on both channels before a change in offset is executed. if a change in offset would exceed a limit setting, or exceed the instrument's output specifications for either channel: remote interface: first the amplitude and then if necessary, the offset of that channel will be adjusted to comply with the voltage limits or specification. the instrument will generate either a "data out of range" or "settings conflict" error. front panel: the offset value is clipped to the maximum value allowed that will not exceed the limit setting, and a "data out of range" error will be generated. arbitrary waveform limitations: for arbitrary waveforms, amplitude is limited if the waveform data points do not span the full range of the output dac (digital-to-analog converter). for example, the built-in "sinc" waveform does not use the full range of values, so its maximum amplitude is limited to 6.087 vpp (into 50 ω). changing amplitude may briefly disrupt output at certain voltages due to output attenuator switching. the amplitude is controlled, however, so the output voltage will never exceed the current setting while switching ranges. to prevent this disruption, disable voltage autoranging using voltage:range:auto off. the apply command automatically enables autoranging. setting the high and low levels also sets the waveform amplitude and offset. for example, if you set the high level to +2 v and the low level to -3 v, the resulting amplitude is 5 vpp, with a -500 mv offset. to output a dc voltage level, select the dc voltage function (function dc) and then set the offset voltage (voltage:offset). valid values are between �5 vdc into 50 ω or �10 vdc into an open circuit. while the instrument is in dc mode, setting amplitude has no effect. </e></d><d><e>status:operation:condition</e><e>condition</e><e>queries the condition register for the standard operation register group. </e><e>status:operation:condition? queries the condition register for the standard operation register group. register is read-only; bits not cleared when read. parameter typical return (none) +32 read the condition register (bit 5 is set):stat:oper:cond? the condition register bits reflect the current condition. if a condition goes away, the corresponding bit is cleared . *rst clears this register, other than those bits where the condition still exists after *rst. the command reads the condition register and returns a decimal value equal to the binary-weighted sum of all bits set in the register. for example, if bit 5 (decimal value = 32) and bit 9 (decimal value = 512) are set, the command will return +544. </e></d><d><e>status:operation:enable</e><e>enable</e><e>enables bits in the enable register for the standard operation register group.</e><e>status:operation:enable &lt;enable_value&gt;status:operation:enable? enables bits in the enable register for the standard operation register group. the selected bits are then reported to the status byte as the standard operation summary bit. parameter typical return sum of the bits' decimal values in the register. +256 enable bit 8 (decimal value 256) in the enable register:stat:oper:enab 256 use &lt;enable_value&gt; to specify which bits are reported to the status byte. the specified value corresponds to the binary-weighted sum of the register bits to enable. for example, to enable bit 5 (value 32) and bit 9 (value 512), the decimal value would be 544. *cls does not clear the enable register, but does clear the event register. </e></d><d><e>status:operation:event</e><e>event</e><e>queries the event register for the standard operation register group.</e><e>status:operation[:event]? queries the event register for the standard operation register group. this is a read-only register; the bits are cleared when you read the register. parameter typical return (none) +32 read event register:stat:oper:even? a set bit remains set until cleared by reading the event register or *cls. *rst does not affect this register. query reads the event register and returns a decimal value equal to the binary-weighted sum of all bits set in the register. for example, if bit 5 ( value 32) and bit 9 (value 512) are set, the command returns +544. </e></d><d><e>status:preset</e><e>preset</e><e>clears questionable data enable register and standard operation enable register.</e><e>status:preset clears questionable data enable register and standard operation enable register. parameter typical return (none) (none) clear enable register bits:stat:pres </e></d><d><e>status:questionable:condition</e><e>condition</e><e>queries the condition register for the questionable data register group.</e><e>status:questionable:condition? queries the condition register for the questionable data register group. parameter typical return (none) +512 read the condition register (bit 9 is set):stat:ques:cond? the questionable data register group provides information about the instrument's quality or integrity. any or all conditions can be reported to the questionable data summary bit through the enable register. register is read-only; bits not cleared when read. the condition register bits reflect the current condition. if a condition goes away, the corresponding bit is cleared. *rst clears the condition register. the query reads the condition register and returns a decimal value equal to the binary-weighted sum of all bits set in the register. for example, if bit 12 (decimal value = 4096) is set, the query returns "+4096". </e></d><d><e>status:questionable:enable</e><e>enable</e><e>enables bits in the enable register for the questionable data register group. </e><e>status:questionable:enable &lt;enable_value&gt;status:questionable:enable? enables bits in the enable register for the questionable data register group. the selected bits are then reported to the status byte. parameter typical return decimal value equal to the sum of the bit decimal values in the register. +512 enable bit 9 (value 512) in the enable register:stat:ques:enab 512 use &lt;enable_value&gt; to specify which bits are reported to the status byte. the specified value corresponds to the binary-weighted sum of the register bits to enable. for example, to enable bit 5 (value 32) and bit 9 (value 512), the decimal value would be 544. enable register cleared by:status:questionable:enable 0status:presetpower cycle *cls does not clear enable register but it does clear event register. *rst does not affect this register. the query reads the enable register and returns a decimal value equal to the binary-weighted sum of all bits set in the register.ter. for example, if bit 0 (value 1) and bit 1 ( value 2) are enabled, the query returns +3. </e></d><d><e>status:questionable:event</e><e>event</e><e>queries the event register for the questionable data register group. </e><e>status:questionable[:event]? queries the event register for the questionable data register group. this is a read-only register; the bits are cleared when you read the register. parameter typical return (none) +512 read the event register (bit 9 set):stat:ques? once a bit is set, it remains set until cleared by this query or *cls. *rst, status:preset, and *psc have no effect on this register. query reads the event register and returns a decimal value equal to the binary-weighted sum of all bits set in the register. for example, if bit 1 (value 2) and bit 9 ( value 512) are set, the query returns "+514". </e></d><d><e>system:beeper:immediate</e><e>immediate</e><e>issues a single beep.</e><e>system:beeper[:immediate] issues a single beep. parameter typical return (none) (none) issue a single beep:syst:beep sending a programmed beep may be useful for program development and troubleshooting. this command overrides the current beeper state (the system:beeper:state ). this means that you can issue a single beep even if the beeper is turned off. </e></d><d><e>system:beeper:state</e><e>state</e><e>disables or enables the beeper tone heard when an error is generated from the front panel or remote interface. </e><e>system:beeper:state {on|1|off|0}system:beeper:state? disables or enables the beeper tone heard when an error is generated from the front panel or remote interface. parameter typical return {on|1|off|0}, default on 0 (off) or 1 (on) disable beeper state:syst:beep:stat off turning off the beeper does not disable the front-panel key click. a beep is always emitted (even with beep state off) when system:beeper is sent. this setting is non-volatile; it will not be changed by power cycling or *rst. </e></d><d><e>system:communicate:enable</e><e>enable</e><e>disables or enables the gpib, usb, or lan remote interface.</e><e>system:communicate:enable {on|1|off|0}, &lt;interface&gt;system:communicate:enable? &lt;interface&gt; disables or enables the gpib, usb, or lan remote interface. also disables or enables available remote services such as sockets, telnet, vxi11, and the built-in web interface. parameter typical return {on|1|off|0}, default on for all interfaces 0 (off) or 1 (on) {gpib|usb|lan|sockets|telnet|vxi11|web} disable the usb interface:syst:comm:enab off,usb returns the state of the usb interface:syst:comm:enab? usb when you disable or re-enable any interface or lan service, you must cycle power to activate the new setting. if you disable the lan interface, all associated lan services will not be started when you power on the instrument. this setting is non-volatile; it will not be changed by power cycling or *rst. system:security:immediate enables all interfaces. </e></d><d><e>system:communicate:gpib:address</e><e>address</e><e>assigns instrument's gpib (ieee-488) address, which is displayed at power-on. </e><e>system:communicate:gpib:address {&lt;address&gt;}system:communicate:gpib:address? assigns instrument's gpib (ieee-488) address, which is displayed at power-on. each device on the gpib interface must have a unique address. parameter typical return 0 to 30, default 10 +15 set gpib address to 15:syst:comm:gpib:addr 15 your computer's gpib interface card has its own address. avoid using this address for any instrument on the gpib bus. this setting is non-volatile; it will not be changed by power cycling or *rst. system:security:immediate sets gpib address to 10. must cycle power for this command to take effect. </e></d><d><e>system:communicate:lan:control</e><e>control</e><e>reads the initial control connection port number for sockets communications.</e><e>system:communicate:lan:control? reads the initial control connection port number for sockets communications. this connection is used to send and receive commands and queries. parameter typical return (none) 5000 (0 if the interface does not support sockets) return the control connection port number:syst:comm:lan:cont? use the control socket connection to send a device clear to the instrument or to detect pending service request (srq) events. the device clear command is "dcl". </e></d><d><e>system:communicate:lan:dhcp</e><e>dhcp</e><e>disables or enables instrument's use of dhcp.</e><e>system:communicate:lan:dhcp {on|1|off|0}system:communicate:lan:dhcp? disables or enables instrument's use of dhcp. the acronym dhcp stands for dynamic host configuration protocol, a protocol for assigning dynamic ip addresses to networked devices. with dynamic addressing, a device can have a different ip address every time it connects to the network. on: instrument tries to obtain an ip address from a dhcp server. if a dhcp server is found, it assigns a dynamic ip address, subnet mask, and default gateway to the instrument. off or dhcp unavailable: instrument uses the static ip address, subnet mask, and default gateway during power-on. if you change this setting, you must send system:communicate:lan:update to activate the new setting. parameter typical return {on|1|off|0}, default on 0 (off) or 1 (on) disable dhcp:syst:comm:lan:dhcp offsyst:comm:lan:update most corporate lans have a dhcp server. if dhcp lan address not assigned by dhcp server, static ip is assumed after approximately two minutes. this setting is non-volatile; it will not be changed by power cycling or *rst. enabled when the instrument is shipped from the factory or after system:security:immediate. </e></d><d><e>system:communicate:lan:dns</e><e>dns</e><e>assigns static ip addresses of domain name system (dns) servers.</e><e>system:communicate:lan:dns[1|2] "&lt;address&gt;"system:communicate:lan:dns[1|2]? [{current|static}] assigns static ip addresses of domain name system (dns) servers. a primary and a secondary server address may be assigned. contact your lan administrator for details. if dhcp is available and enabled, dhcp will auto-assign the dns server addresses. these auto-assigned dns server addresses take precedence over the static dns addresses assigned with this command. if you change this setting, you must send system:communicate:lan:update to activate the new setting. parameter typical return command: "nnn.nnn.nnn.nnn", default "0.0.0.0" query: {current|static}, default current "198.105.232.4" set a static primary dns address:syst:comm:lan:dns "198.105.232.4"syst:comm:lan:upd current: read address currently being used by the instrument. static: read static address from non-volatile memory. this address is used if dhcp is disabled or unavailable. this setting is non-volatile; it will not be changed by power cycling or *rst. set to "0.0.0.0" by system:security:immediate. </e></d><d><e>system:communicate:lan:domain</e><e>domain</e><e>returns the domain name of the lan to which the instrument is connected.</e><e>system:communicate:lan:domain? returns the domain name of the lan to which the instrument is connected. parameter typical return (none) "example.com" return domain name being used by instrument:syst:comm:lan:dom? if dynamic domain name system (dns) is available on your network and your instrument uses dhcp, the domain name is registered with the dynamic dns service at power-on. a null string ("") indicates that no domain name is assigned. </e></d><d><e>system:communicate:lan:gateway</e><e>gateway</e><e>assigns a default gateway for the instrument.</e><e>system:communicate:lan:gateway "&lt;address&gt;"system:communicate:lan:gateway? [{current|static}] assigns a default gateway for the instrument. the specified ip address sets the default gateway which allows the instrument to communicate with systems that are not on the local subnet. thus, this is the default gateway where packets are sent which are destined for a device not on the local subnet, as determined by the subnet mask setting. if dhcp is enabled (system:communicate:lan:dhcp ), the specified default gateway is not used. however, if the dhcp server fails to assign a valid ip address, the currently configured default gateway will be used. contact your lan administrator for details. if you change this setting, you must send system:communicate:lan:update to activate the new setting. parameter typical return command: "nnn.nnn.nnn.nnn", default "0.0.0.0" query: {current|static}, default current "198.105.232.1" set default gateway address:syst:comm:lan:gateway "198.105.232.1"syst:comm:lan:upd current: read address currently being used by the instrument. static: read static address from non-volatile memory. this address is used if dhcp is disabled or unavailable. set to "0.0.0.0" when instrument is shipped from factory or after system:security:immediate. </e></d><d><e>system:communicate:lan:hostname</e><e>hostname</e><e>assigns a hostname to the instrument.</e><e>system:communicate:lan:hostname "&lt;name&gt;"system:communicate:lan:hostname? [{current | static}] assigns a hostname to the instrument. a hostname is the host portion of the domain name, which is translated into an ip address. if dynamic domain name system (dns) is available on your network and your instrument uses dhcp, the hostname is registered with the dynamic dns service at power-on. if dhcp is enabled (system:communicate:lan:dhcp ), the dhcp server can change the specified hostname. if you change this setting, you must send system:communicate:lan:update to activate the new setting. parameter typical return string of up to 15 characters.must start with letter (a-z)may contain letters, numbers (0-9), or dashes ("-") "lab1-33522a" define a hostname:syst:comm:lan:host "lab1"syst:comm:lan:upd set to "a-33521a-nnnnn" or "a-33522a-nnnnn", where nnnnn is the last five digits of the instrument's serial number, when the instrument is shipped from the factory or after system:security:immediate. if no hostname exists, a null string ( "" ) is returned. </e></d><d><e>system:communicate:lan:ipaddress</e><e>ipaddress</e><e>assigns a static internet protocol (ip) address for the instrument. </e><e>system:communicate:lan:ipaddress "&lt;address&gt;"system:communicate:lan:ipaddress? [{current|static}] assigns a static internet protocol (ip) address for the instrument. if dhcp is enabled (system:communicate:lan:dhcp), the specified static ip address is not used. contact your lan administrator for details. if you change this setting, you must send system:communicate:lan:update to activate the new setting. parameter typical return command: "nnn.nnn.nnn.nnn", default "0.0.0.0" query: {current|static}, default current "169.254.149.35" set a static ip address:syst:comm:lan:ipad "169.254.149.35"syst:comm:lan:upd current: read address currently being used by the instrument. static: read static address from non-volatile memory. this address is used if dhcp is disabled or unavailable. this setting is non-volatile; it will not be changed by power cycling or *rst. set to "169.254.5.21" when the instrument is shipped from the factory or after system:security:immediate. </e></d><d><e>system:communicate:lan:mac</e><e>mac</e><e>reads the instrument's media access control (mac) address.</e><e>system:communicate:lan:mac? reads the instrument's media access control (mac) address. your lan administrator may need the mac address to assign a static ip address for this device. parameter typical return (none) "0030d3001041" return the mac address:syst:comm:lan:mac? the mac address is also known as the link-layer address, the ethernet (station) address, lanic id, or hardware address. this is an unchangeable 48-bit address assigned by the manufacturer to each unique internet device. the instrument's mac address is set at the factory and cannot be changed. this setting is non-volatile; it will not be changed by power cycling or *rst. </e></d><d><e>system:communicate:lan:smask</e><e>smask</e><e>assigns a subnet mask for the instrument. </e><e>system:communicate:lan:smask "&lt;mask&gt;"system:communicate:lan:smask? [{current | static}] assigns a subnet mask for the instrument. the instrument uses the subnet mask to determine whether a client ip address is on the same local subnet. when a client ip address is on a different subnet, all packets must be sent to the default gateway. contact your lan administrator for details. if you change this setting, you must send system:communicate:lan:update to activate the new setting. parameter typical return command: "nnn.nnn.nnn.nnn", default "0.0.0.0" query: {current|static}, default current "255.255.0.0" set the subnet mask:syst:comm:lan:smas "255.255.255.0"syst:comm:lan:upd if dhcp is enabled (system:communicate:lan:dhcp ), the specified subnet mask is not used. however, if the dhcp server fails to assign a valid ip address, the instrument uses the autoip subnet mask. a value of "0.0.0.0" or "255.255.255.255" indicates that subnetting is not being used. this setting is non-volatile; it will not be changed by power cycling or *rst. the subnet mask is set to "255.255.0.0" when the instrument is shipped from the factory or after a system:security:immediate command. current: read address currently being used by the instrument. static: read static address from non-volatile memory. this address is used if dhcp is disabled or unavailable. </e></d><d><e>system:communicate:lan:telnet:prompt</e><e>prompt</e><e>sets the command prompt seen when communicating with the instrument via telnet.</e><e>system:communicate:lan:telnet:prompt "&lt;string&gt;"system:communicate:lan:telnet:prompt? sets the command prompt seen when communicating with the instrument via telnet. parameter typical return string of up to 15 characters "command&gt;" set the command prompt:syst:comm:lan:teln:prom "command&gt;" a telnet session is typically started from a host computer shell: telnet &lt;ip_address&gt; &lt;port&gt;for example: telnet 169.254.4.10 5024to exit a telnet session, press &lt;ctrl-d&gt;. this setting is non-volatile; it will not be changed by power cycling or *rst. this is set to "33521a&gt; " (agilent 33521a), "33522a&gt; " (agilent 33522a), or "33500&gt; " (other 33500 series instruments) when the instrument is shipped from the factory or after system:security:immediate. </e></d><d><e>system:communicate:lan:telnet:wmessage</e><e>wmessage</e><e>sets welcome message seen when communicating with instrument via telnet.</e><e>system:communicate:lan:telnet:wmessage "&lt;string&gt;"system:communicate:lan:telnet:wmessage? sets welcome message seen when communicating with instrument via telnet. parameter typical return string of up to 63 characters "welcome to the telnet session" define a welcome message:syst:comm:lan:teln:wmes "welcome to the telnet session" this setting is non-volatile; it will not be changed by power cycling or *rst. this is set to "welcome to agilent's 33521a waveform generator" (agilent 33521a), "welcome to agilent's 33522a waveform generator" (agilent 33522a), or "welcome to agilent's 33500-series waveform generator" (other 33500 series instruments) when the instrument is shipped from the factory or after system:security:immediate. </e></d><d><e>system:communicate:lan:update</e><e>update</e><e>stores any changes made to the lan settings into non-volatile memory and restarts the lan driver with the updated settings.</e><e>system:communicate:lan:update stores any changes made to the lan settings into non-volatile memory and restarts the lan driver with the updated settings. parameter typical return (none) (none) (see below) this command must be sent after changing the settings for dhcp, dns, gateway, hostname, ip address, subnet mask, wins. make all changes to the lan settings before sending this command. example the following example configures the instrument to use statically assigned lan settings. syst:comm:lan:dhcp offsyst:comm:lan:dns "198.105.232.4"syst:comm:lan:dns2 "198.105.232.5"syst:comm:lan:gateway "198.105.232.1"syst:comm:lan:host "lab1-33522a"syst:comm:lan:ipad "198.105.232.101"syst:comm:lan:smas "255.255.255.0"syst:comm:lan:wins "198.105.232.4"syst:comm:lan:wins "198.105.232.5"syst:comm:lan:upd the following example configures the instrument back to use dhcp. syst:comm:lan:dhcp onsyst:comm:lan:upd </e></d><d><e>system:communicate:lan:wins</e><e>wins</e><e>assigns the static ip addresses of the windows internet name system (wins) servers.</e><e>system:communicate:lan:wins[1|2] "&lt;address&gt;"system:communicate:lan:wins[1|2]? [{current | static}] assigns the static ip addresses of the windows internet name system (wins) servers. a primary and a secondary server address may be assignecontact your lan administrator for details.tails. if dhcp is available and enabled, dhcp will auto-assign the wins server addresses. these auto-assigned wins server addresses take precedence over the static wins addresses assigned with this command. if you change this setting, you must send system:communicate:lan:update to activate the new setting. parameter typical return command: "nnn.nnn.nnn.nnn", default "0.0.0.0" query: {current|static}, default current "198.105.232.4" set a static primary wins address:syst:comm:lan:wins "198.105.232.4"syst:comm:lan:upd the assigned wins addresses are used if dhcp is disabled or unavailable. otherwise, the wins server addresses are auto-assigned by dhcp. this setting is non-volatile; it will not be changed by power cycling or *rst. set to "0.0.0.0" (no servers) after system:security:immediate. current: read address currently being used by the instrument. static: read static address from non-volatile memory. this address is used if dhcp is disabled or unavailable. </e></d><d><e>system:date</e><e>date</e><e>sets system clock date.</e><e>system:date &lt;yyyy&gt;, &lt;mm&gt;, &lt;dd&gt;system:date? sets system clock date. parameter typical return &lt;yyyy&gt; 2000 to 2100&lt;mm&gt; 1 to 12&lt;dd&gt; 1 to 31 +2011,+7,+26 set system date to july 26, 2011:syst:dat 2011,7,26 </e></d><d><e>system:error</e><e>error</e><e>reads and clears one error from error queue.</e><e>system:error? reads and clears one error from error queue. parameter typical return (none) -113,"undefined header" read and clear first error in error queue:syst:err? up to 20 command syntax or hardware errors can be stored in the error queue. error retrieval is first-in-first-out (fifo), and errors are cleared as you read them. the instrument beeps once each time an error is generated (unless disabled by system:beeper:state off). if more than 20 errors have occurred, the last error stored in the queue (the most recent error) is replaced with -350,"error queue overflow". no additional errors are stored until you remove errors from the queue. if no errors have occurred when you read the error queue, the instrument responds with +0,"no error". the error queue is cleared by the *cls and when power is cycled. it is not cleared by *rst. errors have the following format (the error string may contain up to 255 characters).&lt;error code&gt;,&lt;error string&gt;where:&lt;error code&gt; = a three-digit code, sometimes preceded by a dash&lt;error string&gt; = a quoted ascii string up to 255 characters </e></d><d><e>system:license:catalog</e><e>catalog</e><e>returns a comma separated list of installed, licensed options.</e><e>system:license:catalog? returns a comma separated list of installed, licensed options. parameter typical return (none) "sec","iqp","mem" return currently licensed options:syst:lic:cat? only those installed options that require a license are returned. </e></d><d><e>system:license:delete</e><e>delete</e><e>deletes a license.</e><e>system:license:delete "&lt;option_name&gt;" deletes a license. parameter typical return {sec|iqp|mem|bw30} (none) delete license for iq player:syst:lic:del "iqp" valid option names are double quoted strings representing the installed licensed options. they can be easily identified using system:license:catalog?. </e></d><d><e>system:license:delete:all</e><e>all</e><e>deletes all licenses.</e><e>system:license:delete:all deletes all licenses. parameter typical return (none) (none) delete all licenses:syst:lic:del:all </e></d><d><e>system:license:description</e><e>description</e><e>returns a description of specified option, regardless of whether it is currently licensed.</e><e>system:license:description? "&lt;option_name&gt;" returns a description of specified option, regardless of whether it is currently licensed. parameter typical return see list of licensed options "extended memory option: 16 msa/channel waveform memory" return description for option 002:syst:lic:desc? "mem" option names are quoted strings representing options that may be licensed. installed licensed items can be identified with system:license:catalog?. </e></d><d><e>system:license:error</e><e>error</e><e>returns a string of all the errors produced by system:license:install.</e><e>system:license:error? returns a string of all the errors produced by system:license:install. parameter typical return (none) #279file: myfile.lic&lt;cr&gt;&lt;lf&gt;[ignored - the license file is not formatted correctly.]&lt;cr&gt;&lt;lf&gt; return the license installation error string:syst:lic:err? string can be up to 2096 characters. returns a definite-length block containing multi-line ascii text, including carriage returns and line feeds. </e></d><d><e>system:license:error:count</e><e>count</e><e>returns the number of license errors generated by system:license:install.</e><e>system:license:error:count? returns the number of license errors generated by system:license:install. parameter typical return (none) +0 return number of license errors:syst:lic:err:coun? </e></d><d><e>system:license:install</e><e>install</e><e>this command installs all licenses from a specified file or from all license files in the specified folder. </e><e>system:license:install [{&lt;folder&gt; | &lt;file&gt;}]system:license:install? &lt;option&gt; this command installs all licenses from a specified file or from all license files in the specified folder. they query returns 0 or 1 to indicate whether the specified license is installed. parameter typical return &lt;folder&gt; may be any valid folder name. default is root directory of a front panel usb storage device. &lt;file&gt; may be any valid license file name &lt;option is one of the licensed options 0 (license not installed) or 1 (license installed) install licenses from a file:syst:lic:install "usb:\33522b_license071.lic" license files must have a ".lic" file extension. the format for &lt;file&gt; is "[&lt;drive&gt;:&lt;path&gt;]&lt;file_name&gt;", where &lt;drive&gt; can be internal or usb, and &lt;path&gt; must be an absolute folder path. internal specifies the internal flash file system.usb specifies a front panel usb storage device.e. if &lt;drive&gt;:&lt;path&gt; is omitted, the folder specified by the mmemory:cdirectory command is used. absolute paths begin with "\" or "/" and start at the root folder of &lt;drive&gt;. folder and file names cannot contain the following characters: \ / : * ? " &lt; &gt; | the combination of folder and file name cannot exceed 240 characters. the specified folder must exist and cannot be marked hidden or system. </e></d><d><e>system:lock:name</e><e>name</e><e>returns the current i/o interface (the i/o interface in use by the querying computer).</e><e>system:lock:name? returns the current i/o interface (the i/o interface in use by the querying computer). parameter typical return (none) "lan169.254.149.35" see interface locking examples after using this command to determine the name of the interface that you are using, use system:lock:owner? to determine which interface, if any, has the lock. returns "usb", "vxi11", "gpib", or "lan &lt;ip address&gt;" indicating the i/o interface being used by the querying computer. </e></d><d><e>system:lock:owner</e><e>owner</e><e>returns the i/o interface that currently has a lock.</e><e>system:lock:owner? returns the i/o interface that currently has a lock. parameter typical return (none) "lan169.254.149.35" see interface locking examples when a lock is active, bit 10 in the standard operation register will be set (status:operation:condition?). when the lock is released on all i/o interfaces, this bit will be cleared. returns "usb", "vxi11", "gpib", or "lan &lt;ip address&gt;" indicating the i/o interface that currently has a lock. if no interfaces have a lock, "none" is returned. </e></d><d><e>system:lock:release</e><e>release</e><e>decrements the lock count by 1 and may release the i/o interface from which the command is executed.</e><e>system:lock:release decrements the lock count by 1 and may release the i/o interface from which the command is executed. parameter typical return (none) (none) see interface locking examples when a lock is active, bit 10 in the standard operation register will be set (status:operation:condition?). when the lock is released on all i/o interfaces, this bit will be cleared. </e></d><d><e>system:lock:request</e><e>request</e><e>requests a lock of the current i/o interface.</e><e>system:lock:request? requests a lock of the current i/o interface. this allows you to lock the instrument's configuration or cooperatively share the instrument with other computers. parameter typical return (none) 0 (denied) or 1 (granted) see interface locking examples lock requests can be nested; each request increases lock count by 1. for every request, you will need a release ( system:lock:release) from the same i/o interface. locks are handled at the i/o interface level (usb, lan, etc.) and you are responsible for all coordination between threads and/or programs on that interface. when a request is granted, only i/o sessions from the present interface will be allowed to change the state of the instrument. you can only query the instrument state from other i/o interfaces. lan sessions locks are automatically released when a lan disconnect is detected. granting a lock sets bit 10 in the standard operation register (status:operation:condition?). </e></d><d><e>system:security:immediate</e><e>immediate</e><e>sanitizes all user-accessible instrument memory.</e><e>system:security:immediate sanitizes all user-accessible instrument memory. this command complies with requirements in chapter 8 of the national instrument security program operating manual (nispom). parameter typical return (none) (none) sanitize all user-accessible instrument memory:syst:sec:imm this command is recommended for customers, such as military contractors, who must comply with nispom. excessive use of this command may cause premature failure of the flash memory. this command destroys all user-defined state information, user-defined arbitrary waveforms, and user-defined i/o settings such as the ip address. typically used before removing an instrument from a secure area. initializes all instrument settings to their factory reset (*rst) values. </e></d><d><e>system:time</e><e>time</e><e>sets system clock time.</e><e>system:time &lt;hh&gt;, &lt;mm&gt;, &lt;ss&gt;system:time? sets system clock time. parameter typical return &lt;hh&gt; 0 to 23&lt;mm&gt; 0 to 59&lt;ss&gt; 0 to 60 20,15,30.000 set system time to 20:15:30 (8:15:30 pm)syst:tim 20,15,30 this time is used for file timestamps in the mass memory (mmemory) system. </e></d><d><e>system:version</e><e>version</e><e>returns version of the scpi (standard commands for programmable instruments) that the instrument complies with. </e><e>system:version? returns version of the scpi (standard commands for programmable instruments) that the instrument complies with. cannot be determined from front panel. parameter typical return (none) 1994.0 return the scpi version:syst:vers? </e></d><d><e>trigger</e><e>trigger</e><e>forces immediate trigger to initiate sequence, sweep, list, or burst.</e><e>trigger[1|2] forces immediate trigger to initiate sequence, sweep, list, or burst. parameter typical return (none) (none) send an immediate trigger on channel 2:trig can be used with immediate, external, or bus trigger source (trigger[1|2]:source). for example, you can use trigger to issue an immediate trigger while waiting for an external trigger. intended as an override. for general, software controlled triggering, use *trg. </e></d><d><e>trigger:count</e><e>count</e><e>sets trigger count.</e><e>trigger[1|2]:count &lt;number&gt;trigger[1|2]:count? sets trigger count. parameter typical return 1 to 1,000,000; default, 1 10000 set channel 2 trigger count to 10000:trig2:coun 10000 can be used with immediate, external, or bus trigger source (trigger[1|2]:source). applies only when initiate[1|2]:continuous is off. </e></d><d><e>trigger:delay</e><e>delay</e><e>sets trigger delay, (time from assertion of trigger to occurrence of triggered event).</e><e>trigger[1|2]:delay &lt;seconds|minimum|maximum&gt;trigger[1|2]:delay? sets trigger delay, (time from assertion of trigger to occurrence of triggered event). parameter typical return 0 to 1000 s, in resolution of 4 ns; default 0 +1.050000000000000e-01 set channel 1 trigger delay to 105 ms:trig:del 105e-3 can be used with immediate, external, or bus trigger source (trigger[1|2]:source). </e></d><d><e>trigger:timer</e><e>timer</e><e>sets timer used when trigger[1|2]:source is timer.</e><e>trigger[1|2]:timer {&lt;seconds&gt;|minimum|maximum} trigger[1|2]:timer? {minimum|maximum} sets timer used when trigger[1|2]:source is timer. parameter typical return 1 �s to 8,000 s +3.000000000000000e-01 set trigger timer to 300 ms on channel 2:trig2:tim 0.3 in triggered burst mode (burst:mode trig), this command supersedes burst:internal:period. </e></d><d><e>trigger:slope</e><e>slope</e><e>specifies polarity of trigger signal on rear-panel trig in connector for any externally-triggered mode. </e><e>trigger[1|2]:slope {positive|negative}trigger[1|2]:slope? specifies polarity of trigger signal on rear-panel trig in connector for any externally-triggered mode. parameter typical return {positive|negative}, default pos (rising edge) pos or neg set trigger slope to falling edge:trig:slop neg </e></d><d><e>trigger:source</e><e>source</e><e>selects the trigger source for sequence, list, burst or sweep. </e><e>trigger[1|2]:source {immediate|external|timer|bus}trigger[1|2]:source? selects the trigger source for sequence, list, burst or sweep. the instrument accepts an immediate or timed internal trigger, an external hardware trigger from the rear-panel ext trig connector, or a software (bus) trigger. parameter typical return {immediate|external|timer|bus}, default immediate imm, ext, tim, bus select external trigger source (trigger each time a low-true ttl pulse is received on the rear-panel trigger input): trig:sour ext in triggered burst mode: the instrument outputs a waveform of the specified number of cycles (burst count) when a trigger received. after the specified number of cycles have been output, the instrument stops and waits for next trigger. immediate (internal): the instrument outputs continuously when burst mode is enabled. the rate at which the burst is generated is determined by burst:internal:period. external: the instrument accepts a hardware trigger at the rear-panel ext trig connector. the instrument outputs one burst of the specified number of cycles each time ext trig receives a ttl pulse with the proper polarity (trigger[1|2]:slope). external trigger signals during a burst are ignored. bus (software): the instrument initiates one burst each time a bus trigger (*trg) is received. the front-panel [trigger] key is illuminated when the instrument is waiting for a bus trigger. external or bus: burst count and burst phase remain in effect, but burst period is ignored. timer: trigger events are spaced by a timer, with the first trigger as soon as init occurs. in frequency sweep mode: immediate (internal): the instrument outputs continuously when the sweep is enabled. the period at which the sweep is generated is the sweep time (sweep:time) plus 1 ms. external: the instrument accepts a hardware trigger at the rear-panel ext trig connector. the instrument initiates one sweep each time trig in receives a ttl pulse of proper edge polarity (trigger[1|2]:slope). the trigger period must be at least sweep time (sweep:time) plus 1 ms. bus (software): the instrument initiates one sweep each time a bus trigger (*trg) is received. the front-panel [trigger] key is illuminated when the instrument is waiting for a bus trigger. apply sets trigger source to immediate. to ensure synchronization with bus source, send *wai (wait) so the instrument waits for all pending operations to complete before executing any additional commands. for example, the following command string guarantees that the first trigger is accepted and the operation is executed before second trigger is recognized. trig:sour bus;*trg;*wai;*trg;*wai use *opc? or *opc to determine when the sweep or burst is complete. the *opc? query returns 1 to the output buffer when the sweep or burst is complete. the *opc command sets the operation complete bit (bit 0) in the standard event register when the sweep or burst is complete. </e></d><d><e>unit:angle</e><e>angle</e><e>specifies the angle units that displayed on the screen and used for specifying angles.</e><e> unit:angle unit:angle {degree|radian|second|default}unit:angle? specifies the angle units that displayed on the screen and used for specifying angles. the selected units are used for setting the starting phase for a burst (burst:phase) and for setting the phase offset (phase). the associated queries are also affected. parameter typical return {degree|radian|second|default}, default degree deg, rad, or sec set angle units to radians:unit:angl rad the second option is only available for the 336xx models. the setting may be overridden by adding units to numeric parameter in command. for example, phase 90 deg specifies 90 degrees, regardless of this setting. the front-panel display always shows degrees, regardless of the unit:angle setting. </e></d><d><e>*cls</e><e>*cls</e><e>clears the event registers in all register groups. also clears the error queue.</e><e>*cls clear status command. clears the event registers in all register groups. also clears the error queue. parameter typical return (none) (none) clear event register bits and error queue:*cls </e></d><d><e>*ese</e><e>*ese</e><e>enables bits in the enable register for the standard event register group.</e><e>*ese &lt;enable_value&gt;*ese? event status enable command and query. enables bits in the enable register for the standard event register group. the selected bits are then reported to bit 5 of the status byte register. parameter typical return decimal sum of the bits in the register (table below), default 0. for example, to enable bit 2 (value 4), bit 3 (value 8), and bit 7 (value 128), the decimal sum would be 140 (4 + 8 + 128). default 0. +48 enable bit 4 (value 16) and bit 5 (value 32) in the enable register:*ese 48 use *psc to control whether the standard event enable register is cleared at power on. for example, *psc 0 preserves the enable register contents through power cycles. *cls does not clear enable register, does clear event register. </e></d><d><e>*esr</e><e>*esr</e><e>standard event status register query. queries the event register for the standard event register group. </e><e>*esr? standard event status register query. queries the event register for the standard event register group. register is read-only; bits not cleared when read. parameter typical return (none) +24 read the event register (bits 3 and 4 are set).*esr any or all conditions can be reported to the standard event summary bit through the enable register. to set the enable register mask, write a decimal value to the register using *ese. once a bit is set, it remains set until cleared by this query or *cls. </e></d><d><e>*idn</e><e>*idn</e><e>instrument’s identification string.</e><e>*idn? identification query. returns instrument�s identification string. parameter typical return (none) agilent technologies,33522b,xxxxxxxxxx,0.179-1.19-8.88-52-00 return the instrument's identification string:*idn? identification string contains four comma separated fields:manufacturer namemodel numberserial numberrevision code identification string is in the following format: agilent technologies,[model number],[10-char serial number],a.aaa-b.bb-c.cc-dd-ee a.aaa = firmware revision b.bb = front panel fw revision c.cc = power supply controller fw revision dd = fpga revision ee = pcba revision </e></d><d><e>*opc</e><e>*opc</e><e>sets "operation complete" (bit 0) in the standard event register at the completion of the current operation.
returns 1 to the output buffer after all pending commands complete.</e><e>*opc sets "operation complete" (bit 0) in the standard event register at the completion of the current operation. parameter typical return (none) (none) set operation complete bit:*opc the purpose of this command is to synchronize your application with the instrument. used in triggered sweep, triggered burst, list, or arbitrary waveform sequence modes to provide a way to poll or interrupt the computer when the *trg or initiate[:immediate] is complete. other commands may be executed before operation complete bit is set. the difference between *opc and *opc? is that *opc? returns "1" to the output buffer when the current operation completes. </e><e>*opc? returns 1 to the output buffer after all pending commands complete. parameter typical return (none) 1 return 1 when all previous commands complete:*opc? the purpose of this command is to synchronize your application with the instrument. other commands cannot be executed until this command completes. the difference between *opc and *opc? is that *opc? returns "1" to the output buffer when the current operation completes. </e></d><d><e>*opt</e><e>*opt</e><e>returns a quoted string identifying any installed options.</e><e>*opt? returns a quoted string identifying any installed options. parameter typical return (none) "0,mem,sec,iqp" returns installed options (example: standard timebase, extended memory, security, iq player)*opt? </e></d><d><e>*psc</e><e>*psc</e><e>power-on status clear. enables (1) or disables (0) clearing of two specific registers at power on.</e><e>*psc {0|1}*psc? power-on status clear. enables (1) or disables (0) clearing of two specific registers at power on: standard event enable register (*ese). status byte condition register (*sre). questionable data register standard operation register parameter typical return {0|1}, default 1 0 or 1 disables power-on clearing of affected registers:*psc 0 *rcl {0|1|2|3|4}</e></d><d><e>*rcl</e><e>*rcl</e><e>recalls (*rcl) instrument state in specified non-volatile location.</e><e>*rcl {0|1|2|3|4}*sav {0|1|2|3|4} recalls (*rcl) or saves (*sav) instrument state in specified non-volatile location. previously stored state in location is overwritten (no error is generated). parameter typical return {0|1|2|3|4} (none) recall state from location 1:*rcl 1 the instrument has five non-volatile storage locations to store instrument states. location 0 holds the instrument power down state. use locations 1, 2, 3, and 4 to store other states. you can configure the instrument to recall the power-down state when power is restored (mem:stat:rec:auto). state storage "remembers" the selected function (including arbitrary waveforms), frequency, amplitude, dc offset, duty cycle, symmetry, as well as any modulation parameters in use. also remembers front-panel display state (disp). when shipped from the factory, locations 1 through 4 are empty, and location 0 has power-on state. from the remote interface only, you can use location 0 to store a fifth instrument state (you cannot store to this location from the front panel). however, location 0 is overwritten when power is cycled. you can assign a user-defined name to each of locations 0 through 4. states stored in memory are not affected by *rst. if you delete an arbitrary waveform from non-volatile memory after storing the instrument state, the waveform data is lost and the instrument will not output the waveform when the state is recalled; it will output the built-in "exponential rise" instead. the front panel uses mmemory subsystem for state storage. </e></d><d><e>*rst</e><e>*rst</e><e>resets instrument to factory default state.</e><e>*rst resets instrument to factory default state, independent of memory:state:recall:auto setting. parameter typical return (none) (none) reset the instrument:*rst does not affect stored instrument states, stored arbitrary waveforms, or i/o settings; these are stored in non-volatile memory. aborts a sweep or burst in progress. </e></d><d><e>*sav</e><e>*sav</e><e>saves (*sav) instrument state in specified non-volatile location. </e><e>*rcl {0|1|2|3|4}*sav {0|1|2|3|4} recalls (*rcl) or saves (*sav) instrument state in specified non-volatile location. previously stored state in location is overwritten (no error is generated). parameter typical return {0|1|2|3|4} (none) recall state from location 1:*rcl 1 the instrument has five non-volatile storage locations to store instrument states. location 0 holds the instrument power down state. use locations 1, 2, 3, and 4 to store other states. you can configure the instrument to recall the power-down state when power is restored (mem:stat:rec:auto). state storage "remembers" the selected function (including arbitrary waveforms), frequency, amplitude, dc offset, duty cycle, symmetry, as well as any modulation parameters in use. also remembers front-panel display state (disp). when shipped from the factory, locations 1 through 4 are empty, and location 0 has power-on state. from the remote interface only, you can use location 0 to store a fifth instrument state (you cannot store to this location from the front panel). however, location 0 is overwritten when power is cycled. you can assign a user-defined name to each of locations 0 through 4. states stored in memory are not affected by *rst. if you delete an arbitrary waveform from non-volatile memory after storing the instrument state, the waveform data is lost and the instrument will not output the waveform when the state is recalled; it will output the built-in "exponential rise" instead. the front panel uses mmemory subsystem for state storage. </e></d><d><e>*sre</e><e>*sre</e><e>service request enable. this command enables bits in the enable register for the status byte register group.</e><e>*sre &lt;enable_value&gt;*sre? service request enable. this command enables bits in the enable register for the status byte register group. parameter typical return decimal sum of the bits in the register (table below), default 0. for example, to enable bit 2 (value 4), bit 3 (value 8), and bit 7 (value 128), the decimal sum would be 140 (4 + 8 + 128). default 0. +24 enable bits 3 and 4 in the enable register:*sre 24 to enable specific bits, specify the decimal value corresponding to the binary-weighted sum of the bits in the register. the selected bits are summarized in the "master summary" bit (bit 6) of the status byte register. if any of the selected bits change from 0 to 1, the instrument generates a service request signal. *cls clears the event register, but not the enable register. *psc (power-on status clear) determines whether status byte enable register is cleared at power on. for example, *psc 0 preserves the contents of the enable register through power cycles. status byte enable register is not cleared by *rst. </e></d><d><e>*stb</e><e>*stb</e><e>read status byte query. this command queries the condition register for the status byte register group.</e><e>*stb? read status byte query. this command queries the condition register for the status byte register group. parameter typical return (none) +40 read condition register (with bits 3 and 5 set):*stb? similar to a serial poll, but processed like any other instrument command. register is read-only; bits not cleared when read. returns same result as a serial poll, but "master summary" bit (bit 6) is not cleared by *stb?. power cycle or *rst clears all bits in condition register. returns a decimal value that corresponds to the binary-weighted sum of all bits set in the register. for example, with bit 3 ( value 8) and bit 5 (value 32) set (and corresponding bits enabled), the query returns +40. </e></d><d><e>*trg</e><e>*trg</e><e>trigger command. triggers a sweep, burst, arbitrary waveform advance, or list advance from the remote interface if the bus (software) trigger source is currently selected.</e><e>*trg trigger command. triggers a sweep, burst, arbitrary waveform advance, or list advance from the remote interface if the bus (software) trigger source is currently selected (trigger[1|2]:source bus). parameter typical return (none) (none) send immediate trigger to initiate a burst:burs:stat onburs:mode trigtrig:sour bus*trg </e></d><d><e>*tst</e><e>*tst</e><e>self-test query. performs a complete instrument self-test.</e><e>*tst? self-test query. performs a complete instrument self-test. if test fails, one or more error messages will provide additional information. use system:error? to read error queue. parameter typical return (none) +0 (pass) or +1 (one or more tests failed) perform self-test:*tst? a power-on self-test occurs when you turn on the instrument. this limited test assures you that the instrument is operational. a complete self-test (*tst?) takes approximately 15 seconds. if all tests pass, you have high confidence that the instrument is fully operational. passing *tst displays "self-test passed" on the front panel. otherwise, it displays "self-test failed" and an error number. see service and repair - introduction for instructions on contacting support or returning the instrument for service. </e></d><d><e>*wai</e><e>*wai</e><e>configures the instrument to wait for all pending operations to complete before executing any additional commands over the interface.</e><e>*wai configures the instrument to wait for all pending operations to complete before executing any additional commands over the interface. parameter typical return (none) (none) wait until all pending operations complete.*wai </e></d></a><a name="Transport"><d><e>defaulttimeout</e><e>defaulttimeout</e><e>defaulttimeout specifies the timeout, in milliseconds, for queries issued to this instrument.

a timeout will occur if there is no response from the instrument within the specified duration.

a value of -1 is used to specify no timeout.
</e></d><d><e>errorquerybehavior</e><e>errorquerybehavior</e><e>errorquerybehavior specifies whether command expert automatically retrieves errors from the instrument's scpi error queue by sending syst:err? queries. command expert displays errors retrieved from the scpi error queue in the results column of the sequence pane.

the supported values for errorquerybehavior are:

     none - syst:err? queries will not be automatically sent.

     errorquerypercommand - a :syst:err? query will be sent after each command, and after each query that times out.

     errorquerypercommandandquery - a :syst:err? query will be sent after each command and after each query.
</e></d><d><e>opcbehavior</e><e>opcbehavior</e><e>opcbehavior specifies whether command expert automatically sends a *opc? query after each command.

the supported values for opcbehavior are:

     none - *opc? queries will not be automatically sent to the instrument.

     opcpercommand - an *opc? query will be sent after every command, and no further commands or queries will be sent until the *opc? returns.
</e></d><d><e>omitdefaultkeywords</e><e>omitdefaultkeywords</e><e>omitdefaultkeywords specifies whether to omit default keywords when sending scpi commands.</e></d><d><e>useshortformkeywords</e><e>useshortformkeywords</e><e>useshortformkeywords specifies whether to use the short form of spci keywords when sending scpi commands.</e></d><d><e>ignorederrors</e><e>ignorederrors</e><e>ignorederrors is a string that specifies the list of scpi error codes that will be ignored during execution.

for example, setting ignorederrors to the string "1:100,301:400" specifies that error codes from 1 to 100 inclusive and 301 to 400 inclusive will be ignored.

when setting ignorederrors, the input string should contain a list of zero or more items, separated by commas. each item is either an integer, or a range of the form x:y where x and y are integers. the integers can be positive, 0, or negative.</e></d><d><e>addtoignorederrors</e><e>addtoignorederrors</e><e>addtoignorederrors adds the specified error codes to ignorederrors (the list of scpi error codes ignored during execution).

for example, invoking addtoignorederrors with the string "1:100,301:400" will add the error codes from 1 to 100 inclusive and 301 to 400 inclusive.

when invoking addtoignorederrors, the input string should contain a list of zero or more items, separated by commas. each item is either an integer, or a range of the form x:y where x and y are integers. the integers can be positive, 0, or negative.</e></d><d><e>removefromignorederrors</e><e>removefromignorederrors</e><e>removefromignorederrors removes the specified error codes from ignorederrors (the list of scpi error codes ignored during execution).

for example, invoking removefromignorederrors with the string "1:100,301:400" will remove the error codes from 1 to 100 inclusive and 301 to 400 inclusive.

when invoking removefromignorederrors, the input string should contain a list of zero or more items, separated by commas. each item is either an integer, or a range of the form x:y where x and y are integers. the integers can be positive, 0, or negative.</e></d><d><e>command</e><e>command</e><e>sends a scpi command that does not return a response from the instrument.  use the transport resource query if the instrument returns a response.</e></d><d><e>query</e><e>query</e><e>sends a scpi query string directly to the instrument and returns the result.</e></d><d><e>commandbatching</e><e>commandbatching</e><e>commandbatching specifies scpi command batching behavior.
</e></d><d><e>sendbatchedcommands</e><e>sendbatchedcommands</e><e>sendbatchedcommands sends any commands that are currently batched.
</e></d><d><e>array/setarrayelement/setarrayelement_double</e><e>setarrayelement_double</e><e>set a value to the element at the specified position in the one-dimensional array.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/setarrayelement/setarrayelement_int</e><e>setarrayelement_int</e><e>set a value to the element at the specified position in the one-dimensional array.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/setarrayelement/setarrayelement_byte</e><e>setarrayelement_byte</e><e>set a value to the element at the specified position in the one-dimensional array.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/setarrayelement/setarrayelement_string</e><e>setarrayelement_string</e><e>set a value to the element at the specified position in the one-dimensional array.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/getarrayelement/getarrayelement_double</e><e>getarrayelement_double</e><e>get an element of one-dimensional array at the specified index.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/getarrayelement/getarrayelement_int</e><e>getarrayelement_int</e><e>get an element of one-dimensional array at the specified index.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/getarrayelement/getarrayelement_byte</e><e>getarrayelement_byte</e><e>get an element of one-dimensional array at the specified index.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>array/getarrayelement/getarrayelement_string</e><e>getarrayelement_string</e><e>get an element of one-dimensional array at the specified index.
throw argumentoutofrangeexception when index is outside the range of valid indexes for the current array.
throw argumentexception when the current array does not have exactly one dimension.
</e></d><d><e>terminator/getwriteterminator</e><e>getwriteterminator</e><e>get the write terminating characters of scpi</e></d><d><e>terminator/setwriteterminator</e><e>setwriteterminator</e><e>change the write terminating characters of scpi</e></d><d><e>terminator/getreadterminator</e><e>getreadterminator</e><e>get the read terminating characters of scpi</e></d><d><e>terminator/setreadterminator</e><e>setreadterminator</e><e>change the read terminating characters of scpi</e></d><d><e>convert/stringtoint</e><e>stringtoint</e><e>convert string into integer</e></d><d><e>convert/stringtodouble</e><e>stringtodouble</e><e>convert string into double</e></d><d><e>convert/stringtobyte</e><e>stringtobyte</e><e>convert string into byte</e></d><d><e>convert/inttostring</e><e>inttostring</e><e>convert integer into string</e></d><d><e>convert/inttodouble</e><e>inttodouble</e><e>convert integer into double</e></d><d><e>convert/inttobyte</e><e>inttobyte</e><e>convert integer into byte</e></d><d><e>convert/doubletobyte</e><e>doubletobyte</e><e>convert double into byte</e></d><d><e>convert/doubletoint</e><e>doubletoint</e><e>convert double into int</e></d><d><e>convert/doubletostring</e><e>doubletostring</e><e>convert double into string</e></d><d><e>convert/bytetostring</e><e>bytetostring</e><e>convert byte into string</e></d><d><e>convert/bytetodouble</e><e>bytetodouble</e><e>convert byte into double</e></d><d><e>convert/bytetoint</e><e>bytetoint</e><e>convert byte into int</e></d></a></HierarchySearchSerializer>